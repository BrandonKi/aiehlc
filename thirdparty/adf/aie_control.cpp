/********************************************* Disclaimer *********************************************/
/* This file is generated by aiecompiler . */
/* Changes to this file may cause incorrect behavior and will be lost if aiecompiler is invoked again.*/

/************************** Constants/Macros *****************************/
#define HW_GEN                   XAIE_DEV_GEN_AIEML
#define XAIE_NUM_ROWS            11
#define XAIE_NUM_COLS            38
#define XAIE_BASE_ADDR           0x20000000000
#define XAIE_COL_SHIFT           25
#define XAIE_ROW_SHIFT           20
#define XAIE_SHIM_ROW            0
#define XAIE_MEM_TILE_ROW_START  1
#define XAIE_MEM_TILE_NUM_ROWS   2
#define XAIE_AIE_TILE_ROW_START  3
#define XAIE_AIE_TILE_NUM_ROWS   8
#define FOR_WRITE                0
#define FOR_READ                 1

/***************************** Includes *********************************/
#include <fstream>
#include <adf.h>
extern "C"
{
  #include <xaiengine.h>
}

#if defined(__CDO__) || defined(__AIECONTROLCODE__)
#include "adf/adf_api/common_layer/fal_util.h"
#endif

#include "adf/adf_api/AIEControlConfig.h"

XAie_InstDeclare(DevInst, &ConfigPtr);   // Declare global device instance


/************************** Functions/APIs *****************************/
  adf::return_code broadcastConfigForCoreEnable()
  {
	if(!adf::reserveBroadcastchannelForEnablingCores())
	{
		std::cerr << "ERROR: Failed to reserve Broadcast channels for enabling core.\n";
		return adf::return_code::aie_driver_error;
	}

	int driverStatus = AieRC::XAIE_OK;
	driverStatus |= XAie_EventBroadcast(&DevInst, XAie_TileLoc(0, 0), XAIE_PL_MOD, 7, XAIE_EVENT_BROADCAST_A_8_PL);
	driverStatus |= XAie_EventBroadcastBlockDir(&DevInst, XAie_TileLoc(0, 0), XAIE_PL_MOD, XAIE_EVENT_SWITCH_A, 7, XAIE_EVENT_BROADCAST_SOUTH | XAIE_EVENT_BROADCAST_WEST | XAIE_EVENT_BROADCAST_EAST);
	driverStatus |= XAie_EventBroadcastBlockDir(&DevInst, XAie_TileLoc(0, 0), XAIE_PL_MOD, XAIE_EVENT_SWITCH_A, 8, XAIE_EVENT_BROADCAST_SOUTH | XAIE_EVENT_BROADCAST_WEST | XAIE_EVENT_BROADCAST_NORTH);
	driverStatus |= XAie_EventBroadcastBlockDir(&DevInst, XAie_TileLoc(0, 0), XAIE_PL_MOD, XAIE_EVENT_SWITCH_B, 8, XAIE_EVENT_BROADCAST_SOUTH | XAIE_EVENT_BROADCAST_WEST | XAIE_EVENT_BROADCAST_NORTH);
	driverStatus |= XAie_EventBroadcastBlockDir(&DevInst, XAie_TileLoc(0, 1), XAIE_MEM_MOD, XAIE_EVENT_SWITCH_A, 7, XAIE_EVENT_BROADCAST_SOUTH | XAIE_EVENT_BROADCAST_WEST | XAIE_EVENT_BROADCAST_EAST);
	driverStatus |= XAie_EventBroadcastBlockDir(&DevInst, XAie_TileLoc(0, 2), XAIE_MEM_MOD, XAIE_EVENT_SWITCH_A, 7, XAIE_EVENT_BROADCAST_SOUTH | XAIE_EVENT_BROADCAST_WEST | XAIE_EVENT_BROADCAST_EAST);
	driverStatus |= XAie_EventBroadcast(&DevInst, XAie_TileLoc(1, 0), XAIE_PL_MOD, 7, XAIE_EVENT_BROADCAST_A_8_PL);
	driverStatus |= XAie_EventBroadcastBlockDir(&DevInst, XAie_TileLoc(1, 0), XAIE_PL_MOD, XAIE_EVENT_SWITCH_A, 7, XAIE_EVENT_BROADCAST_SOUTH | XAIE_EVENT_BROADCAST_WEST | XAIE_EVENT_BROADCAST_EAST);
	driverStatus |= XAie_EventBroadcastBlockDir(&DevInst, XAie_TileLoc(1, 0), XAIE_PL_MOD, XAIE_EVENT_SWITCH_A, 8, XAIE_EVENT_BROADCAST_SOUTH | XAIE_EVENT_BROADCAST_WEST | XAIE_EVENT_BROADCAST_NORTH);
	driverStatus |= XAie_EventBroadcastBlockDir(&DevInst, XAie_TileLoc(1, 0), XAIE_PL_MOD, XAIE_EVENT_SWITCH_B, 8, XAIE_EVENT_BROADCAST_SOUTH | XAIE_EVENT_BROADCAST_WEST | XAIE_EVENT_BROADCAST_NORTH);
	driverStatus |= XAie_EventBroadcastBlockDir(&DevInst, XAie_TileLoc(1, 1), XAIE_MEM_MOD, XAIE_EVENT_SWITCH_A, 7, XAIE_EVENT_BROADCAST_SOUTH | XAIE_EVENT_BROADCAST_WEST | XAIE_EVENT_BROADCAST_EAST);
	driverStatus |= XAie_EventBroadcastBlockDir(&DevInst, XAie_TileLoc(1, 2), XAIE_MEM_MOD, XAIE_EVENT_SWITCH_A, 7, XAIE_EVENT_BROADCAST_SOUTH | XAIE_EVENT_BROADCAST_WEST | XAIE_EVENT_BROADCAST_EAST);
	driverStatus |= XAie_EventBroadcast(&DevInst, XAie_TileLoc(2, 0), XAIE_PL_MOD, 7, XAIE_EVENT_BROADCAST_A_8_PL);
	driverStatus |= XAie_EventBroadcastBlockDir(&DevInst, XAie_TileLoc(2, 0), XAIE_PL_MOD, XAIE_EVENT_SWITCH_A, 7, XAIE_EVENT_BROADCAST_SOUTH | XAIE_EVENT_BROADCAST_WEST | XAIE_EVENT_BROADCAST_EAST);
	driverStatus |= XAie_EventBroadcastBlockDir(&DevInst, XAie_TileLoc(2, 0), XAIE_PL_MOD, XAIE_EVENT_SWITCH_A, 8, XAIE_EVENT_BROADCAST_SOUTH | XAIE_EVENT_BROADCAST_WEST | XAIE_EVENT_BROADCAST_NORTH);
	driverStatus |= XAie_EventBroadcastBlockDir(&DevInst, XAie_TileLoc(2, 0), XAIE_PL_MOD, XAIE_EVENT_SWITCH_B, 8, XAIE_EVENT_BROADCAST_SOUTH | XAIE_EVENT_BROADCAST_WEST | XAIE_EVENT_BROADCAST_NORTH);
	driverStatus |= XAie_EventBroadcastBlockDir(&DevInst, XAie_TileLoc(2, 1), XAIE_MEM_MOD, XAIE_EVENT_SWITCH_A, 7, XAIE_EVENT_BROADCAST_SOUTH | XAIE_EVENT_BROADCAST_WEST | XAIE_EVENT_BROADCAST_EAST);
	driverStatus |= XAie_EventBroadcastBlockDir(&DevInst, XAie_TileLoc(2, 2), XAIE_MEM_MOD, XAIE_EVENT_SWITCH_A, 7, XAIE_EVENT_BROADCAST_SOUTH | XAIE_EVENT_BROADCAST_WEST | XAIE_EVENT_BROADCAST_EAST);
	driverStatus |= XAie_EventBroadcast(&DevInst, XAie_TileLoc(3, 0), XAIE_PL_MOD, 7, XAIE_EVENT_BROADCAST_A_8_PL);
	driverStatus |= XAie_EventBroadcastBlockDir(&DevInst, XAie_TileLoc(3, 0), XAIE_PL_MOD, XAIE_EVENT_SWITCH_A, 7, XAIE_EVENT_BROADCAST_SOUTH | XAIE_EVENT_BROADCAST_WEST | XAIE_EVENT_BROADCAST_EAST);
	driverStatus |= XAie_EventBroadcastBlockDir(&DevInst, XAie_TileLoc(3, 0), XAIE_PL_MOD, XAIE_EVENT_SWITCH_A, 8, XAIE_EVENT_BROADCAST_SOUTH | XAIE_EVENT_BROADCAST_WEST | XAIE_EVENT_BROADCAST_NORTH);
	driverStatus |= XAie_EventBroadcastBlockDir(&DevInst, XAie_TileLoc(3, 0), XAIE_PL_MOD, XAIE_EVENT_SWITCH_B, 8, XAIE_EVENT_BROADCAST_SOUTH | XAIE_EVENT_BROADCAST_WEST | XAIE_EVENT_BROADCAST_NORTH);
	driverStatus |= XAie_EventBroadcastBlockDir(&DevInst, XAie_TileLoc(3, 1), XAIE_MEM_MOD, XAIE_EVENT_SWITCH_A, 7, XAIE_EVENT_BROADCAST_SOUTH | XAIE_EVENT_BROADCAST_WEST | XAIE_EVENT_BROADCAST_EAST);
	driverStatus |= XAie_EventBroadcastBlockDir(&DevInst, XAie_TileLoc(3, 2), XAIE_MEM_MOD, XAIE_EVENT_SWITCH_A, 7, XAIE_EVENT_BROADCAST_SOUTH | XAIE_EVENT_BROADCAST_WEST | XAIE_EVENT_BROADCAST_EAST);
	driverStatus |= XAie_EventBroadcast(&DevInst, XAie_TileLoc(4, 0), XAIE_PL_MOD, 7, XAIE_EVENT_BROADCAST_A_8_PL);
	driverStatus |= XAie_EventBroadcastBlockDir(&DevInst, XAie_TileLoc(4, 0), XAIE_PL_MOD, XAIE_EVENT_SWITCH_A, 7, XAIE_EVENT_BROADCAST_SOUTH | XAIE_EVENT_BROADCAST_WEST | XAIE_EVENT_BROADCAST_EAST);
	driverStatus |= XAie_EventBroadcastBlockDir(&DevInst, XAie_TileLoc(4, 0), XAIE_PL_MOD, XAIE_EVENT_SWITCH_A, 8, XAIE_EVENT_BROADCAST_SOUTH | XAIE_EVENT_BROADCAST_WEST | XAIE_EVENT_BROADCAST_NORTH);
	driverStatus |= XAie_EventBroadcastBlockDir(&DevInst, XAie_TileLoc(4, 0), XAIE_PL_MOD, XAIE_EVENT_SWITCH_B, 8, XAIE_EVENT_BROADCAST_SOUTH | XAIE_EVENT_BROADCAST_WEST | XAIE_EVENT_BROADCAST_NORTH);
	driverStatus |= XAie_EventBroadcastBlockDir(&DevInst, XAie_TileLoc(4, 1), XAIE_MEM_MOD, XAIE_EVENT_SWITCH_A, 7, XAIE_EVENT_BROADCAST_SOUTH | XAIE_EVENT_BROADCAST_WEST | XAIE_EVENT_BROADCAST_EAST);
	driverStatus |= XAie_EventBroadcastBlockDir(&DevInst, XAie_TileLoc(4, 2), XAIE_MEM_MOD, XAIE_EVENT_SWITCH_A, 7, XAIE_EVENT_BROADCAST_SOUTH | XAIE_EVENT_BROADCAST_WEST | XAIE_EVENT_BROADCAST_EAST);
	driverStatus |= XAie_EventBroadcast(&DevInst, XAie_TileLoc(5, 0), XAIE_PL_MOD, 7, XAIE_EVENT_BROADCAST_A_8_PL);
	driverStatus |= XAie_EventBroadcastBlockDir(&DevInst, XAie_TileLoc(5, 0), XAIE_PL_MOD, XAIE_EVENT_SWITCH_A, 7, XAIE_EVENT_BROADCAST_SOUTH | XAIE_EVENT_BROADCAST_WEST | XAIE_EVENT_BROADCAST_EAST);
	driverStatus |= XAie_EventBroadcastBlockDir(&DevInst, XAie_TileLoc(5, 0), XAIE_PL_MOD, XAIE_EVENT_SWITCH_A, 8, XAIE_EVENT_BROADCAST_SOUTH | XAIE_EVENT_BROADCAST_WEST | XAIE_EVENT_BROADCAST_NORTH);
	driverStatus |= XAie_EventBroadcastBlockDir(&DevInst, XAie_TileLoc(5, 0), XAIE_PL_MOD, XAIE_EVENT_SWITCH_B, 8, XAIE_EVENT_BROADCAST_SOUTH | XAIE_EVENT_BROADCAST_WEST | XAIE_EVENT_BROADCAST_NORTH);
	driverStatus |= XAie_EventBroadcastBlockDir(&DevInst, XAie_TileLoc(5, 1), XAIE_MEM_MOD, XAIE_EVENT_SWITCH_A, 7, XAIE_EVENT_BROADCAST_SOUTH | XAIE_EVENT_BROADCAST_WEST | XAIE_EVENT_BROADCAST_EAST);
	driverStatus |= XAie_EventBroadcastBlockDir(&DevInst, XAie_TileLoc(5, 2), XAIE_MEM_MOD, XAIE_EVENT_SWITCH_A, 7, XAIE_EVENT_BROADCAST_SOUTH | XAIE_EVENT_BROADCAST_WEST | XAIE_EVENT_BROADCAST_EAST);
	driverStatus |= XAie_EventBroadcast(&DevInst, XAie_TileLoc(6, 0), XAIE_PL_MOD, 7, XAIE_EVENT_BROADCAST_A_8_PL);
	driverStatus |= XAie_EventBroadcastBlockDir(&DevInst, XAie_TileLoc(6, 0), XAIE_PL_MOD, XAIE_EVENT_SWITCH_A, 7, XAIE_EVENT_BROADCAST_SOUTH | XAIE_EVENT_BROADCAST_WEST | XAIE_EVENT_BROADCAST_EAST);
	driverStatus |= XAie_EventBroadcastBlockDir(&DevInst, XAie_TileLoc(6, 0), XAIE_PL_MOD, XAIE_EVENT_SWITCH_A, 8, XAIE_EVENT_BROADCAST_SOUTH | XAIE_EVENT_BROADCAST_WEST | XAIE_EVENT_BROADCAST_NORTH);
	driverStatus |= XAie_EventBroadcastBlockDir(&DevInst, XAie_TileLoc(6, 0), XAIE_PL_MOD, XAIE_EVENT_SWITCH_B, 8, XAIE_EVENT_BROADCAST_SOUTH | XAIE_EVENT_BROADCAST_WEST | XAIE_EVENT_BROADCAST_NORTH);
	driverStatus |= XAie_EventBroadcastBlockDir(&DevInst, XAie_TileLoc(6, 1), XAIE_MEM_MOD, XAIE_EVENT_SWITCH_A, 7, XAIE_EVENT_BROADCAST_SOUTH | XAIE_EVENT_BROADCAST_WEST | XAIE_EVENT_BROADCAST_EAST);
	driverStatus |= XAie_EventBroadcastBlockDir(&DevInst, XAie_TileLoc(6, 2), XAIE_MEM_MOD, XAIE_EVENT_SWITCH_A, 7, XAIE_EVENT_BROADCAST_SOUTH | XAIE_EVENT_BROADCAST_WEST | XAIE_EVENT_BROADCAST_EAST);
	driverStatus |= XAie_EventBroadcast(&DevInst, XAie_TileLoc(7, 0), XAIE_PL_MOD, 7, XAIE_EVENT_BROADCAST_A_8_PL);
	driverStatus |= XAie_EventBroadcastBlockDir(&DevInst, XAie_TileLoc(7, 0), XAIE_PL_MOD, XAIE_EVENT_SWITCH_A, 7, XAIE_EVENT_BROADCAST_SOUTH | XAIE_EVENT_BROADCAST_WEST | XAIE_EVENT_BROADCAST_EAST);
	driverStatus |= XAie_EventBroadcastBlockDir(&DevInst, XAie_TileLoc(7, 0), XAIE_PL_MOD, XAIE_EVENT_SWITCH_A, 8, XAIE_EVENT_BROADCAST_SOUTH | XAIE_EVENT_BROADCAST_WEST | XAIE_EVENT_BROADCAST_NORTH);
	driverStatus |= XAie_EventBroadcastBlockDir(&DevInst, XAie_TileLoc(7, 0), XAIE_PL_MOD, XAIE_EVENT_SWITCH_B, 8, XAIE_EVENT_BROADCAST_SOUTH | XAIE_EVENT_BROADCAST_WEST | XAIE_EVENT_BROADCAST_NORTH);
	driverStatus |= XAie_EventBroadcastBlockDir(&DevInst, XAie_TileLoc(7, 1), XAIE_MEM_MOD, XAIE_EVENT_SWITCH_A, 7, XAIE_EVENT_BROADCAST_SOUTH | XAIE_EVENT_BROADCAST_WEST | XAIE_EVENT_BROADCAST_EAST);
	driverStatus |= XAie_EventBroadcastBlockDir(&DevInst, XAie_TileLoc(7, 2), XAIE_MEM_MOD, XAIE_EVENT_SWITCH_A, 7, XAIE_EVENT_BROADCAST_SOUTH | XAIE_EVENT_BROADCAST_WEST | XAIE_EVENT_BROADCAST_EAST);
	driverStatus |= XAie_EventBroadcast(&DevInst, XAie_TileLoc(8, 0), XAIE_PL_MOD, 7, XAIE_EVENT_BROADCAST_A_8_PL);
	driverStatus |= XAie_EventBroadcastBlockDir(&DevInst, XAie_TileLoc(8, 0), XAIE_PL_MOD, XAIE_EVENT_SWITCH_A, 7, XAIE_EVENT_BROADCAST_SOUTH | XAIE_EVENT_BROADCAST_WEST | XAIE_EVENT_BROADCAST_EAST);
	driverStatus |= XAie_EventBroadcastBlockDir(&DevInst, XAie_TileLoc(8, 0), XAIE_PL_MOD, XAIE_EVENT_SWITCH_A, 8, XAIE_EVENT_BROADCAST_SOUTH | XAIE_EVENT_BROADCAST_WEST | XAIE_EVENT_BROADCAST_NORTH);
	driverStatus |= XAie_EventBroadcastBlockDir(&DevInst, XAie_TileLoc(8, 0), XAIE_PL_MOD, XAIE_EVENT_SWITCH_B, 8, XAIE_EVENT_BROADCAST_SOUTH | XAIE_EVENT_BROADCAST_WEST | XAIE_EVENT_BROADCAST_NORTH);
	driverStatus |= XAie_EventBroadcastBlockDir(&DevInst, XAie_TileLoc(8, 1), XAIE_MEM_MOD, XAIE_EVENT_SWITCH_A, 7, XAIE_EVENT_BROADCAST_SOUTH | XAIE_EVENT_BROADCAST_WEST | XAIE_EVENT_BROADCAST_EAST);
	driverStatus |= XAie_EventBroadcastBlockDir(&DevInst, XAie_TileLoc(8, 2), XAIE_MEM_MOD, XAIE_EVENT_SWITCH_A, 7, XAIE_EVENT_BROADCAST_SOUTH | XAIE_EVENT_BROADCAST_WEST | XAIE_EVENT_BROADCAST_EAST);
	driverStatus |= XAie_EventBroadcast(&DevInst, XAie_TileLoc(9, 0), XAIE_PL_MOD, 7, XAIE_EVENT_BROADCAST_A_8_PL);
	driverStatus |= XAie_EventBroadcastBlockDir(&DevInst, XAie_TileLoc(9, 0), XAIE_PL_MOD, XAIE_EVENT_SWITCH_A, 7, XAIE_EVENT_BROADCAST_SOUTH | XAIE_EVENT_BROADCAST_WEST | XAIE_EVENT_BROADCAST_EAST);
	driverStatus |= XAie_EventBroadcastBlockDir(&DevInst, XAie_TileLoc(9, 0), XAIE_PL_MOD, XAIE_EVENT_SWITCH_A, 8, XAIE_EVENT_BROADCAST_SOUTH | XAIE_EVENT_BROADCAST_WEST | XAIE_EVENT_BROADCAST_NORTH);
	driverStatus |= XAie_EventBroadcastBlockDir(&DevInst, XAie_TileLoc(9, 0), XAIE_PL_MOD, XAIE_EVENT_SWITCH_B, 8, XAIE_EVENT_BROADCAST_SOUTH | XAIE_EVENT_BROADCAST_WEST | XAIE_EVENT_BROADCAST_NORTH);
	driverStatus |= XAie_EventBroadcastBlockDir(&DevInst, XAie_TileLoc(9, 1), XAIE_MEM_MOD, XAIE_EVENT_SWITCH_A, 7, XAIE_EVENT_BROADCAST_SOUTH | XAIE_EVENT_BROADCAST_WEST | XAIE_EVENT_BROADCAST_EAST);
	driverStatus |= XAie_EventBroadcastBlockDir(&DevInst, XAie_TileLoc(9, 2), XAIE_MEM_MOD, XAIE_EVENT_SWITCH_A, 7, XAIE_EVENT_BROADCAST_SOUTH | XAIE_EVENT_BROADCAST_WEST | XAIE_EVENT_BROADCAST_EAST);
	driverStatus |= XAie_EventBroadcast(&DevInst, XAie_TileLoc(10, 0), XAIE_PL_MOD, 7, XAIE_EVENT_BROADCAST_A_8_PL);
	driverStatus |= XAie_EventBroadcastBlockDir(&DevInst, XAie_TileLoc(10, 0), XAIE_PL_MOD, XAIE_EVENT_SWITCH_A, 7, XAIE_EVENT_BROADCAST_SOUTH | XAIE_EVENT_BROADCAST_WEST | XAIE_EVENT_BROADCAST_EAST);
	driverStatus |= XAie_EventBroadcastBlockDir(&DevInst, XAie_TileLoc(10, 0), XAIE_PL_MOD, XAIE_EVENT_SWITCH_A, 8, XAIE_EVENT_BROADCAST_SOUTH | XAIE_EVENT_BROADCAST_WEST | XAIE_EVENT_BROADCAST_NORTH);
	driverStatus |= XAie_EventBroadcastBlockDir(&DevInst, XAie_TileLoc(10, 0), XAIE_PL_MOD, XAIE_EVENT_SWITCH_B, 8, XAIE_EVENT_BROADCAST_SOUTH | XAIE_EVENT_BROADCAST_WEST | XAIE_EVENT_BROADCAST_NORTH);
	driverStatus |= XAie_EventBroadcastBlockDir(&DevInst, XAie_TileLoc(10, 1), XAIE_MEM_MOD, XAIE_EVENT_SWITCH_A, 7, XAIE_EVENT_BROADCAST_SOUTH | XAIE_EVENT_BROADCAST_WEST | XAIE_EVENT_BROADCAST_EAST);
	driverStatus |= XAie_EventBroadcastBlockDir(&DevInst, XAie_TileLoc(10, 2), XAIE_MEM_MOD, XAIE_EVENT_SWITCH_A, 7, XAIE_EVENT_BROADCAST_SOUTH | XAIE_EVENT_BROADCAST_WEST | XAIE_EVENT_BROADCAST_EAST);
	driverStatus |= XAie_EventBroadcast(&DevInst, XAie_TileLoc(11, 0), XAIE_PL_MOD, 7, XAIE_EVENT_BROADCAST_A_8_PL);
	driverStatus |= XAie_EventBroadcastBlockDir(&DevInst, XAie_TileLoc(11, 0), XAIE_PL_MOD, XAIE_EVENT_SWITCH_A, 7, XAIE_EVENT_BROADCAST_SOUTH | XAIE_EVENT_BROADCAST_WEST | XAIE_EVENT_BROADCAST_EAST);
	driverStatus |= XAie_EventBroadcastBlockDir(&DevInst, XAie_TileLoc(11, 0), XAIE_PL_MOD, XAIE_EVENT_SWITCH_A, 8, XAIE_EVENT_BROADCAST_SOUTH | XAIE_EVENT_BROADCAST_WEST | XAIE_EVENT_BROADCAST_NORTH);
	driverStatus |= XAie_EventBroadcastBlockDir(&DevInst, XAie_TileLoc(11, 0), XAIE_PL_MOD, XAIE_EVENT_SWITCH_B, 8, XAIE_EVENT_BROADCAST_SOUTH | XAIE_EVENT_BROADCAST_WEST | XAIE_EVENT_BROADCAST_NORTH);
	driverStatus |= XAie_EventBroadcastBlockDir(&DevInst, XAie_TileLoc(11, 1), XAIE_MEM_MOD, XAIE_EVENT_SWITCH_A, 7, XAIE_EVENT_BROADCAST_SOUTH | XAIE_EVENT_BROADCAST_WEST | XAIE_EVENT_BROADCAST_EAST);
	driverStatus |= XAie_EventBroadcastBlockDir(&DevInst, XAie_TileLoc(11, 2), XAIE_MEM_MOD, XAIE_EVENT_SWITCH_A, 7, XAIE_EVENT_BROADCAST_SOUTH | XAIE_EVENT_BROADCAST_WEST | XAIE_EVENT_BROADCAST_EAST);
	driverStatus |= XAie_EventBroadcast(&DevInst, XAie_TileLoc(12, 0), XAIE_PL_MOD, 7, XAIE_EVENT_BROADCAST_A_8_PL);
	driverStatus |= XAie_EventBroadcastBlockDir(&DevInst, XAie_TileLoc(12, 0), XAIE_PL_MOD, XAIE_EVENT_SWITCH_A, 7, XAIE_EVENT_BROADCAST_SOUTH | XAIE_EVENT_BROADCAST_WEST | XAIE_EVENT_BROADCAST_EAST);
	driverStatus |= XAie_EventBroadcastBlockDir(&DevInst, XAie_TileLoc(12, 0), XAIE_PL_MOD, XAIE_EVENT_SWITCH_A, 8, XAIE_EVENT_BROADCAST_SOUTH | XAIE_EVENT_BROADCAST_WEST | XAIE_EVENT_BROADCAST_NORTH);
	driverStatus |= XAie_EventBroadcastBlockDir(&DevInst, XAie_TileLoc(12, 0), XAIE_PL_MOD, XAIE_EVENT_SWITCH_B, 8, XAIE_EVENT_BROADCAST_SOUTH | XAIE_EVENT_BROADCAST_WEST | XAIE_EVENT_BROADCAST_NORTH);
	driverStatus |= XAie_EventBroadcastBlockDir(&DevInst, XAie_TileLoc(12, 1), XAIE_MEM_MOD, XAIE_EVENT_SWITCH_A, 7, XAIE_EVENT_BROADCAST_SOUTH | XAIE_EVENT_BROADCAST_WEST | XAIE_EVENT_BROADCAST_EAST);
	driverStatus |= XAie_EventBroadcastBlockDir(&DevInst, XAie_TileLoc(12, 2), XAIE_MEM_MOD, XAIE_EVENT_SWITCH_A, 7, XAIE_EVENT_BROADCAST_SOUTH | XAIE_EVENT_BROADCAST_WEST | XAIE_EVENT_BROADCAST_EAST);
	driverStatus |= XAie_EventBroadcast(&DevInst, XAie_TileLoc(13, 0), XAIE_PL_MOD, 7, XAIE_EVENT_BROADCAST_A_8_PL);
	driverStatus |= XAie_EventBroadcastBlockDir(&DevInst, XAie_TileLoc(13, 0), XAIE_PL_MOD, XAIE_EVENT_SWITCH_A, 7, XAIE_EVENT_BROADCAST_SOUTH | XAIE_EVENT_BROADCAST_WEST | XAIE_EVENT_BROADCAST_EAST);
	driverStatus |= XAie_EventBroadcastBlockDir(&DevInst, XAie_TileLoc(13, 0), XAIE_PL_MOD, XAIE_EVENT_SWITCH_A, 8, XAIE_EVENT_BROADCAST_SOUTH | XAIE_EVENT_BROADCAST_WEST | XAIE_EVENT_BROADCAST_NORTH);
	driverStatus |= XAie_EventBroadcastBlockDir(&DevInst, XAie_TileLoc(13, 0), XAIE_PL_MOD, XAIE_EVENT_SWITCH_B, 8, XAIE_EVENT_BROADCAST_SOUTH | XAIE_EVENT_BROADCAST_WEST | XAIE_EVENT_BROADCAST_NORTH);
	driverStatus |= XAie_EventBroadcastBlockDir(&DevInst, XAie_TileLoc(13, 1), XAIE_MEM_MOD, XAIE_EVENT_SWITCH_A, 7, XAIE_EVENT_BROADCAST_SOUTH | XAIE_EVENT_BROADCAST_WEST | XAIE_EVENT_BROADCAST_EAST);
	driverStatus |= XAie_EventBroadcastBlockDir(&DevInst, XAie_TileLoc(13, 2), XAIE_MEM_MOD, XAIE_EVENT_SWITCH_A, 7, XAIE_EVENT_BROADCAST_SOUTH | XAIE_EVENT_BROADCAST_WEST | XAIE_EVENT_BROADCAST_EAST);
	driverStatus |= XAie_EventBroadcast(&DevInst, XAie_TileLoc(14, 0), XAIE_PL_MOD, 7, XAIE_EVENT_BROADCAST_A_8_PL);
	driverStatus |= XAie_EventBroadcastBlockDir(&DevInst, XAie_TileLoc(14, 0), XAIE_PL_MOD, XAIE_EVENT_SWITCH_A, 7, XAIE_EVENT_BROADCAST_SOUTH | XAIE_EVENT_BROADCAST_WEST | XAIE_EVENT_BROADCAST_EAST);
	driverStatus |= XAie_EventBroadcastBlockDir(&DevInst, XAie_TileLoc(14, 0), XAIE_PL_MOD, XAIE_EVENT_SWITCH_A, 8, XAIE_EVENT_BROADCAST_SOUTH | XAIE_EVENT_BROADCAST_WEST | XAIE_EVENT_BROADCAST_NORTH);
	driverStatus |= XAie_EventBroadcastBlockDir(&DevInst, XAie_TileLoc(14, 0), XAIE_PL_MOD, XAIE_EVENT_SWITCH_B, 8, XAIE_EVENT_BROADCAST_SOUTH | XAIE_EVENT_BROADCAST_WEST | XAIE_EVENT_BROADCAST_NORTH);
	driverStatus |= XAie_EventBroadcastBlockDir(&DevInst, XAie_TileLoc(14, 1), XAIE_MEM_MOD, XAIE_EVENT_SWITCH_A, 7, XAIE_EVENT_BROADCAST_SOUTH | XAIE_EVENT_BROADCAST_WEST | XAIE_EVENT_BROADCAST_EAST);
	driverStatus |= XAie_EventBroadcastBlockDir(&DevInst, XAie_TileLoc(14, 2), XAIE_MEM_MOD, XAIE_EVENT_SWITCH_A, 7, XAIE_EVENT_BROADCAST_SOUTH | XAIE_EVENT_BROADCAST_WEST | XAIE_EVENT_BROADCAST_EAST);
	driverStatus |= XAie_EventBroadcast(&DevInst, XAie_TileLoc(15, 0), XAIE_PL_MOD, 7, XAIE_EVENT_BROADCAST_A_8_PL);
	driverStatus |= XAie_EventBroadcastBlockDir(&DevInst, XAie_TileLoc(15, 0), XAIE_PL_MOD, XAIE_EVENT_SWITCH_A, 7, XAIE_EVENT_BROADCAST_SOUTH | XAIE_EVENT_BROADCAST_WEST | XAIE_EVENT_BROADCAST_EAST);
	driverStatus |= XAie_EventBroadcastBlockDir(&DevInst, XAie_TileLoc(15, 0), XAIE_PL_MOD, XAIE_EVENT_SWITCH_A, 8, XAIE_EVENT_BROADCAST_SOUTH | XAIE_EVENT_BROADCAST_WEST | XAIE_EVENT_BROADCAST_NORTH);
	driverStatus |= XAie_EventBroadcastBlockDir(&DevInst, XAie_TileLoc(15, 0), XAIE_PL_MOD, XAIE_EVENT_SWITCH_B, 8, XAIE_EVENT_BROADCAST_SOUTH | XAIE_EVENT_BROADCAST_WEST | XAIE_EVENT_BROADCAST_NORTH);
	driverStatus |= XAie_EventBroadcastBlockDir(&DevInst, XAie_TileLoc(15, 1), XAIE_MEM_MOD, XAIE_EVENT_SWITCH_A, 7, XAIE_EVENT_BROADCAST_SOUTH | XAIE_EVENT_BROADCAST_WEST | XAIE_EVENT_BROADCAST_EAST);
	driverStatus |= XAie_EventBroadcastBlockDir(&DevInst, XAie_TileLoc(15, 2), XAIE_MEM_MOD, XAIE_EVENT_SWITCH_A, 7, XAIE_EVENT_BROADCAST_SOUTH | XAIE_EVENT_BROADCAST_WEST | XAIE_EVENT_BROADCAST_EAST);
	driverStatus |= XAie_EventBroadcast(&DevInst, XAie_TileLoc(16, 0), XAIE_PL_MOD, 7, XAIE_EVENT_BROADCAST_A_8_PL);
	driverStatus |= XAie_EventBroadcastBlockDir(&DevInst, XAie_TileLoc(16, 0), XAIE_PL_MOD, XAIE_EVENT_SWITCH_A, 7, XAIE_EVENT_BROADCAST_SOUTH | XAIE_EVENT_BROADCAST_WEST | XAIE_EVENT_BROADCAST_EAST);
	driverStatus |= XAie_EventBroadcastBlockDir(&DevInst, XAie_TileLoc(16, 0), XAIE_PL_MOD, XAIE_EVENT_SWITCH_A, 8, XAIE_EVENT_BROADCAST_SOUTH | XAIE_EVENT_BROADCAST_WEST | XAIE_EVENT_BROADCAST_NORTH);
	driverStatus |= XAie_EventBroadcastBlockDir(&DevInst, XAie_TileLoc(16, 0), XAIE_PL_MOD, XAIE_EVENT_SWITCH_B, 8, XAIE_EVENT_BROADCAST_SOUTH | XAIE_EVENT_BROADCAST_WEST | XAIE_EVENT_BROADCAST_NORTH);
	driverStatus |= XAie_EventBroadcastBlockDir(&DevInst, XAie_TileLoc(16, 1), XAIE_MEM_MOD, XAIE_EVENT_SWITCH_A, 7, XAIE_EVENT_BROADCAST_SOUTH | XAIE_EVENT_BROADCAST_WEST | XAIE_EVENT_BROADCAST_EAST);
	driverStatus |= XAie_EventBroadcastBlockDir(&DevInst, XAie_TileLoc(16, 2), XAIE_MEM_MOD, XAIE_EVENT_SWITCH_A, 7, XAIE_EVENT_BROADCAST_SOUTH | XAIE_EVENT_BROADCAST_WEST | XAIE_EVENT_BROADCAST_EAST);
	driverStatus |= XAie_EventBroadcast(&DevInst, XAie_TileLoc(17, 0), XAIE_PL_MOD, 7, XAIE_EVENT_BROADCAST_A_8_PL);
	driverStatus |= XAie_EventBroadcastBlockDir(&DevInst, XAie_TileLoc(17, 0), XAIE_PL_MOD, XAIE_EVENT_SWITCH_A, 7, XAIE_EVENT_BROADCAST_SOUTH | XAIE_EVENT_BROADCAST_WEST | XAIE_EVENT_BROADCAST_EAST);
	driverStatus |= XAie_EventBroadcastBlockDir(&DevInst, XAie_TileLoc(17, 0), XAIE_PL_MOD, XAIE_EVENT_SWITCH_A, 8, XAIE_EVENT_BROADCAST_SOUTH | XAIE_EVENT_BROADCAST_WEST | XAIE_EVENT_BROADCAST_NORTH);
	driverStatus |= XAie_EventBroadcastBlockDir(&DevInst, XAie_TileLoc(17, 0), XAIE_PL_MOD, XAIE_EVENT_SWITCH_B, 8, XAIE_EVENT_BROADCAST_SOUTH | XAIE_EVENT_BROADCAST_WEST | XAIE_EVENT_BROADCAST_NORTH);
	driverStatus |= XAie_EventBroadcastBlockDir(&DevInst, XAie_TileLoc(17, 1), XAIE_MEM_MOD, XAIE_EVENT_SWITCH_A, 7, XAIE_EVENT_BROADCAST_SOUTH | XAIE_EVENT_BROADCAST_WEST | XAIE_EVENT_BROADCAST_EAST);
	driverStatus |= XAie_EventBroadcastBlockDir(&DevInst, XAie_TileLoc(17, 2), XAIE_MEM_MOD, XAIE_EVENT_SWITCH_A, 7, XAIE_EVENT_BROADCAST_SOUTH | XAIE_EVENT_BROADCAST_WEST | XAIE_EVENT_BROADCAST_EAST);
	driverStatus |= XAie_EventBroadcast(&DevInst, XAie_TileLoc(18, 0), XAIE_PL_MOD, 7, XAIE_EVENT_BROADCAST_A_8_PL);
	driverStatus |= XAie_EventBroadcastBlockDir(&DevInst, XAie_TileLoc(18, 0), XAIE_PL_MOD, XAIE_EVENT_SWITCH_A, 7, XAIE_EVENT_BROADCAST_SOUTH | XAIE_EVENT_BROADCAST_WEST | XAIE_EVENT_BROADCAST_EAST);
	driverStatus |= XAie_EventBroadcastBlockDir(&DevInst, XAie_TileLoc(18, 0), XAIE_PL_MOD, XAIE_EVENT_SWITCH_A, 8, XAIE_EVENT_BROADCAST_SOUTH | XAIE_EVENT_BROADCAST_WEST | XAIE_EVENT_BROADCAST_NORTH);
	driverStatus |= XAie_EventBroadcastBlockDir(&DevInst, XAie_TileLoc(18, 0), XAIE_PL_MOD, XAIE_EVENT_SWITCH_B, 8, XAIE_EVENT_BROADCAST_SOUTH | XAIE_EVENT_BROADCAST_WEST | XAIE_EVENT_BROADCAST_NORTH);
	driverStatus |= XAie_EventBroadcastBlockDir(&DevInst, XAie_TileLoc(18, 1), XAIE_MEM_MOD, XAIE_EVENT_SWITCH_A, 7, XAIE_EVENT_BROADCAST_SOUTH | XAIE_EVENT_BROADCAST_WEST | XAIE_EVENT_BROADCAST_EAST);
	driverStatus |= XAie_EventBroadcastBlockDir(&DevInst, XAie_TileLoc(18, 2), XAIE_MEM_MOD, XAIE_EVENT_SWITCH_A, 7, XAIE_EVENT_BROADCAST_SOUTH | XAIE_EVENT_BROADCAST_WEST | XAIE_EVENT_BROADCAST_EAST);
	driverStatus |= XAie_EventBroadcast(&DevInst, XAie_TileLoc(19, 0), XAIE_PL_MOD, 7, XAIE_EVENT_BROADCAST_A_8_PL);
	driverStatus |= XAie_EventBroadcastBlockDir(&DevInst, XAie_TileLoc(19, 0), XAIE_PL_MOD, XAIE_EVENT_SWITCH_A, 7, XAIE_EVENT_BROADCAST_SOUTH | XAIE_EVENT_BROADCAST_WEST | XAIE_EVENT_BROADCAST_EAST);
	driverStatus |= XAie_EventBroadcastBlockDir(&DevInst, XAie_TileLoc(19, 0), XAIE_PL_MOD, XAIE_EVENT_SWITCH_A, 8, XAIE_EVENT_BROADCAST_SOUTH | XAIE_EVENT_BROADCAST_WEST | XAIE_EVENT_BROADCAST_NORTH);
	driverStatus |= XAie_EventBroadcastBlockDir(&DevInst, XAie_TileLoc(19, 0), XAIE_PL_MOD, XAIE_EVENT_SWITCH_B, 8, XAIE_EVENT_BROADCAST_SOUTH | XAIE_EVENT_BROADCAST_WEST | XAIE_EVENT_BROADCAST_NORTH);
	driverStatus |= XAie_EventBroadcastBlockDir(&DevInst, XAie_TileLoc(19, 1), XAIE_MEM_MOD, XAIE_EVENT_SWITCH_A, 7, XAIE_EVENT_BROADCAST_SOUTH | XAIE_EVENT_BROADCAST_WEST | XAIE_EVENT_BROADCAST_EAST);
	driverStatus |= XAie_EventBroadcastBlockDir(&DevInst, XAie_TileLoc(19, 2), XAIE_MEM_MOD, XAIE_EVENT_SWITCH_A, 7, XAIE_EVENT_BROADCAST_SOUTH | XAIE_EVENT_BROADCAST_WEST | XAIE_EVENT_BROADCAST_EAST);
	driverStatus |= XAie_EventBroadcast(&DevInst, XAie_TileLoc(20, 0), XAIE_PL_MOD, 7, XAIE_EVENT_BROADCAST_A_8_PL);
	driverStatus |= XAie_EventBroadcastBlockDir(&DevInst, XAie_TileLoc(20, 0), XAIE_PL_MOD, XAIE_EVENT_SWITCH_A, 7, XAIE_EVENT_BROADCAST_SOUTH | XAIE_EVENT_BROADCAST_WEST | XAIE_EVENT_BROADCAST_EAST);
	driverStatus |= XAie_EventBroadcastBlockDir(&DevInst, XAie_TileLoc(20, 0), XAIE_PL_MOD, XAIE_EVENT_SWITCH_A, 8, XAIE_EVENT_BROADCAST_SOUTH | XAIE_EVENT_BROADCAST_WEST | XAIE_EVENT_BROADCAST_NORTH);
	driverStatus |= XAie_EventBroadcastBlockDir(&DevInst, XAie_TileLoc(20, 0), XAIE_PL_MOD, XAIE_EVENT_SWITCH_B, 8, XAIE_EVENT_BROADCAST_SOUTH | XAIE_EVENT_BROADCAST_WEST | XAIE_EVENT_BROADCAST_NORTH);
	driverStatus |= XAie_EventBroadcastBlockDir(&DevInst, XAie_TileLoc(20, 1), XAIE_MEM_MOD, XAIE_EVENT_SWITCH_A, 7, XAIE_EVENT_BROADCAST_SOUTH | XAIE_EVENT_BROADCAST_WEST | XAIE_EVENT_BROADCAST_EAST);
	driverStatus |= XAie_EventBroadcastBlockDir(&DevInst, XAie_TileLoc(20, 2), XAIE_MEM_MOD, XAIE_EVENT_SWITCH_A, 7, XAIE_EVENT_BROADCAST_SOUTH | XAIE_EVENT_BROADCAST_WEST | XAIE_EVENT_BROADCAST_EAST);
	driverStatus |= XAie_EventBroadcast(&DevInst, XAie_TileLoc(21, 0), XAIE_PL_MOD, 7, XAIE_EVENT_BROADCAST_A_8_PL);
	driverStatus |= XAie_EventBroadcastBlockDir(&DevInst, XAie_TileLoc(21, 0), XAIE_PL_MOD, XAIE_EVENT_SWITCH_A, 7, XAIE_EVENT_BROADCAST_SOUTH | XAIE_EVENT_BROADCAST_WEST | XAIE_EVENT_BROADCAST_EAST);
	driverStatus |= XAie_EventBroadcastBlockDir(&DevInst, XAie_TileLoc(21, 0), XAIE_PL_MOD, XAIE_EVENT_SWITCH_A, 8, XAIE_EVENT_BROADCAST_SOUTH | XAIE_EVENT_BROADCAST_WEST | XAIE_EVENT_BROADCAST_NORTH);
	driverStatus |= XAie_EventBroadcastBlockDir(&DevInst, XAie_TileLoc(21, 0), XAIE_PL_MOD, XAIE_EVENT_SWITCH_B, 8, XAIE_EVENT_BROADCAST_SOUTH | XAIE_EVENT_BROADCAST_WEST | XAIE_EVENT_BROADCAST_NORTH);
	driverStatus |= XAie_EventBroadcastBlockDir(&DevInst, XAie_TileLoc(21, 1), XAIE_MEM_MOD, XAIE_EVENT_SWITCH_A, 7, XAIE_EVENT_BROADCAST_SOUTH | XAIE_EVENT_BROADCAST_WEST | XAIE_EVENT_BROADCAST_EAST);
	driverStatus |= XAie_EventBroadcastBlockDir(&DevInst, XAie_TileLoc(21, 2), XAIE_MEM_MOD, XAIE_EVENT_SWITCH_A, 7, XAIE_EVENT_BROADCAST_SOUTH | XAIE_EVENT_BROADCAST_WEST | XAIE_EVENT_BROADCAST_EAST);
	driverStatus |= XAie_EventBroadcast(&DevInst, XAie_TileLoc(22, 0), XAIE_PL_MOD, 7, XAIE_EVENT_BROADCAST_A_8_PL);
	driverStatus |= XAie_EventBroadcastBlockDir(&DevInst, XAie_TileLoc(22, 0), XAIE_PL_MOD, XAIE_EVENT_SWITCH_A, 7, XAIE_EVENT_BROADCAST_SOUTH | XAIE_EVENT_BROADCAST_WEST | XAIE_EVENT_BROADCAST_EAST);
	driverStatus |= XAie_EventBroadcastBlockDir(&DevInst, XAie_TileLoc(22, 0), XAIE_PL_MOD, XAIE_EVENT_SWITCH_A, 8, XAIE_EVENT_BROADCAST_SOUTH | XAIE_EVENT_BROADCAST_WEST | XAIE_EVENT_BROADCAST_NORTH);
	driverStatus |= XAie_EventBroadcastBlockDir(&DevInst, XAie_TileLoc(22, 0), XAIE_PL_MOD, XAIE_EVENT_SWITCH_B, 8, XAIE_EVENT_BROADCAST_SOUTH | XAIE_EVENT_BROADCAST_WEST | XAIE_EVENT_BROADCAST_NORTH);
	driverStatus |= XAie_EventBroadcastBlockDir(&DevInst, XAie_TileLoc(22, 1), XAIE_MEM_MOD, XAIE_EVENT_SWITCH_A, 7, XAIE_EVENT_BROADCAST_SOUTH | XAIE_EVENT_BROADCAST_WEST | XAIE_EVENT_BROADCAST_EAST);
	driverStatus |= XAie_EventBroadcastBlockDir(&DevInst, XAie_TileLoc(22, 2), XAIE_MEM_MOD, XAIE_EVENT_SWITCH_A, 7, XAIE_EVENT_BROADCAST_SOUTH | XAIE_EVENT_BROADCAST_WEST | XAIE_EVENT_BROADCAST_EAST);
	driverStatus |= XAie_EventBroadcast(&DevInst, XAie_TileLoc(23, 0), XAIE_PL_MOD, 7, XAIE_EVENT_BROADCAST_A_8_PL);
	driverStatus |= XAie_EventBroadcastBlockDir(&DevInst, XAie_TileLoc(23, 0), XAIE_PL_MOD, XAIE_EVENT_SWITCH_A, 7, XAIE_EVENT_BROADCAST_SOUTH | XAIE_EVENT_BROADCAST_WEST | XAIE_EVENT_BROADCAST_EAST);
	driverStatus |= XAie_EventBroadcastBlockDir(&DevInst, XAie_TileLoc(23, 0), XAIE_PL_MOD, XAIE_EVENT_SWITCH_A, 8, XAIE_EVENT_BROADCAST_SOUTH | XAIE_EVENT_BROADCAST_WEST | XAIE_EVENT_BROADCAST_NORTH);
	driverStatus |= XAie_EventBroadcastBlockDir(&DevInst, XAie_TileLoc(23, 0), XAIE_PL_MOD, XAIE_EVENT_SWITCH_B, 8, XAIE_EVENT_BROADCAST_SOUTH | XAIE_EVENT_BROADCAST_WEST | XAIE_EVENT_BROADCAST_NORTH);
	driverStatus |= XAie_EventBroadcastBlockDir(&DevInst, XAie_TileLoc(23, 1), XAIE_MEM_MOD, XAIE_EVENT_SWITCH_A, 7, XAIE_EVENT_BROADCAST_SOUTH | XAIE_EVENT_BROADCAST_WEST | XAIE_EVENT_BROADCAST_EAST);
	driverStatus |= XAie_EventBroadcastBlockDir(&DevInst, XAie_TileLoc(23, 2), XAIE_MEM_MOD, XAIE_EVENT_SWITCH_A, 7, XAIE_EVENT_BROADCAST_SOUTH | XAIE_EVENT_BROADCAST_WEST | XAIE_EVENT_BROADCAST_EAST);
	driverStatus |= XAie_EventBroadcast(&DevInst, XAie_TileLoc(24, 0), XAIE_PL_MOD, 7, XAIE_EVENT_BROADCAST_A_8_PL);
	driverStatus |= XAie_EventBroadcastBlockDir(&DevInst, XAie_TileLoc(24, 0), XAIE_PL_MOD, XAIE_EVENT_SWITCH_A, 7, XAIE_EVENT_BROADCAST_SOUTH | XAIE_EVENT_BROADCAST_WEST | XAIE_EVENT_BROADCAST_EAST);
	driverStatus |= XAie_EventBroadcastBlockDir(&DevInst, XAie_TileLoc(24, 0), XAIE_PL_MOD, XAIE_EVENT_SWITCH_A, 8, XAIE_EVENT_BROADCAST_SOUTH | XAIE_EVENT_BROADCAST_WEST | XAIE_EVENT_BROADCAST_NORTH);
	driverStatus |= XAie_EventBroadcastBlockDir(&DevInst, XAie_TileLoc(24, 0), XAIE_PL_MOD, XAIE_EVENT_SWITCH_B, 8, XAIE_EVENT_BROADCAST_SOUTH | XAIE_EVENT_BROADCAST_WEST | XAIE_EVENT_BROADCAST_NORTH);
	driverStatus |= XAie_EventBroadcastBlockDir(&DevInst, XAie_TileLoc(24, 1), XAIE_MEM_MOD, XAIE_EVENT_SWITCH_A, 7, XAIE_EVENT_BROADCAST_SOUTH | XAIE_EVENT_BROADCAST_WEST | XAIE_EVENT_BROADCAST_EAST);
	driverStatus |= XAie_EventBroadcastBlockDir(&DevInst, XAie_TileLoc(24, 2), XAIE_MEM_MOD, XAIE_EVENT_SWITCH_A, 7, XAIE_EVENT_BROADCAST_SOUTH | XAIE_EVENT_BROADCAST_WEST | XAIE_EVENT_BROADCAST_EAST);
	driverStatus |= XAie_EventBroadcast(&DevInst, XAie_TileLoc(25, 0), XAIE_PL_MOD, 7, XAIE_EVENT_BROADCAST_A_8_PL);
	driverStatus |= XAie_EventBroadcastBlockDir(&DevInst, XAie_TileLoc(25, 0), XAIE_PL_MOD, XAIE_EVENT_SWITCH_A, 7, XAIE_EVENT_BROADCAST_SOUTH | XAIE_EVENT_BROADCAST_WEST | XAIE_EVENT_BROADCAST_EAST);
	driverStatus |= XAie_EventBroadcastBlockDir(&DevInst, XAie_TileLoc(25, 0), XAIE_PL_MOD, XAIE_EVENT_SWITCH_A, 8, XAIE_EVENT_BROADCAST_SOUTH | XAIE_EVENT_BROADCAST_WEST | XAIE_EVENT_BROADCAST_NORTH);
	driverStatus |= XAie_EventBroadcastBlockDir(&DevInst, XAie_TileLoc(25, 0), XAIE_PL_MOD, XAIE_EVENT_SWITCH_B, 8, XAIE_EVENT_BROADCAST_SOUTH | XAIE_EVENT_BROADCAST_WEST | XAIE_EVENT_BROADCAST_NORTH);
	driverStatus |= XAie_EventBroadcastBlockDir(&DevInst, XAie_TileLoc(25, 1), XAIE_MEM_MOD, XAIE_EVENT_SWITCH_A, 7, XAIE_EVENT_BROADCAST_SOUTH | XAIE_EVENT_BROADCAST_WEST | XAIE_EVENT_BROADCAST_EAST);
	driverStatus |= XAie_EventBroadcastBlockDir(&DevInst, XAie_TileLoc(25, 2), XAIE_MEM_MOD, XAIE_EVENT_SWITCH_A, 7, XAIE_EVENT_BROADCAST_SOUTH | XAIE_EVENT_BROADCAST_WEST | XAIE_EVENT_BROADCAST_EAST);
	driverStatus |= XAie_EventBroadcast(&DevInst, XAie_TileLoc(26, 0), XAIE_PL_MOD, 7, XAIE_EVENT_BROADCAST_A_8_PL);
	driverStatus |= XAie_EventBroadcastBlockDir(&DevInst, XAie_TileLoc(26, 0), XAIE_PL_MOD, XAIE_EVENT_SWITCH_A, 7, XAIE_EVENT_BROADCAST_SOUTH | XAIE_EVENT_BROADCAST_WEST | XAIE_EVENT_BROADCAST_EAST);
	driverStatus |= XAie_EventBroadcastBlockDir(&DevInst, XAie_TileLoc(26, 0), XAIE_PL_MOD, XAIE_EVENT_SWITCH_A, 8, XAIE_EVENT_BROADCAST_SOUTH | XAIE_EVENT_BROADCAST_WEST | XAIE_EVENT_BROADCAST_NORTH);
	driverStatus |= XAie_EventBroadcastBlockDir(&DevInst, XAie_TileLoc(26, 0), XAIE_PL_MOD, XAIE_EVENT_SWITCH_B, 8, XAIE_EVENT_BROADCAST_SOUTH | XAIE_EVENT_BROADCAST_WEST | XAIE_EVENT_BROADCAST_NORTH);
	driverStatus |= XAie_EventBroadcastBlockDir(&DevInst, XAie_TileLoc(26, 1), XAIE_MEM_MOD, XAIE_EVENT_SWITCH_A, 7, XAIE_EVENT_BROADCAST_SOUTH | XAIE_EVENT_BROADCAST_WEST | XAIE_EVENT_BROADCAST_EAST);
	driverStatus |= XAie_EventBroadcastBlockDir(&DevInst, XAie_TileLoc(26, 2), XAIE_MEM_MOD, XAIE_EVENT_SWITCH_A, 7, XAIE_EVENT_BROADCAST_SOUTH | XAIE_EVENT_BROADCAST_WEST | XAIE_EVENT_BROADCAST_EAST);
	driverStatus |= XAie_EventBroadcast(&DevInst, XAie_TileLoc(27, 0), XAIE_PL_MOD, 7, XAIE_EVENT_BROADCAST_A_8_PL);
	driverStatus |= XAie_EventBroadcastBlockDir(&DevInst, XAie_TileLoc(27, 0), XAIE_PL_MOD, XAIE_EVENT_SWITCH_A, 7, XAIE_EVENT_BROADCAST_SOUTH | XAIE_EVENT_BROADCAST_WEST | XAIE_EVENT_BROADCAST_EAST);
	driverStatus |= XAie_EventBroadcastBlockDir(&DevInst, XAie_TileLoc(27, 0), XAIE_PL_MOD, XAIE_EVENT_SWITCH_A, 8, XAIE_EVENT_BROADCAST_SOUTH | XAIE_EVENT_BROADCAST_WEST | XAIE_EVENT_BROADCAST_NORTH);
	driverStatus |= XAie_EventBroadcastBlockDir(&DevInst, XAie_TileLoc(27, 0), XAIE_PL_MOD, XAIE_EVENT_SWITCH_B, 8, XAIE_EVENT_BROADCAST_SOUTH | XAIE_EVENT_BROADCAST_WEST | XAIE_EVENT_BROADCAST_NORTH);
	driverStatus |= XAie_EventBroadcastBlockDir(&DevInst, XAie_TileLoc(27, 1), XAIE_MEM_MOD, XAIE_EVENT_SWITCH_A, 7, XAIE_EVENT_BROADCAST_SOUTH | XAIE_EVENT_BROADCAST_WEST | XAIE_EVENT_BROADCAST_EAST);
	driverStatus |= XAie_EventBroadcastBlockDir(&DevInst, XAie_TileLoc(27, 2), XAIE_MEM_MOD, XAIE_EVENT_SWITCH_A, 7, XAIE_EVENT_BROADCAST_SOUTH | XAIE_EVENT_BROADCAST_WEST | XAIE_EVENT_BROADCAST_EAST);
	driverStatus |= XAie_EventBroadcast(&DevInst, XAie_TileLoc(28, 0), XAIE_PL_MOD, 7, XAIE_EVENT_BROADCAST_A_8_PL);
	driverStatus |= XAie_EventBroadcastBlockDir(&DevInst, XAie_TileLoc(28, 0), XAIE_PL_MOD, XAIE_EVENT_SWITCH_A, 7, XAIE_EVENT_BROADCAST_SOUTH | XAIE_EVENT_BROADCAST_WEST | XAIE_EVENT_BROADCAST_EAST);
	driverStatus |= XAie_EventBroadcastBlockDir(&DevInst, XAie_TileLoc(28, 0), XAIE_PL_MOD, XAIE_EVENT_SWITCH_A, 8, XAIE_EVENT_BROADCAST_SOUTH | XAIE_EVENT_BROADCAST_WEST | XAIE_EVENT_BROADCAST_NORTH);
	driverStatus |= XAie_EventBroadcastBlockDir(&DevInst, XAie_TileLoc(28, 0), XAIE_PL_MOD, XAIE_EVENT_SWITCH_B, 8, XAIE_EVENT_BROADCAST_SOUTH | XAIE_EVENT_BROADCAST_WEST | XAIE_EVENT_BROADCAST_NORTH);
	driverStatus |= XAie_EventBroadcastBlockDir(&DevInst, XAie_TileLoc(28, 1), XAIE_MEM_MOD, XAIE_EVENT_SWITCH_A, 7, XAIE_EVENT_BROADCAST_SOUTH | XAIE_EVENT_BROADCAST_WEST | XAIE_EVENT_BROADCAST_EAST);
	driverStatus |= XAie_EventBroadcastBlockDir(&DevInst, XAie_TileLoc(28, 2), XAIE_MEM_MOD, XAIE_EVENT_SWITCH_A, 7, XAIE_EVENT_BROADCAST_SOUTH | XAIE_EVENT_BROADCAST_WEST | XAIE_EVENT_BROADCAST_EAST);
	driverStatus |= XAie_EventBroadcast(&DevInst, XAie_TileLoc(29, 0), XAIE_PL_MOD, 7, XAIE_EVENT_BROADCAST_A_8_PL);
	driverStatus |= XAie_EventBroadcastBlockDir(&DevInst, XAie_TileLoc(29, 0), XAIE_PL_MOD, XAIE_EVENT_SWITCH_A, 7, XAIE_EVENT_BROADCAST_SOUTH | XAIE_EVENT_BROADCAST_WEST | XAIE_EVENT_BROADCAST_EAST);
	driverStatus |= XAie_EventBroadcastBlockDir(&DevInst, XAie_TileLoc(29, 0), XAIE_PL_MOD, XAIE_EVENT_SWITCH_A, 8, XAIE_EVENT_BROADCAST_SOUTH | XAIE_EVENT_BROADCAST_WEST | XAIE_EVENT_BROADCAST_NORTH);
	driverStatus |= XAie_EventBroadcastBlockDir(&DevInst, XAie_TileLoc(29, 0), XAIE_PL_MOD, XAIE_EVENT_SWITCH_B, 8, XAIE_EVENT_BROADCAST_SOUTH | XAIE_EVENT_BROADCAST_WEST | XAIE_EVENT_BROADCAST_NORTH);
	driverStatus |= XAie_EventBroadcastBlockDir(&DevInst, XAie_TileLoc(29, 1), XAIE_MEM_MOD, XAIE_EVENT_SWITCH_A, 7, XAIE_EVENT_BROADCAST_SOUTH | XAIE_EVENT_BROADCAST_WEST | XAIE_EVENT_BROADCAST_EAST);
	driverStatus |= XAie_EventBroadcastBlockDir(&DevInst, XAie_TileLoc(29, 2), XAIE_MEM_MOD, XAIE_EVENT_SWITCH_A, 7, XAIE_EVENT_BROADCAST_SOUTH | XAIE_EVENT_BROADCAST_WEST | XAIE_EVENT_BROADCAST_EAST);
	driverStatus |= XAie_EventBroadcast(&DevInst, XAie_TileLoc(30, 0), XAIE_PL_MOD, 7, XAIE_EVENT_BROADCAST_A_8_PL);
	driverStatus |= XAie_EventBroadcastBlockDir(&DevInst, XAie_TileLoc(30, 0), XAIE_PL_MOD, XAIE_EVENT_SWITCH_A, 7, XAIE_EVENT_BROADCAST_SOUTH | XAIE_EVENT_BROADCAST_WEST | XAIE_EVENT_BROADCAST_EAST);
	driverStatus |= XAie_EventBroadcastBlockDir(&DevInst, XAie_TileLoc(30, 0), XAIE_PL_MOD, XAIE_EVENT_SWITCH_A, 8, XAIE_EVENT_BROADCAST_SOUTH | XAIE_EVENT_BROADCAST_WEST | XAIE_EVENT_BROADCAST_NORTH);
	driverStatus |= XAie_EventBroadcastBlockDir(&DevInst, XAie_TileLoc(30, 0), XAIE_PL_MOD, XAIE_EVENT_SWITCH_B, 8, XAIE_EVENT_BROADCAST_SOUTH | XAIE_EVENT_BROADCAST_WEST | XAIE_EVENT_BROADCAST_NORTH);
	driverStatus |= XAie_EventBroadcastBlockDir(&DevInst, XAie_TileLoc(30, 1), XAIE_MEM_MOD, XAIE_EVENT_SWITCH_A, 7, XAIE_EVENT_BROADCAST_SOUTH | XAIE_EVENT_BROADCAST_WEST | XAIE_EVENT_BROADCAST_EAST);
	driverStatus |= XAie_EventBroadcastBlockDir(&DevInst, XAie_TileLoc(30, 2), XAIE_MEM_MOD, XAIE_EVENT_SWITCH_A, 7, XAIE_EVENT_BROADCAST_SOUTH | XAIE_EVENT_BROADCAST_WEST | XAIE_EVENT_BROADCAST_EAST);
	driverStatus |= XAie_EventBroadcast(&DevInst, XAie_TileLoc(31, 0), XAIE_PL_MOD, 7, XAIE_EVENT_BROADCAST_A_8_PL);
	driverStatus |= XAie_EventBroadcastBlockDir(&DevInst, XAie_TileLoc(31, 0), XAIE_PL_MOD, XAIE_EVENT_SWITCH_A, 7, XAIE_EVENT_BROADCAST_SOUTH | XAIE_EVENT_BROADCAST_WEST | XAIE_EVENT_BROADCAST_EAST);
	driverStatus |= XAie_EventBroadcastBlockDir(&DevInst, XAie_TileLoc(31, 0), XAIE_PL_MOD, XAIE_EVENT_SWITCH_A, 8, XAIE_EVENT_BROADCAST_SOUTH | XAIE_EVENT_BROADCAST_WEST | XAIE_EVENT_BROADCAST_NORTH);
	driverStatus |= XAie_EventBroadcastBlockDir(&DevInst, XAie_TileLoc(31, 0), XAIE_PL_MOD, XAIE_EVENT_SWITCH_B, 8, XAIE_EVENT_BROADCAST_SOUTH | XAIE_EVENT_BROADCAST_WEST | XAIE_EVENT_BROADCAST_NORTH);
	driverStatus |= XAie_EventBroadcastBlockDir(&DevInst, XAie_TileLoc(31, 1), XAIE_MEM_MOD, XAIE_EVENT_SWITCH_A, 7, XAIE_EVENT_BROADCAST_SOUTH | XAIE_EVENT_BROADCAST_WEST | XAIE_EVENT_BROADCAST_EAST);
	driverStatus |= XAie_EventBroadcastBlockDir(&DevInst, XAie_TileLoc(31, 2), XAIE_MEM_MOD, XAIE_EVENT_SWITCH_A, 7, XAIE_EVENT_BROADCAST_SOUTH | XAIE_EVENT_BROADCAST_WEST | XAIE_EVENT_BROADCAST_EAST);
	driverStatus |= XAie_EventBroadcast(&DevInst, XAie_TileLoc(32, 0), XAIE_PL_MOD, 7, XAIE_EVENT_BROADCAST_A_8_PL);
	driverStatus |= XAie_EventBroadcastBlockDir(&DevInst, XAie_TileLoc(32, 0), XAIE_PL_MOD, XAIE_EVENT_SWITCH_A, 7, XAIE_EVENT_BROADCAST_SOUTH | XAIE_EVENT_BROADCAST_WEST | XAIE_EVENT_BROADCAST_EAST);
	driverStatus |= XAie_EventBroadcastBlockDir(&DevInst, XAie_TileLoc(32, 0), XAIE_PL_MOD, XAIE_EVENT_SWITCH_A, 8, XAIE_EVENT_BROADCAST_SOUTH | XAIE_EVENT_BROADCAST_WEST | XAIE_EVENT_BROADCAST_NORTH);
	driverStatus |= XAie_EventBroadcastBlockDir(&DevInst, XAie_TileLoc(32, 0), XAIE_PL_MOD, XAIE_EVENT_SWITCH_B, 8, XAIE_EVENT_BROADCAST_SOUTH | XAIE_EVENT_BROADCAST_WEST | XAIE_EVENT_BROADCAST_NORTH);
	driverStatus |= XAie_EventBroadcastBlockDir(&DevInst, XAie_TileLoc(32, 1), XAIE_MEM_MOD, XAIE_EVENT_SWITCH_A, 7, XAIE_EVENT_BROADCAST_SOUTH | XAIE_EVENT_BROADCAST_WEST | XAIE_EVENT_BROADCAST_EAST);
	driverStatus |= XAie_EventBroadcastBlockDir(&DevInst, XAie_TileLoc(32, 2), XAIE_MEM_MOD, XAIE_EVENT_SWITCH_A, 7, XAIE_EVENT_BROADCAST_SOUTH | XAIE_EVENT_BROADCAST_WEST | XAIE_EVENT_BROADCAST_EAST);
	driverStatus |= XAie_EventBroadcast(&DevInst, XAie_TileLoc(33, 0), XAIE_PL_MOD, 7, XAIE_EVENT_BROADCAST_A_8_PL);
	driverStatus |= XAie_EventBroadcastBlockDir(&DevInst, XAie_TileLoc(33, 0), XAIE_PL_MOD, XAIE_EVENT_SWITCH_A, 7, XAIE_EVENT_BROADCAST_SOUTH | XAIE_EVENT_BROADCAST_WEST | XAIE_EVENT_BROADCAST_EAST);
	driverStatus |= XAie_EventBroadcastBlockDir(&DevInst, XAie_TileLoc(33, 0), XAIE_PL_MOD, XAIE_EVENT_SWITCH_A, 8, XAIE_EVENT_BROADCAST_SOUTH | XAIE_EVENT_BROADCAST_WEST | XAIE_EVENT_BROADCAST_NORTH);
	driverStatus |= XAie_EventBroadcastBlockDir(&DevInst, XAie_TileLoc(33, 0), XAIE_PL_MOD, XAIE_EVENT_SWITCH_B, 8, XAIE_EVENT_BROADCAST_SOUTH | XAIE_EVENT_BROADCAST_WEST | XAIE_EVENT_BROADCAST_NORTH);
	driverStatus |= XAie_EventBroadcastBlockDir(&DevInst, XAie_TileLoc(33, 1), XAIE_MEM_MOD, XAIE_EVENT_SWITCH_A, 7, XAIE_EVENT_BROADCAST_SOUTH | XAIE_EVENT_BROADCAST_WEST | XAIE_EVENT_BROADCAST_EAST);
	driverStatus |= XAie_EventBroadcastBlockDir(&DevInst, XAie_TileLoc(33, 2), XAIE_MEM_MOD, XAIE_EVENT_SWITCH_A, 7, XAIE_EVENT_BROADCAST_SOUTH | XAIE_EVENT_BROADCAST_WEST | XAIE_EVENT_BROADCAST_EAST);
	driverStatus |= XAie_EventBroadcast(&DevInst, XAie_TileLoc(34, 0), XAIE_PL_MOD, 7, XAIE_EVENT_BROADCAST_A_8_PL);
	driverStatus |= XAie_EventBroadcastBlockDir(&DevInst, XAie_TileLoc(34, 0), XAIE_PL_MOD, XAIE_EVENT_SWITCH_A, 7, XAIE_EVENT_BROADCAST_SOUTH | XAIE_EVENT_BROADCAST_WEST | XAIE_EVENT_BROADCAST_EAST);
	driverStatus |= XAie_EventBroadcastBlockDir(&DevInst, XAie_TileLoc(34, 0), XAIE_PL_MOD, XAIE_EVENT_SWITCH_A, 8, XAIE_EVENT_BROADCAST_SOUTH | XAIE_EVENT_BROADCAST_WEST | XAIE_EVENT_BROADCAST_NORTH);
	driverStatus |= XAie_EventBroadcastBlockDir(&DevInst, XAie_TileLoc(34, 0), XAIE_PL_MOD, XAIE_EVENT_SWITCH_B, 8, XAIE_EVENT_BROADCAST_SOUTH | XAIE_EVENT_BROADCAST_WEST | XAIE_EVENT_BROADCAST_NORTH);
	driverStatus |= XAie_EventBroadcastBlockDir(&DevInst, XAie_TileLoc(34, 1), XAIE_MEM_MOD, XAIE_EVENT_SWITCH_A, 7, XAIE_EVENT_BROADCAST_SOUTH | XAIE_EVENT_BROADCAST_WEST | XAIE_EVENT_BROADCAST_EAST);
	driverStatus |= XAie_EventBroadcastBlockDir(&DevInst, XAie_TileLoc(34, 2), XAIE_MEM_MOD, XAIE_EVENT_SWITCH_A, 7, XAIE_EVENT_BROADCAST_SOUTH | XAIE_EVENT_BROADCAST_WEST | XAIE_EVENT_BROADCAST_EAST);
	driverStatus |= XAie_EventBroadcast(&DevInst, XAie_TileLoc(35, 0), XAIE_PL_MOD, 7, XAIE_EVENT_BROADCAST_A_8_PL);
	driverStatus |= XAie_EventBroadcastBlockDir(&DevInst, XAie_TileLoc(35, 0), XAIE_PL_MOD, XAIE_EVENT_SWITCH_A, 7, XAIE_EVENT_BROADCAST_SOUTH | XAIE_EVENT_BROADCAST_WEST | XAIE_EVENT_BROADCAST_EAST);
	driverStatus |= XAie_EventBroadcastBlockDir(&DevInst, XAie_TileLoc(35, 0), XAIE_PL_MOD, XAIE_EVENT_SWITCH_A, 8, XAIE_EVENT_BROADCAST_SOUTH | XAIE_EVENT_BROADCAST_WEST | XAIE_EVENT_BROADCAST_NORTH);
	driverStatus |= XAie_EventBroadcastBlockDir(&DevInst, XAie_TileLoc(35, 0), XAIE_PL_MOD, XAIE_EVENT_SWITCH_B, 8, XAIE_EVENT_BROADCAST_SOUTH | XAIE_EVENT_BROADCAST_WEST | XAIE_EVENT_BROADCAST_NORTH);
	driverStatus |= XAie_EventBroadcastBlockDir(&DevInst, XAie_TileLoc(35, 1), XAIE_MEM_MOD, XAIE_EVENT_SWITCH_A, 7, XAIE_EVENT_BROADCAST_SOUTH | XAIE_EVENT_BROADCAST_WEST | XAIE_EVENT_BROADCAST_EAST);
	driverStatus |= XAie_EventBroadcastBlockDir(&DevInst, XAie_TileLoc(35, 2), XAIE_MEM_MOD, XAIE_EVENT_SWITCH_A, 7, XAIE_EVENT_BROADCAST_SOUTH | XAIE_EVENT_BROADCAST_WEST | XAIE_EVENT_BROADCAST_EAST);
	driverStatus |= XAie_EventBroadcast(&DevInst, XAie_TileLoc(36, 0), XAIE_PL_MOD, 7, XAIE_EVENT_BROADCAST_A_8_PL);
	driverStatus |= XAie_EventBroadcastBlockDir(&DevInst, XAie_TileLoc(36, 0), XAIE_PL_MOD, XAIE_EVENT_SWITCH_A, 7, XAIE_EVENT_BROADCAST_SOUTH | XAIE_EVENT_BROADCAST_WEST | XAIE_EVENT_BROADCAST_EAST);
	driverStatus |= XAie_EventBroadcastBlockDir(&DevInst, XAie_TileLoc(36, 0), XAIE_PL_MOD, XAIE_EVENT_SWITCH_A, 8, XAIE_EVENT_BROADCAST_SOUTH | XAIE_EVENT_BROADCAST_WEST | XAIE_EVENT_BROADCAST_NORTH);
	driverStatus |= XAie_EventBroadcastBlockDir(&DevInst, XAie_TileLoc(36, 0), XAIE_PL_MOD, XAIE_EVENT_SWITCH_B, 8, XAIE_EVENT_BROADCAST_SOUTH | XAIE_EVENT_BROADCAST_WEST | XAIE_EVENT_BROADCAST_NORTH);
	driverStatus |= XAie_EventBroadcastBlockDir(&DevInst, XAie_TileLoc(36, 1), XAIE_MEM_MOD, XAIE_EVENT_SWITCH_A, 7, XAIE_EVENT_BROADCAST_SOUTH | XAIE_EVENT_BROADCAST_WEST | XAIE_EVENT_BROADCAST_EAST);
	driverStatus |= XAie_EventBroadcastBlockDir(&DevInst, XAie_TileLoc(36, 2), XAIE_MEM_MOD, XAIE_EVENT_SWITCH_A, 7, XAIE_EVENT_BROADCAST_SOUTH | XAIE_EVENT_BROADCAST_WEST | XAIE_EVENT_BROADCAST_EAST);
	driverStatus |= XAie_EventBroadcast(&DevInst, XAie_TileLoc(37, 0), XAIE_PL_MOD, 7, XAIE_EVENT_BROADCAST_A_8_PL);
	driverStatus |= XAie_EventBroadcastBlockDir(&DevInst, XAie_TileLoc(37, 0), XAIE_PL_MOD, XAIE_EVENT_SWITCH_A, 7, XAIE_EVENT_BROADCAST_SOUTH | XAIE_EVENT_BROADCAST_WEST | XAIE_EVENT_BROADCAST_EAST);
	driverStatus |= XAie_EventBroadcastBlockDir(&DevInst, XAie_TileLoc(37, 0), XAIE_PL_MOD, XAIE_EVENT_SWITCH_A, 8, XAIE_EVENT_BROADCAST_SOUTH | XAIE_EVENT_BROADCAST_WEST | XAIE_EVENT_BROADCAST_NORTH);
	driverStatus |= XAie_EventBroadcastBlockDir(&DevInst, XAie_TileLoc(37, 0), XAIE_PL_MOD, XAIE_EVENT_SWITCH_B, 8, XAIE_EVENT_BROADCAST_SOUTH | XAIE_EVENT_BROADCAST_WEST | XAIE_EVENT_BROADCAST_NORTH);
	driverStatus |= XAie_EventBroadcastBlockDir(&DevInst, XAie_TileLoc(37, 1), XAIE_MEM_MOD, XAIE_EVENT_SWITCH_A, 7, XAIE_EVENT_BROADCAST_SOUTH | XAIE_EVENT_BROADCAST_WEST | XAIE_EVENT_BROADCAST_EAST);
	driverStatus |= XAie_EventBroadcastBlockDir(&DevInst, XAie_TileLoc(37, 2), XAIE_MEM_MOD, XAIE_EVENT_SWITCH_A, 7, XAIE_EVENT_BROADCAST_SOUTH | XAIE_EVENT_BROADCAST_WEST | XAIE_EVENT_BROADCAST_EAST);
	driverStatus |= XAie_EventBroadcastBlockDir(&DevInst, XAie_TileLoc(0, 3), XAIE_CORE_MOD, XAIE_EVENT_SWITCH_A, 7, XAIE_EVENT_BROADCAST_SOUTH | XAIE_EVENT_BROADCAST_WEST | XAIE_EVENT_BROADCAST_EAST);
	driverStatus |= XAie_EventBroadcastBlockDir(&DevInst, XAie_TileLoc(0, 3), XAIE_MEM_MOD, XAIE_EVENT_SWITCH_A, 7, XAIE_EVENT_BROADCAST_ALL);
	driverStatus |= XAie_EventBroadcastBlockDir(&DevInst, XAie_TileLoc(0, 4), XAIE_CORE_MOD, XAIE_EVENT_SWITCH_A, 7, XAIE_EVENT_BROADCAST_SOUTH | XAIE_EVENT_BROADCAST_WEST | XAIE_EVENT_BROADCAST_EAST);
	driverStatus |= XAie_EventBroadcastBlockDir(&DevInst, XAie_TileLoc(0, 4), XAIE_MEM_MOD, XAIE_EVENT_SWITCH_A, 7, XAIE_EVENT_BROADCAST_ALL);
	driverStatus |= XAie_EventBroadcastBlockDir(&DevInst, XAie_TileLoc(0, 5), XAIE_CORE_MOD, XAIE_EVENT_SWITCH_A, 7, XAIE_EVENT_BROADCAST_SOUTH | XAIE_EVENT_BROADCAST_WEST | XAIE_EVENT_BROADCAST_EAST);
	driverStatus |= XAie_EventBroadcastBlockDir(&DevInst, XAie_TileLoc(0, 5), XAIE_MEM_MOD, XAIE_EVENT_SWITCH_A, 7, XAIE_EVENT_BROADCAST_ALL);
	driverStatus |= XAie_EventBroadcastBlockDir(&DevInst, XAie_TileLoc(1, 3), XAIE_CORE_MOD, XAIE_EVENT_SWITCH_A, 7, XAIE_EVENT_BROADCAST_SOUTH | XAIE_EVENT_BROADCAST_WEST | XAIE_EVENT_BROADCAST_EAST);
	driverStatus |= XAie_EventBroadcastBlockDir(&DevInst, XAie_TileLoc(1, 3), XAIE_MEM_MOD, XAIE_EVENT_SWITCH_A, 7, XAIE_EVENT_BROADCAST_ALL);
	driverStatus |= XAie_EventBroadcastBlockDir(&DevInst, XAie_TileLoc(1, 4), XAIE_CORE_MOD, XAIE_EVENT_SWITCH_A, 7, XAIE_EVENT_BROADCAST_SOUTH | XAIE_EVENT_BROADCAST_WEST | XAIE_EVENT_BROADCAST_EAST);
	driverStatus |= XAie_EventBroadcastBlockDir(&DevInst, XAie_TileLoc(1, 4), XAIE_MEM_MOD, XAIE_EVENT_SWITCH_A, 7, XAIE_EVENT_BROADCAST_ALL);
	driverStatus |= XAie_EventBroadcastBlockDir(&DevInst, XAie_TileLoc(1, 5), XAIE_CORE_MOD, XAIE_EVENT_SWITCH_A, 7, XAIE_EVENT_BROADCAST_SOUTH | XAIE_EVENT_BROADCAST_WEST | XAIE_EVENT_BROADCAST_EAST);
	driverStatus |= XAie_EventBroadcastBlockDir(&DevInst, XAie_TileLoc(1, 5), XAIE_MEM_MOD, XAIE_EVENT_SWITCH_A, 7, XAIE_EVENT_BROADCAST_ALL);
	driverStatus |= XAie_EventBroadcastBlockDir(&DevInst, XAie_TileLoc(2, 3), XAIE_CORE_MOD, XAIE_EVENT_SWITCH_A, 7, XAIE_EVENT_BROADCAST_SOUTH | XAIE_EVENT_BROADCAST_WEST | XAIE_EVENT_BROADCAST_EAST);
	driverStatus |= XAie_EventBroadcastBlockDir(&DevInst, XAie_TileLoc(2, 3), XAIE_MEM_MOD, XAIE_EVENT_SWITCH_A, 7, XAIE_EVENT_BROADCAST_ALL);
	driverStatus |= XAie_EventBroadcastBlockDir(&DevInst, XAie_TileLoc(2, 4), XAIE_CORE_MOD, XAIE_EVENT_SWITCH_A, 7, XAIE_EVENT_BROADCAST_SOUTH | XAIE_EVENT_BROADCAST_WEST | XAIE_EVENT_BROADCAST_EAST);
	driverStatus |= XAie_EventBroadcastBlockDir(&DevInst, XAie_TileLoc(2, 4), XAIE_MEM_MOD, XAIE_EVENT_SWITCH_A, 7, XAIE_EVENT_BROADCAST_ALL);
	driverStatus |= XAie_EventBroadcastBlockDir(&DevInst, XAie_TileLoc(2, 5), XAIE_CORE_MOD, XAIE_EVENT_SWITCH_A, 7, XAIE_EVENT_BROADCAST_SOUTH | XAIE_EVENT_BROADCAST_WEST | XAIE_EVENT_BROADCAST_EAST);
	driverStatus |= XAie_EventBroadcastBlockDir(&DevInst, XAie_TileLoc(2, 5), XAIE_MEM_MOD, XAIE_EVENT_SWITCH_A, 7, XAIE_EVENT_BROADCAST_ALL);
	driverStatus |= XAie_EventBroadcastBlockDir(&DevInst, XAie_TileLoc(3, 3), XAIE_CORE_MOD, XAIE_EVENT_SWITCH_A, 7, XAIE_EVENT_BROADCAST_SOUTH | XAIE_EVENT_BROADCAST_WEST | XAIE_EVENT_BROADCAST_EAST);
	driverStatus |= XAie_EventBroadcastBlockDir(&DevInst, XAie_TileLoc(3, 3), XAIE_MEM_MOD, XAIE_EVENT_SWITCH_A, 7, XAIE_EVENT_BROADCAST_ALL);
	driverStatus |= XAie_EventBroadcastBlockDir(&DevInst, XAie_TileLoc(3, 4), XAIE_CORE_MOD, XAIE_EVENT_SWITCH_A, 7, XAIE_EVENT_BROADCAST_SOUTH | XAIE_EVENT_BROADCAST_WEST | XAIE_EVENT_BROADCAST_EAST);
	driverStatus |= XAie_EventBroadcastBlockDir(&DevInst, XAie_TileLoc(3, 4), XAIE_MEM_MOD, XAIE_EVENT_SWITCH_A, 7, XAIE_EVENT_BROADCAST_ALL);
	driverStatus |= XAie_EventBroadcastBlockDir(&DevInst, XAie_TileLoc(3, 5), XAIE_CORE_MOD, XAIE_EVENT_SWITCH_A, 7, XAIE_EVENT_BROADCAST_SOUTH | XAIE_EVENT_BROADCAST_WEST | XAIE_EVENT_BROADCAST_EAST);
	driverStatus |= XAie_EventBroadcastBlockDir(&DevInst, XAie_TileLoc(3, 5), XAIE_MEM_MOD, XAIE_EVENT_SWITCH_A, 7, XAIE_EVENT_BROADCAST_ALL);
	driverStatus |= XAie_EventBroadcastBlockDir(&DevInst, XAie_TileLoc(4, 3), XAIE_CORE_MOD, XAIE_EVENT_SWITCH_A, 7, XAIE_EVENT_BROADCAST_SOUTH | XAIE_EVENT_BROADCAST_WEST | XAIE_EVENT_BROADCAST_EAST);
	driverStatus |= XAie_EventBroadcastBlockDir(&DevInst, XAie_TileLoc(4, 3), XAIE_MEM_MOD, XAIE_EVENT_SWITCH_A, 7, XAIE_EVENT_BROADCAST_ALL);
	driverStatus |= XAie_EventBroadcastBlockDir(&DevInst, XAie_TileLoc(5, 3), XAIE_CORE_MOD, XAIE_EVENT_SWITCH_A, 7, XAIE_EVENT_BROADCAST_SOUTH | XAIE_EVENT_BROADCAST_WEST | XAIE_EVENT_BROADCAST_EAST);
	driverStatus |= XAie_EventBroadcastBlockDir(&DevInst, XAie_TileLoc(5, 3), XAIE_MEM_MOD, XAIE_EVENT_SWITCH_A, 7, XAIE_EVENT_BROADCAST_ALL);
	driverStatus |= XAie_EventBroadcastBlockDir(&DevInst, XAie_TileLoc(6, 3), XAIE_CORE_MOD, XAIE_EVENT_SWITCH_A, 7, XAIE_EVENT_BROADCAST_SOUTH | XAIE_EVENT_BROADCAST_WEST | XAIE_EVENT_BROADCAST_EAST);
	driverStatus |= XAie_EventBroadcastBlockDir(&DevInst, XAie_TileLoc(6, 3), XAIE_MEM_MOD, XAIE_EVENT_SWITCH_A, 7, XAIE_EVENT_BROADCAST_ALL);
	driverStatus |= XAie_EventBroadcast(&DevInst, XAie_TileLoc(0, 0), XAIE_PL_MOD, 8, XAIE_EVENT_BROADCAST_A_8_PL);
	return (driverStatus == AieRC::XAIE_OK) ? adf::return_code::ok : adf::aie_driver_error;
  }

  bool EG_load_elf(const std::string& work_path, std::vector<std::string>& elfInfoPath)
  {
	#ifdef __PS_INIT_AIE__

	std::string work_dir = (work_path.empty() ?  "/scratch/staff/huaj/aiebr/conv2dext/aiebaremetal2/test/test_external_buffer2/Work" : work_path);
	std::cout<<"Loading elfs of graph EG..."<<std::endl;
	if(XAie_LoadElf(&DevInst, XAie_TileLoc(0, 3), (work_dir + "/aie/0_0/Release/0_0").c_str(), XAIE_ENABLE)!=XAIE_OK)
	{
		std::cerr << "ERROR: Failed to load elf for core(0,0)" << std::endl;
		return false;
	}
	if(XAie_LoadElf(&DevInst, XAie_TileLoc(0, 4), (work_dir + "/aie/0_1/Release/0_1").c_str(), XAIE_ENABLE)!=XAIE_OK)
	{
		std::cerr << "ERROR: Failed to load elf for core(0,1)" << std::endl;
		return false;
	}
	if(XAie_LoadElf(&DevInst, XAie_TileLoc(1, 3), (work_dir + "/aie/1_0/Release/1_0").c_str(), XAIE_ENABLE)!=XAIE_OK)
	{
		std::cerr << "ERROR: Failed to load elf for core(1,0)" << std::endl;
		return false;
	}
	if(XAie_LoadElf(&DevInst, XAie_TileLoc(1, 4), (work_dir + "/aie/1_1/Release/1_1").c_str(), XAIE_ENABLE)!=XAIE_OK)
	{
		std::cerr << "ERROR: Failed to load elf for core(1,1)" << std::endl;
		return false;
	}
	if(XAie_LoadElf(&DevInst, XAie_TileLoc(2, 3), (work_dir + "/aie/2_0/Release/2_0").c_str(), XAIE_ENABLE)!=XAIE_OK)
	{
		std::cerr << "ERROR: Failed to load elf for core(2,0)" << std::endl;
		return false;
	}
	if(XAie_LoadElf(&DevInst, XAie_TileLoc(2, 4), (work_dir + "/aie/2_1/Release/2_1").c_str(), XAIE_ENABLE)!=XAIE_OK)
	{
		std::cerr << "ERROR: Failed to load elf for core(2,1)" << std::endl;
		return false;
	}
	if(XAie_LoadElf(&DevInst, XAie_TileLoc(3, 3), (work_dir + "/aie/3_0/Release/3_0").c_str(), XAIE_ENABLE)!=XAIE_OK)
	{
		std::cerr << "ERROR: Failed to load elf for core(3,0)" << std::endl;
		return false;
	}
	if(XAie_LoadElf(&DevInst, XAie_TileLoc(3, 4), (work_dir + "/aie/3_1/Release/3_1").c_str(), XAIE_ENABLE)!=XAIE_OK)
	{
		std::cerr << "ERROR: Failed to load elf for core(3,1)" << std::endl;
		return false;
	}
	#endif

	return true;
  }

  adf::return_code EG_init(const std::string& work_path)
  {

	std::cout<<"Initializing graph EG..."<<std::endl;

	int driverStatus = AieRC::XAIE_OK;

    #ifdef __PS_INIT_AIE__

	std::string work_dir = (work_path.empty() ?  "/scratch/staff/huaj/aiebr/conv2dext/aiebaremetal2/test/test_external_buffer2/Work" : work_path);
	// S_EAST_ch1_C1_R0 M_S2MM_DMA_ch0_C1_R0 net17

	driverStatus |= XAie_StrmConnCctEnable(&DevInst, XAie_TileLoc(1, 3), EAST, 1, DMA, 0);

	// S_EAST_ch1_C1_R0 M_WEST_ch2_C1_R0 net17

	driverStatus |= XAie_StrmConnCctEnable(&DevInst, XAie_TileLoc(1, 3), EAST, 1, WEST, 2);

	// S_EAST_ch1_C2_R0 M_S2MM_DMA_ch1_C2_R0 net2

	driverStatus |= XAie_StrmConnCctEnable(&DevInst, XAie_TileLoc(2, 3), EAST, 1, DMA, 1);

	// S_EAST_ch1_C2_R0 M_WEST_ch2_C2_R0 net2

	driverStatus |= XAie_StrmConnCctEnable(&DevInst, XAie_TileLoc(2, 3), EAST, 1, WEST, 2);

	// S_EAST_ch2_C0_R0 M_S2MM_DMA_ch0_C0_R0 net17

	driverStatus |= XAie_StrmConnCctEnable(&DevInst, XAie_TileLoc(0, 3), EAST, 2, DMA, 0);

	// S_EAST_ch2_C1_R0 M_NORTH_ch5_C1_R0 net2

	driverStatus |= XAie_StrmConnCctEnable(&DevInst, XAie_TileLoc(1, 3), EAST, 2, NORTH, 5);

	// S_EAST_ch2_C2_R0 M_NORTH_ch5_C2_R0 net23

	driverStatus |= XAie_StrmConnCctEnable(&DevInst, XAie_TileLoc(2, 3), EAST, 2, NORTH, 5);

	// S_EAST_ch2_C2_R0 M_S2MM_DMA_ch0_C2_R0 net23

	driverStatus |= XAie_StrmConnCctEnable(&DevInst, XAie_TileLoc(2, 3), EAST, 2, DMA, 0);

	// S_EAST_ch2_C3_R0 M_NORTH_ch5_C3_R0 net29

	driverStatus |= XAie_StrmConnCctEnable(&DevInst, XAie_TileLoc(3, 3), EAST, 2, NORTH, 5);

	// S_EAST_ch2_C3_R0 M_S2MM_DMA_ch0_C3_R0 net29

	driverStatus |= XAie_StrmConnCctEnable(&DevInst, XAie_TileLoc(3, 3), EAST, 2, DMA, 0);

	// S_EAST_ch2_C4_R0 M_WEST_ch2_C4_R0 net29

	driverStatus |= XAie_StrmConnCctEnable(&DevInst, XAie_TileLoc(4, 3), EAST, 2, WEST, 2);

	// S_EAST_ch2_C5_R0 M_WEST_ch2_C5_R0 net29

	driverStatus |= XAie_StrmConnCctEnable(&DevInst, XAie_TileLoc(5, 3), EAST, 2, WEST, 2);

	// S_EAST_ch3_C0_R0 M_NORTH_ch5_C0_R0 net6

	driverStatus |= XAie_StrmConnCctEnable(&DevInst, XAie_TileLoc(0, 3), EAST, 3, NORTH, 5);

	// S_EAST_ch3_C0_R1 M_S2MM_DMA_ch1_C0_R1 net2

	driverStatus |= XAie_StrmConnCctEnable(&DevInst, XAie_TileLoc(0, 4), EAST, 3, DMA, 1);

	// S_EAST_ch3_C0_R2 M_S2MM_DMA_ch1_C0_R2 net10

	driverStatus |= XAie_StrmConnCctEnable(&DevInst, XAie_TileLoc(0, 5), EAST, 3, DMA, 1);

	// S_EAST_ch3_C1_R0 M_WEST_ch3_C1_R0 net6

	driverStatus |= XAie_StrmConnCctEnable(&DevInst, XAie_TileLoc(1, 3), EAST, 3, WEST, 3);

	// S_EAST_ch3_C1_R1 M_NORTH_ch5_C1_R1 net10

	driverStatus |= XAie_StrmConnCctEnable(&DevInst, XAie_TileLoc(1, 4), EAST, 3, NORTH, 5);

	// S_EAST_ch3_C2_R0 M_WEST_ch3_C2_R0 net6

	driverStatus |= XAie_StrmConnCctEnable(&DevInst, XAie_TileLoc(2, 3), EAST, 3, WEST, 3);

	// S_EAST_ch3_C3_R0 M_WEST_ch3_C3_R0 net6

	driverStatus |= XAie_StrmConnCctEnable(&DevInst, XAie_TileLoc(3, 3), EAST, 3, WEST, 3);

	// S_EAST_ch3_C4_R0 M_WEST_ch3_C4_R0 net6

	driverStatus |= XAie_StrmConnCctEnable(&DevInst, XAie_TileLoc(4, 3), EAST, 3, WEST, 3);

	// S_EAST_ch3_C5_R0 M_WEST_ch3_C5_R0 net6

	driverStatus |= XAie_StrmConnCctEnable(&DevInst, XAie_TileLoc(5, 3), EAST, 3, WEST, 3);

	// S_MEMTILE_MM2S_DMA_ch0_C2_R0 M_MEMTILE_NORTH_ch4_C2_R0 net17

	driverStatus |= XAie_StrmConnCctEnable(&DevInst, XAie_TileLoc(2, 1), DMA, 0, NORTH, 4);

	// S_MEMTILE_MM2S_DMA_ch0_C2_R1 M_MEMTILE_NORTH_ch5_C2_R1 net10

	driverStatus |= XAie_StrmConnCctEnable(&DevInst, XAie_TileLoc(2, 2), DMA, 0, NORTH, 5);

	// S_MEMTILE_MM2S_DMA_ch0_C3_R0 M_MEMTILE_NORTH_ch4_C3_R0 net2

	driverStatus |= XAie_StrmConnCctEnable(&DevInst, XAie_TileLoc(3, 1), DMA, 0, NORTH, 4);

	// S_MEMTILE_MM2S_DMA_ch0_C6_R1 M_MEMTILE_NORTH_ch5_C6_R1 net6

	driverStatus |= XAie_StrmConnCctEnable(&DevInst, XAie_TileLoc(6, 2), DMA, 0, NORTH, 5);

	// S_MEMTILE_MM2S_DMA_ch1_C3_R0 M_MEMTILE_NORTH_ch5_C3_R0 net23

	driverStatus |= XAie_StrmConnCctEnable(&DevInst, XAie_TileLoc(3, 1), DMA, 1, NORTH, 5);

	// S_MEMTILE_MM2S_DMA_ch1_C6_R1 M_MEMTILE_NORTH_ch4_C6_R1 net29

	driverStatus |= XAie_StrmConnCctEnable(&DevInst, XAie_TileLoc(6, 2), DMA, 1, NORTH, 4);

	// S_MEMTILE_NORTH_ch3_C0_R0 M_MEMTILE_SOUTH_ch3_C0_R0 net8

	driverStatus |= XAie_StrmConnCctEnable(&DevInst, XAie_TileLoc(0, 1), NORTH, 3, SOUTH, 3);

	// S_MEMTILE_NORTH_ch3_C0_R1 M_MEMTILE_SOUTH_ch3_C0_R1 net8

	driverStatus |= XAie_StrmConnCctEnable(&DevInst, XAie_TileLoc(0, 2), NORTH, 3, SOUTH, 3);

	// S_MEMTILE_NORTH_ch3_C1_R0 M_MEMTILE_SOUTH_ch3_C1_R0 net20

	driverStatus |= XAie_StrmConnCctEnable(&DevInst, XAie_TileLoc(1, 1), NORTH, 3, SOUTH, 3);

	// S_MEMTILE_NORTH_ch3_C1_R1 M_MEMTILE_SOUTH_ch3_C1_R1 net20

	driverStatus |= XAie_StrmConnCctEnable(&DevInst, XAie_TileLoc(1, 2), NORTH, 3, SOUTH, 3);

	// S_MEMTILE_NORTH_ch3_C2_R0 M_MEMTILE_SOUTH_ch3_C2_R0 net26

	driverStatus |= XAie_StrmConnCctEnable(&DevInst, XAie_TileLoc(2, 1), NORTH, 3, SOUTH, 3);

	// S_MEMTILE_NORTH_ch3_C2_R1 M_MEMTILE_SOUTH_ch3_C2_R1 net26

	driverStatus |= XAie_StrmConnCctEnable(&DevInst, XAie_TileLoc(2, 2), NORTH, 3, SOUTH, 3);

	// S_MEMTILE_NORTH_ch3_C3_R0 M_MEMTILE_SOUTH_ch3_C3_R0 net32

	driverStatus |= XAie_StrmConnCctEnable(&DevInst, XAie_TileLoc(3, 1), NORTH, 3, SOUTH, 3);

	// S_MEMTILE_NORTH_ch3_C3_R1 M_MEMTILE_SOUTH_ch3_C3_R1 net32

	driverStatus |= XAie_StrmConnCctEnable(&DevInst, XAie_TileLoc(3, 2), NORTH, 3, SOUTH, 3);

	// S_MEMTILE_SOUTH_ch4_C2_R0 M_MEMTILE_S2MM_DMA_ch0_C2_R0 net16

	driverStatus |= XAie_StrmConnCctEnable(&DevInst, XAie_TileLoc(2, 1), SOUTH, 4, DMA, 0);

	// S_MEMTILE_SOUTH_ch4_C2_R1 M_MEMTILE_NORTH_ch4_C2_R1 net17

	driverStatus |= XAie_StrmConnCctEnable(&DevInst, XAie_TileLoc(2, 2), SOUTH, 4, NORTH, 4);

	// S_MEMTILE_SOUTH_ch4_C3_R0 M_MEMTILE_S2MM_DMA_ch0_C3_R0 net1

	driverStatus |= XAie_StrmConnCctEnable(&DevInst, XAie_TileLoc(3, 1), SOUTH, 4, DMA, 0);

	// S_MEMTILE_SOUTH_ch4_C3_R1 M_MEMTILE_NORTH_ch4_C3_R1 net2

	driverStatus |= XAie_StrmConnCctEnable(&DevInst, XAie_TileLoc(3, 2), SOUTH, 4, NORTH, 4);

	// S_MEMTILE_SOUTH_ch4_C6_R0 M_MEMTILE_NORTH_ch4_C6_R0 net0

	driverStatus |= XAie_StrmConnCctEnable(&DevInst, XAie_TileLoc(6, 1), SOUTH, 4, NORTH, 4);

	// S_MEMTILE_SOUTH_ch4_C6_R1 M_MEMTILE_S2MM_DMA_ch0_C6_R1 net0

	driverStatus |= XAie_StrmConnCctEnable(&DevInst, XAie_TileLoc(6, 2), SOUTH, 4, DMA, 0);

	// S_MEMTILE_SOUTH_ch5_C2_R0 M_MEMTILE_NORTH_ch5_C2_R0 net9

	driverStatus |= XAie_StrmConnCctEnable(&DevInst, XAie_TileLoc(2, 1), SOUTH, 5, NORTH, 5);

	// S_MEMTILE_SOUTH_ch5_C2_R1 M_MEMTILE_S2MM_DMA_ch0_C2_R1 net9

	driverStatus |= XAie_StrmConnCctEnable(&DevInst, XAie_TileLoc(2, 2), SOUTH, 5, DMA, 0);

	// S_MEMTILE_SOUTH_ch5_C3_R0 M_MEMTILE_S2MM_DMA_ch1_C3_R0 net22

	driverStatus |= XAie_StrmConnCctEnable(&DevInst, XAie_TileLoc(3, 1), SOUTH, 5, DMA, 1);

	// S_MEMTILE_SOUTH_ch5_C3_R1 M_MEMTILE_NORTH_ch5_C3_R1 net23

	driverStatus |= XAie_StrmConnCctEnable(&DevInst, XAie_TileLoc(3, 2), SOUTH, 5, NORTH, 5);

	// S_MEMTILE_SOUTH_ch5_C6_R0 M_MEMTILE_NORTH_ch5_C6_R0 net28

	driverStatus |= XAie_StrmConnCctEnable(&DevInst, XAie_TileLoc(6, 1), SOUTH, 5, NORTH, 5);

	// S_MEMTILE_SOUTH_ch5_C6_R1 M_MEMTILE_S2MM_DMA_ch1_C6_R1 net28

	driverStatus |= XAie_StrmConnCctEnable(&DevInst, XAie_TileLoc(6, 2), SOUTH, 5, DMA, 1);

	//SLAVE CONFIGURATION FOR SW(0,4)

	// S_MM2S_DMA_ch0_C0_R1->M_SOUTH_ch3_C0_R1 nets: net8 
	driverStatus |= XAie_StrmPktSwSlaveSlotEnable(&DevInst, XAie_TileLoc(0, 4), DMA, 0, 0, {.PktId=0, .PktType=0}, 0x1f, 0, 0);

	//MASTER CONFIGURATION FOR SW(0,4)
	//configure master M_SOUTH_ch3_C0_R1 nets: net14 net8 

	driverStatus |= XAie_StrmPktSwMstrPortEnable(&DevInst, XAie_TileLoc(0, 4), SOUTH, 3, XAIE_SS_PKT_DROP_HEADER, 0, 0x1);


	// S_MM2S_DMA_ch0_C0_R2 M_SOUTH_ch3_C0_R2 net14

	driverStatus |= XAie_StrmConnCctEnable(&DevInst, XAie_TileLoc(0, 5), DMA, 0, SOUTH, 3);

	//SLAVE CONFIGURATION FOR SW(1,4)

	// S_MM2S_DMA_ch0_C1_R1->M_SOUTH_ch3_C1_R1 nets: net19 
	driverStatus |= XAie_StrmPktSwSlaveSlotEnable(&DevInst, XAie_TileLoc(1, 4), DMA, 0, 0, {.PktId=0, .PktType=0}, 0x1f, 0, 0);

	//MASTER CONFIGURATION FOR SW(1,4)
	//configure master M_SOUTH_ch3_C1_R1 nets: net19 net20 

	driverStatus |= XAie_StrmPktSwMstrPortEnable(&DevInst, XAie_TileLoc(1, 4), SOUTH, 3, XAIE_SS_PKT_DROP_HEADER, 0, 0x1);


	// S_MM2S_DMA_ch0_C1_R2 M_SOUTH_ch3_C1_R2 net20

	driverStatus |= XAie_StrmConnCctEnable(&DevInst, XAie_TileLoc(1, 5), DMA, 0, SOUTH, 3);

	//SLAVE CONFIGURATION FOR SW(2,3)

	// S_MM2S_DMA_ch0_C2_R0->M_SOUTH_ch3_C2_R0 nets: net25 
	driverStatus |= XAie_StrmPktSwSlaveSlotEnable(&DevInst, XAie_TileLoc(2, 3), DMA, 0, 0, {.PktId=0, .PktType=0}, 0x1f, 0, 0);

	//MASTER CONFIGURATION FOR SW(2,3)
	//configure master M_SOUTH_ch3_C2_R0 nets: net25 net26 

	driverStatus |= XAie_StrmPktSwMstrPortEnable(&DevInst, XAie_TileLoc(2, 3), SOUTH, 3, XAIE_SS_PKT_DROP_HEADER, 0, 0x1);


	// S_MM2S_DMA_ch0_C2_R2 M_SOUTH_ch3_C2_R2 net26

	driverStatus |= XAie_StrmConnCctEnable(&DevInst, XAie_TileLoc(2, 5), DMA, 0, SOUTH, 3);

	//SLAVE CONFIGURATION FOR SW(3,3)

	// S_MM2S_DMA_ch0_C3_R0->M_SOUTH_ch3_C3_R0 nets: net31 
	driverStatus |= XAie_StrmPktSwSlaveSlotEnable(&DevInst, XAie_TileLoc(3, 3), DMA, 0, 0, {.PktId=0, .PktType=0}, 0x1f, 0, 0);

	//MASTER CONFIGURATION FOR SW(3,3)
	//configure master M_SOUTH_ch3_C3_R0 nets: net31 net32 

	driverStatus |= XAie_StrmPktSwMstrPortEnable(&DevInst, XAie_TileLoc(3, 3), SOUTH, 3, XAIE_SS_PKT_DROP_HEADER, 0, 0x1);


	// S_MM2S_DMA_ch0_C3_R2 M_SOUTH_ch3_C3_R2 net32

	driverStatus |= XAie_StrmConnCctEnable(&DevInst, XAie_TileLoc(3, 5), DMA, 0, SOUTH, 3);

	// S_NORTH_ch3_C0_R0 M_SOUTH_ch3_C0_R0 net8

	driverStatus |= XAie_StrmConnCctEnable(&DevInst, XAie_TileLoc(0, 3), NORTH, 3, SOUTH, 3);

	//SLAVE CONFIGURATION FOR SW(0,4)

	// S_NORTH_ch3_C0_R1->M_SOUTH_ch3_C0_R1 nets: net14 
	driverStatus |= XAie_StrmPktSwSlaveSlotEnable(&DevInst, XAie_TileLoc(0, 4), NORTH, 3, 0, {.PktId=1, .PktType=0}, 0x1f, 0, 0);
	// S_NORTH_ch3_C1_R0 M_SOUTH_ch3_C1_R0 net20

	driverStatus |= XAie_StrmConnCctEnable(&DevInst, XAie_TileLoc(1, 3), NORTH, 3, SOUTH, 3);

	//SLAVE CONFIGURATION FOR SW(1,4)

	// S_NORTH_ch3_C1_R1->M_SOUTH_ch3_C1_R1 nets: net20 
	driverStatus |= XAie_StrmPktSwSlaveSlotEnable(&DevInst, XAie_TileLoc(1, 4), NORTH, 3, 0, {.PktId=1, .PktType=0}, 0x1f, 0, 0);
	//SLAVE CONFIGURATION FOR SW(2,3)

	// S_NORTH_ch3_C2_R0->M_SOUTH_ch3_C2_R0 nets: net26 
	driverStatus |= XAie_StrmPktSwSlaveSlotEnable(&DevInst, XAie_TileLoc(2, 3), NORTH, 3, 0, {.PktId=1, .PktType=0}, 0x1f, 0, 0);
	// S_NORTH_ch3_C2_R1 M_SOUTH_ch3_C2_R1 net26

	driverStatus |= XAie_StrmConnCctEnable(&DevInst, XAie_TileLoc(2, 4), NORTH, 3, SOUTH, 3);

	//SLAVE CONFIGURATION FOR SW(3,3)

	// S_NORTH_ch3_C3_R0->M_SOUTH_ch3_C3_R0 nets: net32 
	driverStatus |= XAie_StrmPktSwSlaveSlotEnable(&DevInst, XAie_TileLoc(3, 3), NORTH, 3, 0, {.PktId=1, .PktType=0}, 0x1f, 0, 0);
	// S_NORTH_ch3_C3_R1 M_SOUTH_ch3_C3_R1 net32

	driverStatus |= XAie_StrmConnCctEnable(&DevInst, XAie_TileLoc(3, 4), NORTH, 3, SOUTH, 3);

	// S_SHIM_NORTH_ch3_C0 M_SHIM_EAST_ch3_C0 net8

	driverStatus |= XAie_StrmConnCctEnable(&DevInst, XAie_TileLoc(0, 0), NORTH, 3, EAST, 3);

	// S_SHIM_NORTH_ch3_C1 M_SHIM_EAST_ch3_C1 net20

	driverStatus |= XAie_StrmConnCctEnable(&DevInst, XAie_TileLoc(1, 0), NORTH, 3, EAST, 3);

	// S_SHIM_NORTH_ch3_C2 M_SHIM_EAST_ch3_C2 net26

	driverStatus |= XAie_StrmConnCctEnable(&DevInst, XAie_TileLoc(2, 0), NORTH, 3, EAST, 3);

	// S_SHIM_NORTH_ch3_C3 M_SHIM_SOUTH_ch3_C3 net32

	driverStatus |= XAie_StrmConnCctEnable(&DevInst, XAie_TileLoc(3, 0), NORTH, 3, SOUTH, 3);

	// S_SHIM_SOUTH_ch3_C2 M_SHIM_NORTH_ch4_C2 net16

	driverStatus |= XAie_StrmConnCctEnable(&DevInst, XAie_TileLoc(2, 0), SOUTH, 3, NORTH, 4);

	// S_SHIM_SOUTH_ch3_C3 M_SHIM_NORTH_ch4_C3 net1

	driverStatus |= XAie_StrmConnCctEnable(&DevInst, XAie_TileLoc(3, 0), SOUTH, 3, NORTH, 4);

	// S_SHIM_SOUTH_ch3_C6 M_SHIM_NORTH_ch5_C6 net28

	driverStatus |= XAie_StrmConnCctEnable(&DevInst, XAie_TileLoc(6, 0), SOUTH, 3, NORTH, 5);

	// S_SHIM_SOUTH_ch7_C2 M_SHIM_NORTH_ch5_C2 net9

	driverStatus |= XAie_StrmConnCctEnable(&DevInst, XAie_TileLoc(2, 0), SOUTH, 7, NORTH, 5);

	// S_SHIM_SOUTH_ch7_C3 M_SHIM_NORTH_ch5_C3 net22

	driverStatus |= XAie_StrmConnCctEnable(&DevInst, XAie_TileLoc(3, 0), SOUTH, 7, NORTH, 5);

	// S_SHIM_SOUTH_ch7_C6 M_SHIM_NORTH_ch4_C6 net0

	driverStatus |= XAie_StrmConnCctEnable(&DevInst, XAie_TileLoc(6, 0), SOUTH, 7, NORTH, 4);

	// S_SHIM_WEST_ch2_C2 M_SHIM_SOUTH_ch3_C2 net8

	driverStatus |= XAie_StrmConnCctEnable(&DevInst, XAie_TileLoc(2, 0), WEST, 2, SOUTH, 3);

	// S_SHIM_WEST_ch3_C1 M_SHIM_EAST_ch2_C1 net8

	driverStatus |= XAie_StrmConnCctEnable(&DevInst, XAie_TileLoc(1, 0), WEST, 3, EAST, 2);

	// S_SHIM_WEST_ch3_C2 M_SHIM_SOUTH_ch2_C2 net20

	driverStatus |= XAie_StrmConnCctEnable(&DevInst, XAie_TileLoc(2, 0), WEST, 3, SOUTH, 2);

	// S_SHIM_WEST_ch3_C3 M_SHIM_SOUTH_ch2_C3 net26

	driverStatus |= XAie_StrmConnCctEnable(&DevInst, XAie_TileLoc(3, 0), WEST, 3, SOUTH, 2);

	// S_SOUTH_ch4_C2_R0 M_WEST_ch1_C2_R0 net17

	driverStatus |= XAie_StrmConnCctEnable(&DevInst, XAie_TileLoc(2, 3), SOUTH, 4, WEST, 1);

	// S_SOUTH_ch4_C2_R1 M_EAST_ch3_C2_R1 net10

	driverStatus |= XAie_StrmConnCctEnable(&DevInst, XAie_TileLoc(2, 4), SOUTH, 4, EAST, 3);

	// S_SOUTH_ch4_C2_R1 M_S2MM_DMA_ch0_C2_R1 net10

	driverStatus |= XAie_StrmConnCctEnable(&DevInst, XAie_TileLoc(2, 4), SOUTH, 4, DMA, 0);

	// S_SOUTH_ch4_C2_R1 M_WEST_ch3_C2_R1 net10

	driverStatus |= XAie_StrmConnCctEnable(&DevInst, XAie_TileLoc(2, 4), SOUTH, 4, WEST, 3);

	// S_SOUTH_ch4_C3_R0 M_S2MM_DMA_ch1_C3_R0 net2

	driverStatus |= XAie_StrmConnCctEnable(&DevInst, XAie_TileLoc(3, 3), SOUTH, 4, DMA, 1);

	// S_SOUTH_ch4_C3_R0 M_WEST_ch1_C3_R0 net2

	driverStatus |= XAie_StrmConnCctEnable(&DevInst, XAie_TileLoc(3, 3), SOUTH, 4, WEST, 1);

	// S_SOUTH_ch4_C6_R0 M_WEST_ch2_C6_R0 net29

	driverStatus |= XAie_StrmConnCctEnable(&DevInst, XAie_TileLoc(6, 3), SOUTH, 4, WEST, 2);

	// S_SOUTH_ch5_C0_R1 M_NORTH_ch5_C0_R1 net6

	driverStatus |= XAie_StrmConnCctEnable(&DevInst, XAie_TileLoc(0, 4), SOUTH, 5, NORTH, 5);

	// S_SOUTH_ch5_C0_R1 M_S2MM_DMA_ch0_C0_R1 net6

	driverStatus |= XAie_StrmConnCctEnable(&DevInst, XAie_TileLoc(0, 4), SOUTH, 5, DMA, 0);

	// S_SOUTH_ch5_C0_R2 M_S2MM_DMA_ch0_C0_R2 net6

	driverStatus |= XAie_StrmConnCctEnable(&DevInst, XAie_TileLoc(0, 5), SOUTH, 5, DMA, 0);

	// S_SOUTH_ch5_C1_R1 M_S2MM_DMA_ch0_C1_R1 net2

	driverStatus |= XAie_StrmConnCctEnable(&DevInst, XAie_TileLoc(1, 4), SOUTH, 5, DMA, 0);

	// S_SOUTH_ch5_C1_R1 M_WEST_ch3_C1_R1 net2

	driverStatus |= XAie_StrmConnCctEnable(&DevInst, XAie_TileLoc(1, 4), SOUTH, 5, WEST, 3);

	// S_SOUTH_ch5_C1_R2 M_S2MM_DMA_ch0_C1_R2 net10

	driverStatus |= XAie_StrmConnCctEnable(&DevInst, XAie_TileLoc(1, 5), SOUTH, 5, DMA, 0);

	// S_SOUTH_ch5_C1_R2 M_WEST_ch3_C1_R2 net10

	driverStatus |= XAie_StrmConnCctEnable(&DevInst, XAie_TileLoc(1, 5), SOUTH, 5, WEST, 3);

	// S_SOUTH_ch5_C2_R0 M_NORTH_ch4_C2_R0 net10

	driverStatus |= XAie_StrmConnCctEnable(&DevInst, XAie_TileLoc(2, 3), SOUTH, 5, NORTH, 4);

	// S_SOUTH_ch5_C2_R1 M_NORTH_ch5_C2_R1 net23

	driverStatus |= XAie_StrmConnCctEnable(&DevInst, XAie_TileLoc(2, 4), SOUTH, 5, NORTH, 5);

	// S_SOUTH_ch5_C2_R2 M_S2MM_DMA_ch0_C2_R2 net23

	driverStatus |= XAie_StrmConnCctEnable(&DevInst, XAie_TileLoc(2, 5), SOUTH, 5, DMA, 0);

	// S_SOUTH_ch5_C3_R0 M_WEST_ch2_C3_R0 net23

	driverStatus |= XAie_StrmConnCctEnable(&DevInst, XAie_TileLoc(3, 3), SOUTH, 5, WEST, 2);

	// S_SOUTH_ch5_C3_R1 M_NORTH_ch5_C3_R1 net29

	driverStatus |= XAie_StrmConnCctEnable(&DevInst, XAie_TileLoc(3, 4), SOUTH, 5, NORTH, 5);

	// S_SOUTH_ch5_C3_R2 M_S2MM_DMA_ch0_C3_R2 net29

	driverStatus |= XAie_StrmConnCctEnable(&DevInst, XAie_TileLoc(3, 5), SOUTH, 5, DMA, 0);

	// S_SOUTH_ch5_C6_R0 M_WEST_ch3_C6_R0 net6

	driverStatus |= XAie_StrmConnCctEnable(&DevInst, XAie_TileLoc(6, 3), SOUTH, 5, WEST, 3);

	// S_WEST_ch3_C3_R1 M_S2MM_DMA_ch0_C3_R1 net10

	driverStatus |= XAie_StrmConnCctEnable(&DevInst, XAie_TileLoc(3, 4), WEST, 3, DMA, 0);

	driverStatus |= XAie_StrmPktSwSlavePortEnable(&DevInst, XAie_TileLoc(0,4), DMA, 0);

	driverStatus |= XAie_StrmPktSwSlavePortEnable(&DevInst, XAie_TileLoc(1,4), DMA, 0);

	driverStatus |= XAie_StrmPktSwSlavePortEnable(&DevInst, XAie_TileLoc(2,3), DMA, 0);

	driverStatus |= XAie_StrmPktSwSlavePortEnable(&DevInst, XAie_TileLoc(3,3), DMA, 0);

	driverStatus |= XAie_StrmPktSwSlavePortEnable(&DevInst, XAie_TileLoc(0,4), NORTH, 3);

	driverStatus |= XAie_StrmPktSwSlavePortEnable(&DevInst, XAie_TileLoc(1,4), NORTH, 3);

	driverStatus |= XAie_StrmPktSwSlavePortEnable(&DevInst, XAie_TileLoc(2,3), NORTH, 3);

	driverStatus |= XAie_StrmPktSwSlavePortEnable(&DevInst, XAie_TileLoc(3,3), NORTH, 3);


	std::cout<<"Resetting cores of graph EG..."<<std::endl;
	driverStatus |= XAie_CoreReset(&DevInst, XAie_TileLoc(0, 3));
	driverStatus |= XAie_CoreUnreset(&DevInst, XAie_TileLoc(0, 3));
	driverStatus |= XAie_CoreReset(&DevInst, XAie_TileLoc(0, 4));
	driverStatus |= XAie_CoreUnreset(&DevInst, XAie_TileLoc(0, 4));
	driverStatus |= XAie_CoreReset(&DevInst, XAie_TileLoc(1, 3));
	driverStatus |= XAie_CoreUnreset(&DevInst, XAie_TileLoc(1, 3));
	driverStatus |= XAie_CoreReset(&DevInst, XAie_TileLoc(1, 4));
	driverStatus |= XAie_CoreUnreset(&DevInst, XAie_TileLoc(1, 4));
	driverStatus |= XAie_CoreReset(&DevInst, XAie_TileLoc(2, 3));
	driverStatus |= XAie_CoreUnreset(&DevInst, XAie_TileLoc(2, 3));
	driverStatus |= XAie_CoreReset(&DevInst, XAie_TileLoc(2, 4));
	driverStatus |= XAie_CoreUnreset(&DevInst, XAie_TileLoc(2, 4));
	driverStatus |= XAie_CoreReset(&DevInst, XAie_TileLoc(3, 3));
	driverStatus |= XAie_CoreUnreset(&DevInst, XAie_TileLoc(3, 3));
	driverStatus |= XAie_CoreReset(&DevInst, XAie_TileLoc(3, 4));
	driverStatus |= XAie_CoreUnreset(&DevInst, XAie_TileLoc(3, 4));
	//Connect mux stream id 3 to shim DMA. 
	driverStatus |= XAie_EnableShimDmaToAieStrmPort(&DevInst, XAie_TileLoc(3, 0), 3);
	//Connect mux stream id 7 to shim DMA. 
	driverStatus |= XAie_EnableShimDmaToAieStrmPort(&DevInst, XAie_TileLoc(2, 0), 7);
	//Connect mux stream id 7 to shim DMA. 
	driverStatus |= XAie_EnableShimDmaToAieStrmPort(&DevInst, XAie_TileLoc(6, 0), 7);
	//Connect demux stream id 3 to shim DMA. 
	driverStatus |= XAie_EnableAieToShimDmaStrmPort(&DevInst, XAie_TileLoc(2, 0), 3);
	//Connect mux stream id 3 to shim DMA. 
	driverStatus |= XAie_EnableShimDmaToAieStrmPort(&DevInst, XAie_TileLoc(2, 0), 3);
	//Connect demux stream id 2 to shim DMA. 
	driverStatus |= XAie_EnableAieToShimDmaStrmPort(&DevInst, XAie_TileLoc(2, 0), 2);
	//Connect mux stream id 7 to shim DMA. 
	driverStatus |= XAie_EnableShimDmaToAieStrmPort(&DevInst, XAie_TileLoc(3, 0), 7);
	//Connect demux stream id 2 to shim DMA. 
	driverStatus |= XAie_EnableAieToShimDmaStrmPort(&DevInst, XAie_TileLoc(3, 0), 2);
	//Connect mux stream id 3 to shim DMA. 
	driverStatus |= XAie_EnableShimDmaToAieStrmPort(&DevInst, XAie_TileLoc(6, 0), 3);
	//Connect demux stream id 3 to shim DMA. 
	driverStatus |= XAie_EnableAieToShimDmaStrmPort(&DevInst, XAie_TileLoc(3, 0), 3);

	std::cout<<"Configuring DMAs of graph EG..."<<std::endl;

	//Setting lock initial value for EG.conv[1][0].in[0]
	driverStatus |= XAie_LockSetValue(&DevInst, XAie_TileLoc(0, 3), XAie_LockInit(0, 2));

	//Setting buffer buf12 of EG.conv[1][0].in[0]
	{
		XAie_DmaDesc DmaInst;
		driverStatus |= XAie_DmaDescInit(&DevInst, &DmaInst, XAie_TileLoc(0, 3));
		driverStatus |= XAie_DmaSetAddrLen(&DmaInst, 0x4000, 588);
		driverStatus |= XAie_DmaSetLock(&DmaInst, XAie_LockInit(0, -1), XAie_LockInit(1, 1));
		driverStatus |= XAie_DmaSetNextBd(&DmaInst, 1, XAIE_ENABLE);
		driverStatus |= XAie_DmaEnableBd(&DmaInst);
		driverStatus |= XAie_DmaWriteBd(&DevInst, &DmaInst, XAie_TileLoc(0, 3), 0);
	}

	//Setting buffer buf12d of EG.conv[1][0].in[0]
	{
		XAie_DmaDesc DmaInst;
		driverStatus |= XAie_DmaDescInit(&DevInst, &DmaInst, XAie_TileLoc(0, 3));
		driverStatus |= XAie_DmaSetAddrLen(&DmaInst, 0x8000, 588);
		driverStatus |= XAie_DmaSetLock(&DmaInst, XAie_LockInit(0, -1), XAie_LockInit(1, 1));
		driverStatus |= XAie_DmaSetNextBd(&DmaInst, 0, XAIE_ENABLE);
		driverStatus |= XAie_DmaEnableBd(&DmaInst);
		driverStatus |= XAie_DmaWriteBd(&DevInst, &DmaInst, XAie_TileLoc(0, 3), 1);
	}
	{
		driverStatus |= XAie_DmaChannelSetStartQueue(&DevInst, XAie_TileLoc(0, 3), 0, DMA_S2MM, 0, 1, XAIE_DISABLE);
	}

	//Setting lock initial value for EG.conv[1][0].in[1]
	driverStatus |= XAie_LockSetValue(&DevInst, XAie_TileLoc(1, 4), XAie_LockInit(0, 2));

	//Setting buffer buf1 of EG.conv[1][0].in[1]
	{
		XAie_DmaDesc DmaInst;
		driverStatus |= XAie_DmaDescInit(&DevInst, &DmaInst, XAie_TileLoc(1, 4));
		driverStatus |= XAie_DmaSetAddrLen(&DmaInst, 0x7da0, 588);
		driverStatus |= XAie_DmaSetLock(&DmaInst, XAie_LockInit(0, -1), XAie_LockInit(1, 1));
		driverStatus |= XAie_DmaSetNextBd(&DmaInst, 1, XAIE_ENABLE);
		driverStatus |= XAie_DmaEnableBd(&DmaInst);
		driverStatus |= XAie_DmaWriteBd(&DevInst, &DmaInst, XAie_TileLoc(1, 4), 0);
	}

	//Setting buffer buf1d of EG.conv[1][0].in[1]
	{
		XAie_DmaDesc DmaInst;
		driverStatus |= XAie_DmaDescInit(&DevInst, &DmaInst, XAie_TileLoc(1, 4));
		driverStatus |= XAie_DmaSetAddrLen(&DmaInst, 0x8000, 588);
		driverStatus |= XAie_DmaSetLock(&DmaInst, XAie_LockInit(0, -1), XAie_LockInit(1, 1));
		driverStatus |= XAie_DmaSetNextBd(&DmaInst, 0, XAIE_ENABLE);
		driverStatus |= XAie_DmaEnableBd(&DmaInst);
		driverStatus |= XAie_DmaWriteBd(&DevInst, &DmaInst, XAie_TileLoc(1, 4), 1);
	}
	{
		driverStatus |= XAie_DmaChannelSetStartQueue(&DevInst, XAie_TileLoc(1, 4), 0, DMA_S2MM, 0, 1, XAIE_DISABLE);
	}

	//Setting lock initial value for EG.conv[1][1].in[0]
	driverStatus |= XAie_LockSetValue(&DevInst, XAie_TileLoc(1, 3), XAie_LockInit(1, 2));

	//Setting buffer buf13 of EG.conv[1][1].in[0]
	{
		XAie_DmaDesc DmaInst;
		driverStatus |= XAie_DmaDescInit(&DevInst, &DmaInst, XAie_TileLoc(1, 3));
		driverStatus |= XAie_DmaSetAddrLen(&DmaInst, 0x4000, 588);
		driverStatus |= XAie_DmaSetLock(&DmaInst, XAie_LockInit(1, -1), XAie_LockInit(2, 1));
		driverStatus |= XAie_DmaSetNextBd(&DmaInst, 1, XAIE_ENABLE);
		driverStatus |= XAie_DmaEnableBd(&DmaInst);
		driverStatus |= XAie_DmaWriteBd(&DevInst, &DmaInst, XAie_TileLoc(1, 3), 0);
	}

	//Setting buffer buf13d of EG.conv[1][1].in[0]
	{
		XAie_DmaDesc DmaInst;
		driverStatus |= XAie_DmaDescInit(&DevInst, &DmaInst, XAie_TileLoc(1, 3));
		driverStatus |= XAie_DmaSetAddrLen(&DmaInst, 0x8000, 588);
		driverStatus |= XAie_DmaSetLock(&DmaInst, XAie_LockInit(1, -1), XAie_LockInit(2, 1));
		driverStatus |= XAie_DmaSetNextBd(&DmaInst, 0, XAIE_ENABLE);
		driverStatus |= XAie_DmaEnableBd(&DmaInst);
		driverStatus |= XAie_DmaWriteBd(&DevInst, &DmaInst, XAie_TileLoc(1, 3), 1);
	}
	{
		driverStatus |= XAie_DmaChannelSetStartQueue(&DevInst, XAie_TileLoc(1, 3), 0, DMA_S2MM, 0, 1, XAIE_DISABLE);
	}

	//Setting lock initial value for EG.conv[1][1].in[1]
	driverStatus |= XAie_LockSetValue(&DevInst, XAie_TileLoc(1, 5), XAie_LockInit(0, 2));

	//Setting buffer buf8 of EG.conv[1][1].in[1]
	{
		XAie_DmaDesc DmaInst;
		driverStatus |= XAie_DmaDescInit(&DevInst, &DmaInst, XAie_TileLoc(1, 5));
		driverStatus |= XAie_DmaSetAddrLen(&DmaInst, 0xbda0, 588);
		driverStatus |= XAie_DmaSetLock(&DmaInst, XAie_LockInit(0, -1), XAie_LockInit(1, 1));
		driverStatus |= XAie_DmaSetNextBd(&DmaInst, 1, XAIE_ENABLE);
		driverStatus |= XAie_DmaEnableBd(&DmaInst);
		driverStatus |= XAie_DmaWriteBd(&DevInst, &DmaInst, XAie_TileLoc(1, 5), 0);
	}

	//Setting buffer buf8d of EG.conv[1][1].in[1]
	{
		XAie_DmaDesc DmaInst;
		driverStatus |= XAie_DmaDescInit(&DevInst, &DmaInst, XAie_TileLoc(1, 5));
		driverStatus |= XAie_DmaSetAddrLen(&DmaInst, 0xfd80, 588);
		driverStatus |= XAie_DmaSetLock(&DmaInst, XAie_LockInit(0, -1), XAie_LockInit(1, 1));
		driverStatus |= XAie_DmaSetNextBd(&DmaInst, 0, XAIE_ENABLE);
		driverStatus |= XAie_DmaEnableBd(&DmaInst);
		driverStatus |= XAie_DmaWriteBd(&DevInst, &DmaInst, XAie_TileLoc(1, 5), 1);
	}
	{
		driverStatus |= XAie_DmaChannelSetStartQueue(&DevInst, XAie_TileLoc(1, 5), 0, DMA_S2MM, 0, 1, XAIE_DISABLE);
	}

	//Setting lock initial value for EG.conv[2][0].in[0]
	driverStatus |= XAie_LockSetValue(&DevInst, XAie_TileLoc(2, 3), XAie_LockInit(0, 2));

	//Setting buffer buf16 of EG.conv[2][0].in[0]
	{
		XAie_DmaDesc DmaInst;
		driverStatus |= XAie_DmaDescInit(&DevInst, &DmaInst, XAie_TileLoc(2, 3));
		driverStatus |= XAie_DmaSetAddrLen(&DmaInst, 0x8000, 588);
		driverStatus |= XAie_DmaSetLock(&DmaInst, XAie_LockInit(0, -1), XAie_LockInit(1, 1));
		driverStatus |= XAie_DmaSetNextBd(&DmaInst, 1, XAIE_ENABLE);
		driverStatus |= XAie_DmaEnableBd(&DmaInst);
		driverStatus |= XAie_DmaWriteBd(&DevInst, &DmaInst, XAie_TileLoc(2, 3), 0);
	}

	//Setting buffer buf16d of EG.conv[2][0].in[0]
	{
		XAie_DmaDesc DmaInst;
		driverStatus |= XAie_DmaDescInit(&DevInst, &DmaInst, XAie_TileLoc(2, 3));
		driverStatus |= XAie_DmaSetAddrLen(&DmaInst, 0xc020, 588);
		driverStatus |= XAie_DmaSetLock(&DmaInst, XAie_LockInit(0, -1), XAie_LockInit(1, 1));
		driverStatus |= XAie_DmaSetNextBd(&DmaInst, 0, XAIE_ENABLE);
		driverStatus |= XAie_DmaEnableBd(&DmaInst);
		driverStatus |= XAie_DmaWriteBd(&DevInst, &DmaInst, XAie_TileLoc(2, 3), 1);
	}
	{
		driverStatus |= XAie_DmaChannelSetStartQueue(&DevInst, XAie_TileLoc(2, 3), 0, DMA_S2MM, 0, 1, XAIE_DISABLE);
	}

	//Setting lock initial value for EG.conv[2][0].in[1]
	driverStatus |= XAie_LockSetValue(&DevInst, XAie_TileLoc(2, 3), XAie_LockInit(2, 2));

	//Setting buffer buf2 of EG.conv[2][0].in[1]
	{
		XAie_DmaDesc DmaInst;
		driverStatus |= XAie_DmaDescInit(&DevInst, &DmaInst, XAie_TileLoc(2, 3));
		driverStatus |= XAie_DmaSetAddrLen(&DmaInst, 0x3d60, 588);
		driverStatus |= XAie_DmaSetLock(&DmaInst, XAie_LockInit(2, -1), XAie_LockInit(3, 1));
		driverStatus |= XAie_DmaSetNextBd(&DmaInst, 3, XAIE_ENABLE);
		driverStatus |= XAie_DmaEnableBd(&DmaInst);
		driverStatus |= XAie_DmaWriteBd(&DevInst, &DmaInst, XAie_TileLoc(2, 3), 2);
	}

	//Setting buffer buf2d of EG.conv[2][0].in[1]
	{
		XAie_DmaDesc DmaInst;
		driverStatus |= XAie_DmaDescInit(&DevInst, &DmaInst, XAie_TileLoc(2, 3));
		driverStatus |= XAie_DmaSetAddrLen(&DmaInst, 0x4020, 588);
		driverStatus |= XAie_DmaSetLock(&DmaInst, XAie_LockInit(2, -1), XAie_LockInit(3, 1));
		driverStatus |= XAie_DmaSetNextBd(&DmaInst, 2, XAIE_ENABLE);
		driverStatus |= XAie_DmaEnableBd(&DmaInst);
		driverStatus |= XAie_DmaWriteBd(&DevInst, &DmaInst, XAie_TileLoc(2, 3), 3);
	}
	{
		driverStatus |= XAie_DmaChannelSetStartQueue(&DevInst, XAie_TileLoc(2, 3), 1, DMA_S2MM, 2, 1, XAIE_DISABLE);
	}

	//Setting lock initial value for EG.conv[2][1].in[0]
	driverStatus |= XAie_LockSetValue(&DevInst, XAie_TileLoc(2, 5), XAie_LockInit(0, 2));

	//Setting buffer buf17 of EG.conv[2][1].in[0]
	{
		XAie_DmaDesc DmaInst;
		driverStatus |= XAie_DmaDescInit(&DevInst, &DmaInst, XAie_TileLoc(2, 5));
		driverStatus |= XAie_DmaSetAddrLen(&DmaInst, 0xc020, 588);
		driverStatus |= XAie_DmaSetLock(&DmaInst, XAie_LockInit(0, -1), XAie_LockInit(1, 1));
		driverStatus |= XAie_DmaSetNextBd(&DmaInst, 1, XAIE_ENABLE);
		driverStatus |= XAie_DmaEnableBd(&DmaInst);
		driverStatus |= XAie_DmaWriteBd(&DevInst, &DmaInst, XAie_TileLoc(2, 5), 0);
	}

	//Setting buffer buf17d of EG.conv[2][1].in[0]
	{
		XAie_DmaDesc DmaInst;
		driverStatus |= XAie_DmaDescInit(&DevInst, &DmaInst, XAie_TileLoc(2, 5));
		driverStatus |= XAie_DmaSetAddrLen(&DmaInst, 0x4000, 588);
		driverStatus |= XAie_DmaSetLock(&DmaInst, XAie_LockInit(0, -1), XAie_LockInit(1, 1));
		driverStatus |= XAie_DmaSetNextBd(&DmaInst, 0, XAIE_ENABLE);
		driverStatus |= XAie_DmaEnableBd(&DmaInst);
		driverStatus |= XAie_DmaWriteBd(&DevInst, &DmaInst, XAie_TileLoc(2, 5), 1);
	}
	{
		driverStatus |= XAie_DmaChannelSetStartQueue(&DevInst, XAie_TileLoc(2, 5), 0, DMA_S2MM, 0, 1, XAIE_DISABLE);
	}

	//Setting lock initial value for EG.conv[2][1].in[1]
	driverStatus |= XAie_LockSetValue(&DevInst, XAie_TileLoc(2, 4), XAie_LockInit(1, 2));

	//Setting buffer buf9 of EG.conv[2][1].in[1]
	{
		XAie_DmaDesc DmaInst;
		driverStatus |= XAie_DmaDescInit(&DevInst, &DmaInst, XAie_TileLoc(2, 4));
		driverStatus |= XAie_DmaSetAddrLen(&DmaInst, 0x4000, 588);
		driverStatus |= XAie_DmaSetLock(&DmaInst, XAie_LockInit(1, -1), XAie_LockInit(2, 1));
		driverStatus |= XAie_DmaSetNextBd(&DmaInst, 1, XAIE_ENABLE);
		driverStatus |= XAie_DmaEnableBd(&DmaInst);
		driverStatus |= XAie_DmaWriteBd(&DevInst, &DmaInst, XAie_TileLoc(2, 4), 0);
	}

	//Setting buffer buf9d of EG.conv[2][1].in[1]
	{
		XAie_DmaDesc DmaInst;
		driverStatus |= XAie_DmaDescInit(&DevInst, &DmaInst, XAie_TileLoc(2, 4));
		driverStatus |= XAie_DmaSetAddrLen(&DmaInst, 0x8000, 588);
		driverStatus |= XAie_DmaSetLock(&DmaInst, XAie_LockInit(1, -1), XAie_LockInit(2, 1));
		driverStatus |= XAie_DmaSetNextBd(&DmaInst, 0, XAIE_ENABLE);
		driverStatus |= XAie_DmaEnableBd(&DmaInst);
		driverStatus |= XAie_DmaWriteBd(&DevInst, &DmaInst, XAie_TileLoc(2, 4), 1);
	}
	{
		driverStatus |= XAie_DmaChannelSetStartQueue(&DevInst, XAie_TileLoc(2, 4), 0, DMA_S2MM, 0, 1, XAIE_DISABLE);
	}

	//Setting lock initial value for EG.conv[3][0].in[0]
	driverStatus |= XAie_LockSetValue(&DevInst, XAie_TileLoc(3, 3), XAie_LockInit(0, 2));

	//Setting buffer buf20 of EG.conv[3][0].in[0]
	{
		XAie_DmaDesc DmaInst;
		driverStatus |= XAie_DmaDescInit(&DevInst, &DmaInst, XAie_TileLoc(3, 3));
		driverStatus |= XAie_DmaSetAddrLen(&DmaInst, 0xbda0, 588);
		driverStatus |= XAie_DmaSetLock(&DmaInst, XAie_LockInit(0, -1), XAie_LockInit(1, 1));
		driverStatus |= XAie_DmaSetNextBd(&DmaInst, 1, XAIE_ENABLE);
		driverStatus |= XAie_DmaEnableBd(&DmaInst);
		driverStatus |= XAie_DmaWriteBd(&DevInst, &DmaInst, XAie_TileLoc(3, 3), 0);
	}

	//Setting buffer buf20d of EG.conv[3][0].in[0]
	{
		XAie_DmaDesc DmaInst;
		driverStatus |= XAie_DmaDescInit(&DevInst, &DmaInst, XAie_TileLoc(3, 3));
		driverStatus |= XAie_DmaSetAddrLen(&DmaInst, 0x40, 588);
		driverStatus |= XAie_DmaSetLock(&DmaInst, XAie_LockInit(0, -1), XAie_LockInit(1, 1));
		driverStatus |= XAie_DmaSetNextBd(&DmaInst, 0, XAIE_ENABLE);
		driverStatus |= XAie_DmaEnableBd(&DmaInst);
		driverStatus |= XAie_DmaWriteBd(&DevInst, &DmaInst, XAie_TileLoc(3, 3), 1);
	}
	{
		driverStatus |= XAie_DmaChannelSetStartQueue(&DevInst, XAie_TileLoc(3, 3), 0, DMA_S2MM, 0, 1, XAIE_DISABLE);
	}

	//Setting lock initial value for EG.conv[3][0].in[1]
	driverStatus |= XAie_LockSetValue(&DevInst, XAie_TileLoc(3, 3), XAie_LockInit(2, 2));

	//Setting buffer buf3 of EG.conv[3][0].in[1]
	{
		XAie_DmaDesc DmaInst;
		driverStatus |= XAie_DmaDescInit(&DevInst, &DmaInst, XAie_TileLoc(3, 3));
		driverStatus |= XAie_DmaSetAddrLen(&DmaInst, 0x8000, 588);
		driverStatus |= XAie_DmaSetLock(&DmaInst, XAie_LockInit(2, -1), XAie_LockInit(3, 1));
		driverStatus |= XAie_DmaSetNextBd(&DmaInst, 3, XAIE_ENABLE);
		driverStatus |= XAie_DmaEnableBd(&DmaInst);
		driverStatus |= XAie_DmaWriteBd(&DevInst, &DmaInst, XAie_TileLoc(3, 3), 2);
	}

	//Setting buffer buf3d of EG.conv[3][0].in[1]
	{
		XAie_DmaDesc DmaInst;
		driverStatus |= XAie_DmaDescInit(&DevInst, &DmaInst, XAie_TileLoc(3, 3));
		driverStatus |= XAie_DmaSetAddrLen(&DmaInst, 0xfda0, 588);
		driverStatus |= XAie_DmaSetLock(&DmaInst, XAie_LockInit(2, -1), XAie_LockInit(3, 1));
		driverStatus |= XAie_DmaSetNextBd(&DmaInst, 2, XAIE_ENABLE);
		driverStatus |= XAie_DmaEnableBd(&DmaInst);
		driverStatus |= XAie_DmaWriteBd(&DevInst, &DmaInst, XAie_TileLoc(3, 3), 3);
	}
	{
		driverStatus |= XAie_DmaChannelSetStartQueue(&DevInst, XAie_TileLoc(3, 3), 1, DMA_S2MM, 2, 1, XAIE_DISABLE);
	}

	//Setting lock initial value for EG.conv[3][1].in[0]
	driverStatus |= XAie_LockSetValue(&DevInst, XAie_TileLoc(3, 5), XAie_LockInit(0, 2));

	//Setting buffer buf21 of EG.conv[3][1].in[0]
	{
		XAie_DmaDesc DmaInst;
		driverStatus |= XAie_DmaDescInit(&DevInst, &DmaInst, XAie_TileLoc(3, 5));
		driverStatus |= XAie_DmaSetAddrLen(&DmaInst, 0x4000, 588);
		driverStatus |= XAie_DmaSetLock(&DmaInst, XAie_LockInit(0, -1), XAie_LockInit(1, 1));
		driverStatus |= XAie_DmaSetNextBd(&DmaInst, 1, XAIE_ENABLE);
		driverStatus |= XAie_DmaEnableBd(&DmaInst);
		driverStatus |= XAie_DmaWriteBd(&DevInst, &DmaInst, XAie_TileLoc(3, 5), 0);
	}

	//Setting buffer buf21d of EG.conv[3][1].in[0]
	{
		XAie_DmaDesc DmaInst;
		driverStatus |= XAie_DmaDescInit(&DevInst, &DmaInst, XAie_TileLoc(3, 5));
		driverStatus |= XAie_DmaSetAddrLen(&DmaInst, 0x40, 588);
		driverStatus |= XAie_DmaSetLock(&DmaInst, XAie_LockInit(0, -1), XAie_LockInit(1, 1));
		driverStatus |= XAie_DmaSetNextBd(&DmaInst, 0, XAIE_ENABLE);
		driverStatus |= XAie_DmaEnableBd(&DmaInst);
		driverStatus |= XAie_DmaWriteBd(&DevInst, &DmaInst, XAie_TileLoc(3, 5), 1);
	}
	{
		driverStatus |= XAie_DmaChannelSetStartQueue(&DevInst, XAie_TileLoc(3, 5), 0, DMA_S2MM, 0, 1, XAIE_DISABLE);
	}

	//Setting lock initial value for EG.conv[3][1].in[1]
	driverStatus |= XAie_LockSetValue(&DevInst, XAie_TileLoc(3, 4), XAie_LockInit(0, 2));

	//Setting buffer buf10 of EG.conv[3][1].in[1]
	{
		XAie_DmaDesc DmaInst;
		driverStatus |= XAie_DmaDescInit(&DevInst, &DmaInst, XAie_TileLoc(3, 4));
		driverStatus |= XAie_DmaSetAddrLen(&DmaInst, 0x8000, 588);
		driverStatus |= XAie_DmaSetLock(&DmaInst, XAie_LockInit(0, -1), XAie_LockInit(1, 1));
		driverStatus |= XAie_DmaSetNextBd(&DmaInst, 1, XAIE_ENABLE);
		driverStatus |= XAie_DmaEnableBd(&DmaInst);
		driverStatus |= XAie_DmaWriteBd(&DevInst, &DmaInst, XAie_TileLoc(3, 4), 0);
	}

	//Setting buffer buf10d of EG.conv[3][1].in[1]
	{
		XAie_DmaDesc DmaInst;
		driverStatus |= XAie_DmaDescInit(&DevInst, &DmaInst, XAie_TileLoc(3, 4));
		driverStatus |= XAie_DmaSetAddrLen(&DmaInst, 0xc000, 588);
		driverStatus |= XAie_DmaSetLock(&DmaInst, XAie_LockInit(0, -1), XAie_LockInit(1, 1));
		driverStatus |= XAie_DmaSetNextBd(&DmaInst, 0, XAIE_ENABLE);
		driverStatus |= XAie_DmaEnableBd(&DmaInst);
		driverStatus |= XAie_DmaWriteBd(&DevInst, &DmaInst, XAie_TileLoc(3, 4), 1);
	}
	{
		driverStatus |= XAie_DmaChannelSetStartQueue(&DevInst, XAie_TileLoc(3, 4), 0, DMA_S2MM, 0, 1, XAIE_DISABLE);
	}

	//Setting lock initial value for EG.conv[0][0].in[0]
	driverStatus |= XAie_LockSetValue(&DevInst, XAie_TileLoc(0, 4), XAie_LockInit(0, 2));

	//Setting buffer buf4 of EG.conv[0][0].in[0]
	{
		XAie_DmaDesc DmaInst;
		driverStatus |= XAie_DmaDescInit(&DevInst, &DmaInst, XAie_TileLoc(0, 4));
		driverStatus |= XAie_DmaSetAddrLen(&DmaInst, 0xfda0, 588);
		driverStatus |= XAie_DmaSetLock(&DmaInst, XAie_LockInit(0, -1), XAie_LockInit(1, 1));
		driverStatus |= XAie_DmaSetNextBd(&DmaInst, 1, XAIE_ENABLE);
		driverStatus |= XAie_DmaEnableBd(&DmaInst);
		driverStatus |= XAie_DmaWriteBd(&DevInst, &DmaInst, XAie_TileLoc(0, 4), 0);
	}

	//Setting buffer buf4d of EG.conv[0][0].in[0]
	{
		XAie_DmaDesc DmaInst;
		driverStatus |= XAie_DmaDescInit(&DevInst, &DmaInst, XAie_TileLoc(0, 4));
		driverStatus |= XAie_DmaSetAddrLen(&DmaInst, 0xbda0, 588);
		driverStatus |= XAie_DmaSetLock(&DmaInst, XAie_LockInit(0, -1), XAie_LockInit(1, 1));
		driverStatus |= XAie_DmaSetNextBd(&DmaInst, 0, XAIE_ENABLE);
		driverStatus |= XAie_DmaEnableBd(&DmaInst);
		driverStatus |= XAie_DmaWriteBd(&DevInst, &DmaInst, XAie_TileLoc(0, 4), 1);
	}
	{
		driverStatus |= XAie_DmaChannelSetStartQueue(&DevInst, XAie_TileLoc(0, 4), 0, DMA_S2MM, 0, 1, XAIE_DISABLE);
	}

	//Setting lock initial value for EG.conv[0][0].in[1]
	driverStatus |= XAie_LockSetValue(&DevInst, XAie_TileLoc(0, 4), XAie_LockInit(2, 2));

	//Setting buffer buf0 of EG.conv[0][0].in[1]
	{
		XAie_DmaDesc DmaInst;
		driverStatus |= XAie_DmaDescInit(&DevInst, &DmaInst, XAie_TileLoc(0, 4));
		driverStatus |= XAie_DmaSetAddrLen(&DmaInst, 0x7da0, 588);
		driverStatus |= XAie_DmaSetLock(&DmaInst, XAie_LockInit(2, -1), XAie_LockInit(3, 1));
		driverStatus |= XAie_DmaSetNextBd(&DmaInst, 3, XAIE_ENABLE);
		driverStatus |= XAie_DmaEnableBd(&DmaInst);
		driverStatus |= XAie_DmaWriteBd(&DevInst, &DmaInst, XAie_TileLoc(0, 4), 2);
	}

	//Setting buffer buf0d of EG.conv[0][0].in[1]
	{
		XAie_DmaDesc DmaInst;
		driverStatus |= XAie_DmaDescInit(&DevInst, &DmaInst, XAie_TileLoc(0, 4));
		driverStatus |= XAie_DmaSetAddrLen(&DmaInst, 0x0, 588);
		driverStatus |= XAie_DmaSetLock(&DmaInst, XAie_LockInit(2, -1), XAie_LockInit(3, 1));
		driverStatus |= XAie_DmaSetNextBd(&DmaInst, 2, XAIE_ENABLE);
		driverStatus |= XAie_DmaEnableBd(&DmaInst);
		driverStatus |= XAie_DmaWriteBd(&DevInst, &DmaInst, XAie_TileLoc(0, 4), 3);
	}
	{
		driverStatus |= XAie_DmaChannelSetStartQueue(&DevInst, XAie_TileLoc(0, 4), 1, DMA_S2MM, 2, 1, XAIE_DISABLE);
	}

	//Setting lock initial value for EG.conv[0][1].in[0]
	driverStatus |= XAie_LockSetValue(&DevInst, XAie_TileLoc(0, 5), XAie_LockInit(0, 2));

	//Setting buffer buf5 of EG.conv[0][1].in[0]
	{
		XAie_DmaDesc DmaInst;
		driverStatus |= XAie_DmaDescInit(&DevInst, &DmaInst, XAie_TileLoc(0, 5));
		driverStatus |= XAie_DmaSetAddrLen(&DmaInst, 0x0, 588);
		driverStatus |= XAie_DmaSetLock(&DmaInst, XAie_LockInit(0, -1), XAie_LockInit(1, 1));
		driverStatus |= XAie_DmaSetNextBd(&DmaInst, 1, XAIE_ENABLE);
		driverStatus |= XAie_DmaEnableBd(&DmaInst);
		driverStatus |= XAie_DmaWriteBd(&DevInst, &DmaInst, XAie_TileLoc(0, 5), 0);
	}

	//Setting buffer buf5d of EG.conv[0][1].in[0]
	{
		XAie_DmaDesc DmaInst;
		driverStatus |= XAie_DmaDescInit(&DevInst, &DmaInst, XAie_TileLoc(0, 5));
		driverStatus |= XAie_DmaSetAddrLen(&DmaInst, 0x8000, 588);
		driverStatus |= XAie_DmaSetLock(&DmaInst, XAie_LockInit(0, -1), XAie_LockInit(1, 1));
		driverStatus |= XAie_DmaSetNextBd(&DmaInst, 0, XAIE_ENABLE);
		driverStatus |= XAie_DmaEnableBd(&DmaInst);
		driverStatus |= XAie_DmaWriteBd(&DevInst, &DmaInst, XAie_TileLoc(0, 5), 1);
	}
	{
		driverStatus |= XAie_DmaChannelSetStartQueue(&DevInst, XAie_TileLoc(0, 5), 0, DMA_S2MM, 0, 1, XAIE_DISABLE);
	}

	//Setting lock initial value for EG.conv[0][1].in[1]
	driverStatus |= XAie_LockSetValue(&DevInst, XAie_TileLoc(0, 5), XAie_LockInit(2, 2));

	//Setting buffer buf7 of EG.conv[0][1].in[1]
	{
		XAie_DmaDesc DmaInst;
		driverStatus |= XAie_DmaDescInit(&DevInst, &DmaInst, XAie_TileLoc(0, 5));
		driverStatus |= XAie_DmaSetAddrLen(&DmaInst, 0xc020, 588);
		driverStatus |= XAie_DmaSetLock(&DmaInst, XAie_LockInit(2, -1), XAie_LockInit(3, 1));
		driverStatus |= XAie_DmaSetNextBd(&DmaInst, 3, XAIE_ENABLE);
		driverStatus |= XAie_DmaEnableBd(&DmaInst);
		driverStatus |= XAie_DmaWriteBd(&DevInst, &DmaInst, XAie_TileLoc(0, 5), 2);
	}

	//Setting buffer buf7d of EG.conv[0][1].in[1]
	{
		XAie_DmaDesc DmaInst;
		driverStatus |= XAie_DmaDescInit(&DevInst, &DmaInst, XAie_TileLoc(0, 5));
		driverStatus |= XAie_DmaSetAddrLen(&DmaInst, 0x4000, 588);
		driverStatus |= XAie_DmaSetLock(&DmaInst, XAie_LockInit(2, -1), XAie_LockInit(3, 1));
		driverStatus |= XAie_DmaSetNextBd(&DmaInst, 2, XAIE_ENABLE);
		driverStatus |= XAie_DmaEnableBd(&DmaInst);
		driverStatus |= XAie_DmaWriteBd(&DevInst, &DmaInst, XAie_TileLoc(0, 5), 3);
	}
	{
		driverStatus |= XAie_DmaChannelSetStartQueue(&DevInst, XAie_TileLoc(0, 5), 1, DMA_S2MM, 2, 1, XAIE_DISABLE);
	}

	//Setting lock initial value for EG.conv[1][0].out[0]
	driverStatus |= XAie_LockSetValue(&DevInst, XAie_TileLoc(1, 4), XAie_LockInit(4, 2));

	//Setting buffer buf14 of EG.conv[1][0].out[0]
	{
		XAie_DmaDesc DmaInst;
		driverStatus |= XAie_DmaDescInit(&DevInst, &DmaInst, XAie_TileLoc(1, 4));
		driverStatus |= XAie_DmaSetAddrLen(&DmaInst, 0x0, 32);
		driverStatus |= XAie_DmaSetLock(&DmaInst, XAie_LockInit(5, -1), XAie_LockInit(4, 1));
		driverStatus |= XAie_DmaSetNextBd(&DmaInst, 3, XAIE_ENABLE);
		driverStatus |= XAie_DmaSetPkt(&DmaInst, {.PktId=0, .PktType=0});
		driverStatus |= XAie_DmaEnableBd(&DmaInst);
		driverStatus |= XAie_DmaWriteBd(&DevInst, &DmaInst, XAie_TileLoc(1, 4), 2);
	}

	//Setting buffer buf14d of EG.conv[1][0].out[0]
	{
		XAie_DmaDesc DmaInst;
		driverStatus |= XAie_DmaDescInit(&DevInst, &DmaInst, XAie_TileLoc(1, 4));
		driverStatus |= XAie_DmaSetAddrLen(&DmaInst, 0xbfe0, 32);
		driverStatus |= XAie_DmaSetLock(&DmaInst, XAie_LockInit(5, -1), XAie_LockInit(4, 1));
		driverStatus |= XAie_DmaSetNextBd(&DmaInst, 2, XAIE_ENABLE);
		driverStatus |= XAie_DmaSetPkt(&DmaInst, {.PktId=0, .PktType=0});
		driverStatus |= XAie_DmaEnableBd(&DmaInst);
		driverStatus |= XAie_DmaWriteBd(&DevInst, &DmaInst, XAie_TileLoc(1, 4), 3);
	}
	{
		driverStatus |= XAie_DmaChannelSetStartQueue(&DevInst, XAie_TileLoc(1, 4), 0, DMA_MM2S, 2, 1, XAIE_DISABLE);
	}

	//Setting lock initial value for EG.conv[1][1].out[0]
	driverStatus |= XAie_LockSetValue(&DevInst, XAie_TileLoc(1, 5), XAie_LockInit(4, 2));

	//Setting buffer buf15 of EG.conv[1][1].out[0]
	{
		XAie_DmaDesc DmaInst;
		driverStatus |= XAie_DmaDescInit(&DevInst, &DmaInst, XAie_TileLoc(1, 5));
		driverStatus |= XAie_DmaSetAddrLen(&DmaInst, 0x4000, 32);
		driverStatus |= XAie_DmaSetLock(&DmaInst, XAie_LockInit(5, -1), XAie_LockInit(4, 1));
		driverStatus |= XAie_DmaSetNextBd(&DmaInst, 3, XAIE_ENABLE);
		driverStatus |= XAie_DmaSetPkt(&DmaInst, {.PktId=1, .PktType=0});
		driverStatus |= XAie_DmaEnableBd(&DmaInst);
		driverStatus |= XAie_DmaWriteBd(&DevInst, &DmaInst, XAie_TileLoc(1, 5), 2);
	}

	//Setting buffer buf15d of EG.conv[1][1].out[0]
	{
		XAie_DmaDesc DmaInst;
		driverStatus |= XAie_DmaDescInit(&DevInst, &DmaInst, XAie_TileLoc(1, 5));
		driverStatus |= XAie_DmaSetAddrLen(&DmaInst, 0x84c0, 32);
		driverStatus |= XAie_DmaSetLock(&DmaInst, XAie_LockInit(5, -1), XAie_LockInit(4, 1));
		driverStatus |= XAie_DmaSetNextBd(&DmaInst, 2, XAIE_ENABLE);
		driverStatus |= XAie_DmaSetPkt(&DmaInst, {.PktId=1, .PktType=0});
		driverStatus |= XAie_DmaEnableBd(&DmaInst);
		driverStatus |= XAie_DmaWriteBd(&DevInst, &DmaInst, XAie_TileLoc(1, 5), 3);
	}
	{
		driverStatus |= XAie_DmaChannelSetStartQueue(&DevInst, XAie_TileLoc(1, 5), 0, DMA_MM2S, 2, 1, XAIE_DISABLE);
	}

	//Setting lock initial value for EG.conv[2][0].out[0]
	driverStatus |= XAie_LockSetValue(&DevInst, XAie_TileLoc(2, 3), XAie_LockInit(6, 2));

	//Setting buffer buf18 of EG.conv[2][0].out[0]
	{
		XAie_DmaDesc DmaInst;
		driverStatus |= XAie_DmaDescInit(&DevInst, &DmaInst, XAie_TileLoc(2, 3));
		driverStatus |= XAie_DmaSetAddrLen(&DmaInst, 0xc000, 32);
		driverStatus |= XAie_DmaSetLock(&DmaInst, XAie_LockInit(7, -1), XAie_LockInit(6, 1));
		driverStatus |= XAie_DmaSetNextBd(&DmaInst, 5, XAIE_ENABLE);
		driverStatus |= XAie_DmaSetPkt(&DmaInst, {.PktId=0, .PktType=0});
		driverStatus |= XAie_DmaEnableBd(&DmaInst);
		driverStatus |= XAie_DmaWriteBd(&DevInst, &DmaInst, XAie_TileLoc(2, 3), 4);
	}

	//Setting buffer buf18d of EG.conv[2][0].out[0]
	{
		XAie_DmaDesc DmaInst;
		driverStatus |= XAie_DmaDescInit(&DevInst, &DmaInst, XAie_TileLoc(2, 3));
		driverStatus |= XAie_DmaSetAddrLen(&DmaInst, 0x4000, 32);
		driverStatus |= XAie_DmaSetLock(&DmaInst, XAie_LockInit(7, -1), XAie_LockInit(6, 1));
		driverStatus |= XAie_DmaSetNextBd(&DmaInst, 4, XAIE_ENABLE);
		driverStatus |= XAie_DmaSetPkt(&DmaInst, {.PktId=0, .PktType=0});
		driverStatus |= XAie_DmaEnableBd(&DmaInst);
		driverStatus |= XAie_DmaWriteBd(&DevInst, &DmaInst, XAie_TileLoc(2, 3), 5);
	}
	{
		driverStatus |= XAie_DmaChannelSetStartQueue(&DevInst, XAie_TileLoc(2, 3), 0, DMA_MM2S, 4, 1, XAIE_DISABLE);
	}

	//Setting lock initial value for EG.conv[2][1].out[0]
	driverStatus |= XAie_LockSetValue(&DevInst, XAie_TileLoc(2, 5), XAie_LockInit(5, 2));

	//Setting buffer buf19 of EG.conv[2][1].out[0]
	{
		XAie_DmaDesc DmaInst;
		driverStatus |= XAie_DmaDescInit(&DevInst, &DmaInst, XAie_TileLoc(2, 5));
		driverStatus |= XAie_DmaSetAddrLen(&DmaInst, 0xbfe0, 32);
		driverStatus |= XAie_DmaSetLock(&DmaInst, XAie_LockInit(6, -1), XAie_LockInit(5, 1));
		driverStatus |= XAie_DmaSetNextBd(&DmaInst, 3, XAIE_ENABLE);
		driverStatus |= XAie_DmaSetPkt(&DmaInst, {.PktId=1, .PktType=0});
		driverStatus |= XAie_DmaEnableBd(&DmaInst);
		driverStatus |= XAie_DmaWriteBd(&DevInst, &DmaInst, XAie_TileLoc(2, 5), 2);
	}

	//Setting buffer buf19d of EG.conv[2][1].out[0]
	{
		XAie_DmaDesc DmaInst;
		driverStatus |= XAie_DmaDescInit(&DevInst, &DmaInst, XAie_TileLoc(2, 5));
		driverStatus |= XAie_DmaSetAddrLen(&DmaInst, 0x3fe0, 32);
		driverStatus |= XAie_DmaSetLock(&DmaInst, XAie_LockInit(6, -1), XAie_LockInit(5, 1));
		driverStatus |= XAie_DmaSetNextBd(&DmaInst, 2, XAIE_ENABLE);
		driverStatus |= XAie_DmaSetPkt(&DmaInst, {.PktId=1, .PktType=0});
		driverStatus |= XAie_DmaEnableBd(&DmaInst);
		driverStatus |= XAie_DmaWriteBd(&DevInst, &DmaInst, XAie_TileLoc(2, 5), 3);
	}
	{
		driverStatus |= XAie_DmaChannelSetStartQueue(&DevInst, XAie_TileLoc(2, 5), 0, DMA_MM2S, 2, 1, XAIE_DISABLE);
	}

	//Setting lock initial value for EG.conv[3][0].out[0]
	driverStatus |= XAie_LockSetValue(&DevInst, XAie_TileLoc(3, 3), XAie_LockInit(7, 2));

	//Setting buffer buf22 of EG.conv[3][0].out[0]
	{
		XAie_DmaDesc DmaInst;
		driverStatus |= XAie_DmaDescInit(&DevInst, &DmaInst, XAie_TileLoc(3, 3));
		driverStatus |= XAie_DmaSetAddrLen(&DmaInst, 0x3fe0, 32);
		driverStatus |= XAie_DmaSetLock(&DmaInst, XAie_LockInit(8, -1), XAie_LockInit(7, 1));
		driverStatus |= XAie_DmaSetNextBd(&DmaInst, 5, XAIE_ENABLE);
		driverStatus |= XAie_DmaSetPkt(&DmaInst, {.PktId=0, .PktType=0});
		driverStatus |= XAie_DmaEnableBd(&DmaInst);
		driverStatus |= XAie_DmaWriteBd(&DevInst, &DmaInst, XAie_TileLoc(3, 3), 4);
	}

	//Setting buffer buf22d of EG.conv[3][0].out[0]
	{
		XAie_DmaDesc DmaInst;
		driverStatus |= XAie_DmaDescInit(&DevInst, &DmaInst, XAie_TileLoc(3, 3));
		driverStatus |= XAie_DmaSetAddrLen(&DmaInst, 0x7fe0, 32);
		driverStatus |= XAie_DmaSetLock(&DmaInst, XAie_LockInit(8, -1), XAie_LockInit(7, 1));
		driverStatus |= XAie_DmaSetNextBd(&DmaInst, 4, XAIE_ENABLE);
		driverStatus |= XAie_DmaSetPkt(&DmaInst, {.PktId=0, .PktType=0});
		driverStatus |= XAie_DmaEnableBd(&DmaInst);
		driverStatus |= XAie_DmaWriteBd(&DevInst, &DmaInst, XAie_TileLoc(3, 3), 5);
	}
	{
		driverStatus |= XAie_DmaChannelSetStartQueue(&DevInst, XAie_TileLoc(3, 3), 0, DMA_MM2S, 4, 1, XAIE_DISABLE);
	}

	//Setting lock initial value for EG.conv[3][1].out[0]
	driverStatus |= XAie_LockSetValue(&DevInst, XAie_TileLoc(3, 5), XAie_LockInit(5, 2));

	//Setting buffer buf23 of EG.conv[3][1].out[0]
	{
		XAie_DmaDesc DmaInst;
		driverStatus |= XAie_DmaDescInit(&DevInst, &DmaInst, XAie_TileLoc(3, 5));
		driverStatus |= XAie_DmaSetAddrLen(&DmaInst, 0xc000, 32);
		driverStatus |= XAie_DmaSetLock(&DmaInst, XAie_LockInit(6, -1), XAie_LockInit(5, 1));
		driverStatus |= XAie_DmaSetNextBd(&DmaInst, 3, XAIE_ENABLE);
		driverStatus |= XAie_DmaSetPkt(&DmaInst, {.PktId=1, .PktType=0});
		driverStatus |= XAie_DmaEnableBd(&DmaInst);
		driverStatus |= XAie_DmaWriteBd(&DevInst, &DmaInst, XAie_TileLoc(3, 5), 2);
	}

	//Setting buffer buf23d of EG.conv[3][1].out[0]
	{
		XAie_DmaDesc DmaInst;
		driverStatus |= XAie_DmaDescInit(&DevInst, &DmaInst, XAie_TileLoc(3, 5));
		driverStatus |= XAie_DmaSetAddrLen(&DmaInst, 0x3fe0, 32);
		driverStatus |= XAie_DmaSetLock(&DmaInst, XAie_LockInit(6, -1), XAie_LockInit(5, 1));
		driverStatus |= XAie_DmaSetNextBd(&DmaInst, 2, XAIE_ENABLE);
		driverStatus |= XAie_DmaSetPkt(&DmaInst, {.PktId=1, .PktType=0});
		driverStatus |= XAie_DmaEnableBd(&DmaInst);
		driverStatus |= XAie_DmaWriteBd(&DevInst, &DmaInst, XAie_TileLoc(3, 5), 3);
	}
	{
		driverStatus |= XAie_DmaChannelSetStartQueue(&DevInst, XAie_TileLoc(3, 5), 0, DMA_MM2S, 2, 1, XAIE_DISABLE);
	}

	//Setting lock initial value for EG.conv[0][0].out[0]
	driverStatus |= XAie_LockSetValue(&DevInst, XAie_TileLoc(0, 4), XAie_LockInit(7, 2));

	//Setting buffer buf6 of EG.conv[0][0].out[0]
	{
		XAie_DmaDesc DmaInst;
		driverStatus |= XAie_DmaDescInit(&DevInst, &DmaInst, XAie_TileLoc(0, 4));
		driverStatus |= XAie_DmaSetAddrLen(&DmaInst, 0xbd80, 32);
		driverStatus |= XAie_DmaSetLock(&DmaInst, XAie_LockInit(8, -1), XAie_LockInit(7, 1));
		driverStatus |= XAie_DmaSetNextBd(&DmaInst, 5, XAIE_ENABLE);
		driverStatus |= XAie_DmaSetPkt(&DmaInst, {.PktId=0, .PktType=0});
		driverStatus |= XAie_DmaEnableBd(&DmaInst);
		driverStatus |= XAie_DmaWriteBd(&DevInst, &DmaInst, XAie_TileLoc(0, 4), 4);
	}

	//Setting buffer buf6d of EG.conv[0][0].out[0]
	{
		XAie_DmaDesc DmaInst;
		driverStatus |= XAie_DmaDescInit(&DevInst, &DmaInst, XAie_TileLoc(0, 4));
		driverStatus |= XAie_DmaSetAddrLen(&DmaInst, 0xfd80, 32);
		driverStatus |= XAie_DmaSetLock(&DmaInst, XAie_LockInit(8, -1), XAie_LockInit(7, 1));
		driverStatus |= XAie_DmaSetNextBd(&DmaInst, 4, XAIE_ENABLE);
		driverStatus |= XAie_DmaSetPkt(&DmaInst, {.PktId=0, .PktType=0});
		driverStatus |= XAie_DmaEnableBd(&DmaInst);
		driverStatus |= XAie_DmaWriteBd(&DevInst, &DmaInst, XAie_TileLoc(0, 4), 5);
	}
	{
		driverStatus |= XAie_DmaChannelSetStartQueue(&DevInst, XAie_TileLoc(0, 4), 0, DMA_MM2S, 4, 1, XAIE_DISABLE);
	}

	//Setting lock initial value for EG.conv[0][1].out[0]
	driverStatus |= XAie_LockSetValue(&DevInst, XAie_TileLoc(0, 5), XAie_LockInit(6, 2));

	//Setting buffer buf11 of EG.conv[0][1].out[0]
	{
		XAie_DmaDesc DmaInst;
		driverStatus |= XAie_DmaDescInit(&DevInst, &DmaInst, XAie_TileLoc(0, 5));
		driverStatus |= XAie_DmaSetAddrLen(&DmaInst, 0xbfe0, 32);
		driverStatus |= XAie_DmaSetLock(&DmaInst, XAie_LockInit(7, -1), XAie_LockInit(6, 1));
		driverStatus |= XAie_DmaSetNextBd(&DmaInst, 5, XAIE_ENABLE);
		driverStatus |= XAie_DmaSetPkt(&DmaInst, {.PktId=1, .PktType=0});
		driverStatus |= XAie_DmaEnableBd(&DmaInst);
		driverStatus |= XAie_DmaWriteBd(&DevInst, &DmaInst, XAie_TileLoc(0, 5), 4);
	}

	//Setting buffer buf11d of EG.conv[0][1].out[0]
	{
		XAie_DmaDesc DmaInst;
		driverStatus |= XAie_DmaDescInit(&DevInst, &DmaInst, XAie_TileLoc(0, 5));
		driverStatus |= XAie_DmaSetAddrLen(&DmaInst, 0x7fe0, 32);
		driverStatus |= XAie_DmaSetLock(&DmaInst, XAie_LockInit(7, -1), XAie_LockInit(6, 1));
		driverStatus |= XAie_DmaSetNextBd(&DmaInst, 4, XAIE_ENABLE);
		driverStatus |= XAie_DmaSetPkt(&DmaInst, {.PktId=1, .PktType=0});
		driverStatus |= XAie_DmaEnableBd(&DmaInst);
		driverStatus |= XAie_DmaWriteBd(&DevInst, &DmaInst, XAie_TileLoc(0, 5), 5);
	}
	{
		driverStatus |= XAie_DmaChannelSetStartQueue(&DevInst, XAie_TileLoc(0, 5), 0, DMA_MM2S, 4, 1, XAIE_DISABLE);
	}

	//Setting memory tile DMA for EG.input_weight[0].in[0]
	{
		XAie_DmaDesc DmaInst;
		driverStatus |= XAie_DmaDescInit(&DevInst, &DmaInst, XAie_TileLoc(3, 1));
		XAie_DmaDimDesc aie2DmaDimDesc[1] = {{.AieMlDimDesc = {1, 0}}, };
		XAie_DmaTensor aie2DmaTensor = {1, aie2DmaDimDesc};
		driverStatus |= XAie_DmaSetMultiDimAddr(&DmaInst, &aie2DmaTensor, 524288, 4704); //adjust address with 524288 offset to refer to memory space in local memory tile
		driverStatus |= XAie_DmaSetLock(&DmaInst, XAie_LockInit(69, 0), XAie_LockInit(68, 1)); //adjust lock id with 64 offset to refer to local memory tile lock
		driverStatus |= XAie_DmaSetNextBd(&DmaInst, 1, XAIE_ENABLE);
		driverStatus |= XAie_DmaEnableBd(&DmaInst);
		driverStatus |= XAie_DmaWriteBd(&DevInst, &DmaInst, XAie_TileLoc(3, 1), 0);
	}
	{
		XAie_DmaDesc DmaInst;
		driverStatus |= XAie_DmaDescInit(&DevInst, &DmaInst, XAie_TileLoc(3, 1));
		XAie_DmaDimDesc aie2DmaDimDesc[1] = {{.AieMlDimDesc = {1, 0}}, };
		XAie_DmaTensor aie2DmaTensor = {1, aie2DmaDimDesc};
		driverStatus |= XAie_DmaSetMultiDimAddr(&DmaInst, &aie2DmaTensor, 524288, 4704); //adjust address with 524288 offset to refer to memory space in local memory tile
		driverStatus |= XAie_DmaSetLock(&DmaInst, XAie_LockInit(69, 1), XAie_LockInit(68, -1)); //adjust lock id with 64 offset to refer to local memory tile lock
		driverStatus |= XAie_DmaSetNextBd(&DmaInst, 0, XAIE_ENABLE);
		driverStatus |= XAie_DmaEnableBd(&DmaInst);
		driverStatus |= XAie_DmaWriteBd(&DevInst, &DmaInst, XAie_TileLoc(3, 1), 1);
	}
	{
		XAie_DmaDeclareQueueConfig(startQueueDesc, 0, 1, XAIE_DISABLE, XAIE_DISABLE);
		driverStatus |= XAie_DmaChannelSetStartQueueGeneric(&DevInst, XAie_TileLoc(3, 1), 0, DMA_S2MM, &startQueueDesc);
	}

	//Setting memory tile DMA for EG.input_weight[0].out[0]
	{
		XAie_DmaDesc DmaInst;
		driverStatus |= XAie_DmaDescInit(&DevInst, &DmaInst, XAie_TileLoc(3, 1));
		XAie_DmaDimDesc aie2DmaDimDesc[2] = {{.AieMlDimDesc = {1, 147}}, {.AieMlDimDesc = {147, 8}}, };
		XAie_DmaTensor aie2DmaTensor = {2, aie2DmaDimDesc};
		driverStatus |= XAie_DmaSetMultiDimAddr(&DmaInst, &aie2DmaTensor, 524288, 4704); //adjust address with 524288 offset to refer to memory space in local memory tile
		driverStatus |= XAie_DmaSetLock(&DmaInst, XAie_LockInit(68, 1), XAie_LockInit(69, 1)); //adjust lock id with 64 offset to refer to local memory tile lock
		driverStatus |= XAie_DmaSetNextBd(&DmaInst, 3, XAIE_ENABLE);
		driverStatus |= XAie_DmaEnableBd(&DmaInst);
		driverStatus |= XAie_DmaWriteBd(&DevInst, &DmaInst, XAie_TileLoc(3, 1), 2);
	}
	{
		XAie_DmaDesc DmaInst;
		driverStatus |= XAie_DmaDescInit(&DevInst, &DmaInst, XAie_TileLoc(3, 1));
		XAie_DmaDimDesc aie2DmaDimDesc[2] = {{.AieMlDimDesc = {1, 147}}, {.AieMlDimDesc = {147, 8}}, };
		XAie_DmaTensor aie2DmaTensor = {2, aie2DmaDimDesc};
		driverStatus |= XAie_DmaSetMultiDimAddr(&DmaInst, &aie2DmaTensor, 524288, 4704); //adjust address with 524288 offset to refer to memory space in local memory tile
		driverStatus |= XAie_DmaSetLock(&DmaInst, XAie_LockInit(68, 0), XAie_LockInit(69, -1)); //adjust lock id with 64 offset to refer to local memory tile lock
		driverStatus |= XAie_DmaSetNextBd(&DmaInst, 2, XAIE_ENABLE);
		driverStatus |= XAie_DmaEnableBd(&DmaInst);
		driverStatus |= XAie_DmaWriteBd(&DevInst, &DmaInst, XAie_TileLoc(3, 1), 3);
	}
	{
		driverStatus |= XAie_DmaChannelSetStartQueue(&DevInst, XAie_TileLoc(3, 1), 0, DMA_MM2S, 2, 1, XAIE_DISABLE);
	}

	//Setting memory tile DMA for EG.input_weight[1].in[0]
	{
		XAie_DmaDesc DmaInst;
		driverStatus |= XAie_DmaDescInit(&DevInst, &DmaInst, XAie_TileLoc(2, 2));
		XAie_DmaDimDesc aie2DmaDimDesc[1] = {{.AieMlDimDesc = {1, 0}}, };
		XAie_DmaTensor aie2DmaTensor = {1, aie2DmaDimDesc};
		driverStatus |= XAie_DmaSetMultiDimAddr(&DmaInst, &aie2DmaTensor, 552352, 4704); //adjust address with 524288 offset to refer to memory space in local memory tile
		driverStatus |= XAie_DmaSetLock(&DmaInst, XAie_LockInit(67, 0), XAie_LockInit(66, 1)); //adjust lock id with 64 offset to refer to local memory tile lock
		driverStatus |= XAie_DmaSetNextBd(&DmaInst, 1, XAIE_ENABLE);
		driverStatus |= XAie_DmaEnableBd(&DmaInst);
		driverStatus |= XAie_DmaWriteBd(&DevInst, &DmaInst, XAie_TileLoc(2, 2), 0);
	}
	{
		XAie_DmaDesc DmaInst;
		driverStatus |= XAie_DmaDescInit(&DevInst, &DmaInst, XAie_TileLoc(2, 2));
		XAie_DmaDimDesc aie2DmaDimDesc[1] = {{.AieMlDimDesc = {1, 0}}, };
		XAie_DmaTensor aie2DmaTensor = {1, aie2DmaDimDesc};
		driverStatus |= XAie_DmaSetMultiDimAddr(&DmaInst, &aie2DmaTensor, 552352, 4704); //adjust address with 524288 offset to refer to memory space in local memory tile
		driverStatus |= XAie_DmaSetLock(&DmaInst, XAie_LockInit(67, 1), XAie_LockInit(66, -1)); //adjust lock id with 64 offset to refer to local memory tile lock
		driverStatus |= XAie_DmaSetNextBd(&DmaInst, 0, XAIE_ENABLE);
		driverStatus |= XAie_DmaEnableBd(&DmaInst);
		driverStatus |= XAie_DmaWriteBd(&DevInst, &DmaInst, XAie_TileLoc(2, 2), 1);
	}
	{
		XAie_DmaDeclareQueueConfig(startQueueDesc, 0, 1, XAIE_DISABLE, XAIE_DISABLE);
		driverStatus |= XAie_DmaChannelSetStartQueueGeneric(&DevInst, XAie_TileLoc(2, 2), 0, DMA_S2MM, &startQueueDesc);
	}

	//Setting memory tile DMA for EG.input_weight[1].out[0]
	{
		XAie_DmaDesc DmaInst;
		driverStatus |= XAie_DmaDescInit(&DevInst, &DmaInst, XAie_TileLoc(2, 2));
		XAie_DmaDimDesc aie2DmaDimDesc[2] = {{.AieMlDimDesc = {1, 147}}, {.AieMlDimDesc = {147, 8}}, };
		XAie_DmaTensor aie2DmaTensor = {2, aie2DmaDimDesc};
		driverStatus |= XAie_DmaSetMultiDimAddr(&DmaInst, &aie2DmaTensor, 552352, 4704); //adjust address with 524288 offset to refer to memory space in local memory tile
		driverStatus |= XAie_DmaSetLock(&DmaInst, XAie_LockInit(66, 1), XAie_LockInit(67, 1)); //adjust lock id with 64 offset to refer to local memory tile lock
		driverStatus |= XAie_DmaSetNextBd(&DmaInst, 3, XAIE_ENABLE);
		driverStatus |= XAie_DmaEnableBd(&DmaInst);
		driverStatus |= XAie_DmaWriteBd(&DevInst, &DmaInst, XAie_TileLoc(2, 2), 2);
	}
	{
		XAie_DmaDesc DmaInst;
		driverStatus |= XAie_DmaDescInit(&DevInst, &DmaInst, XAie_TileLoc(2, 2));
		XAie_DmaDimDesc aie2DmaDimDesc[2] = {{.AieMlDimDesc = {1, 147}}, {.AieMlDimDesc = {147, 8}}, };
		XAie_DmaTensor aie2DmaTensor = {2, aie2DmaDimDesc};
		driverStatus |= XAie_DmaSetMultiDimAddr(&DmaInst, &aie2DmaTensor, 552352, 4704); //adjust address with 524288 offset to refer to memory space in local memory tile
		driverStatus |= XAie_DmaSetLock(&DmaInst, XAie_LockInit(66, 0), XAie_LockInit(67, -1)); //adjust lock id with 64 offset to refer to local memory tile lock
		driverStatus |= XAie_DmaSetNextBd(&DmaInst, 2, XAIE_ENABLE);
		driverStatus |= XAie_DmaEnableBd(&DmaInst);
		driverStatus |= XAie_DmaWriteBd(&DevInst, &DmaInst, XAie_TileLoc(2, 2), 3);
	}
	{
		driverStatus |= XAie_DmaChannelSetStartQueue(&DevInst, XAie_TileLoc(2, 2), 0, DMA_MM2S, 2, 1, XAIE_DISABLE);
	}

	//Setting memory tile DMA for EG.input[0].in[0]
	{
		XAie_DmaDesc DmaInst;
		driverStatus |= XAie_DmaDescInit(&DevInst, &DmaInst, XAie_TileLoc(6, 2));
		XAie_DmaDimDesc aie2DmaDimDesc[1] = {{.AieMlDimDesc = {1, 0}}, };
		XAie_DmaTensor aie2DmaTensor = {1, aie2DmaDimDesc};
		driverStatus |= XAie_DmaSetMultiDimAddr(&DmaInst, &aie2DmaTensor, 720896, 171120); //adjust address with 524288 offset to refer to memory space in local memory tile
		driverStatus |= XAie_DmaSetLock(&DmaInst, XAie_LockInit(65, 0), XAie_LockInit(64, 1)); //adjust lock id with 64 offset to refer to local memory tile lock
		driverStatus |= XAie_DmaSetNextBd(&DmaInst, 1, XAIE_ENABLE);
		driverStatus |= XAie_DmaEnableBd(&DmaInst);
		driverStatus |= XAie_DmaWriteBd(&DevInst, &DmaInst, XAie_TileLoc(6, 2), 0);
	}
	{
		XAie_DmaDesc DmaInst;
		driverStatus |= XAie_DmaDescInit(&DevInst, &DmaInst, XAie_TileLoc(6, 2));
		XAie_DmaDimDesc aie2DmaDimDesc[1] = {{.AieMlDimDesc = {1, 0}}, };
		XAie_DmaTensor aie2DmaTensor = {1, aie2DmaDimDesc};
		driverStatus |= XAie_DmaSetMultiDimAddr(&DmaInst, &aie2DmaTensor, 720896, 171120); //adjust address with 524288 offset to refer to memory space in local memory tile
		driverStatus |= XAie_DmaSetLock(&DmaInst, XAie_LockInit(65, 7), XAie_LockInit(64, -1)); //adjust lock id with 64 offset to refer to local memory tile lock
		driverStatus |= XAie_DmaSetNextBd(&DmaInst, 0, XAIE_ENABLE);
		driverStatus |= XAie_DmaEnableBd(&DmaInst);
		driverStatus |= XAie_DmaWriteBd(&DevInst, &DmaInst, XAie_TileLoc(6, 2), 1);
	}
	{
		XAie_DmaDeclareQueueConfig(startQueueDesc, 0, 1, XAIE_DISABLE, XAIE_DISABLE);
		driverStatus |= XAie_DmaChannelSetStartQueueGeneric(&DevInst, XAie_TileLoc(6, 2), 0, DMA_S2MM, &startQueueDesc);
	}

	//Setting memory tile DMA for EG.input[0].out[0]
	{
		XAie_DmaDesc DmaInst;
		driverStatus |= XAie_DmaDescInit(&DevInst, &DmaInst, XAie_TileLoc(6, 2));
		XAie_DmaDimDesc aie2DmaDimDesc[4] = {{.AieMlDimDesc = {1, 7}}, {.AieMlDimDesc = {230, 7}}, {.AieMlDimDesc = {14260, 3}}, {.AieMlDimDesc = {2, 0}}, };
		XAie_DmaTensor aie2DmaTensor = {4, aie2DmaDimDesc};
		driverStatus |= XAie_DmaSetMultiDimAddr(&DmaInst, &aie2DmaTensor, 720896, 65856); //adjust address with 524288 offset to refer to memory space in local memory tile
		driverStatus |= XAie_DmaSetLock(&DmaInst, XAie_LockInit(64, 1), XAie_LockInit(65, 1)); //adjust lock id with 64 offset to refer to local memory tile lock
		driverStatus |= XAie_DmaSetNextBd(&DmaInst, 3, XAIE_ENABLE);
		driverStatus |= XAie_DmaEnableBd(&DmaInst);
		driverStatus |= XAie_DmaWriteBd(&DevInst, &DmaInst, XAie_TileLoc(6, 2), 2);
	}
	{
		XAie_DmaDesc DmaInst;
		driverStatus |= XAie_DmaDescInit(&DevInst, &DmaInst, XAie_TileLoc(6, 2));
		XAie_DmaDimDesc aie2DmaDimDesc[4] = {{.AieMlDimDesc = {1, 7}}, {.AieMlDimDesc = {230, 7}}, {.AieMlDimDesc = {14260, 3}}, {.AieMlDimDesc = {2, 0}}, };
		XAie_DmaTensor aie2DmaTensor = {4, aie2DmaDimDesc};
		driverStatus |= XAie_DmaSetMultiDimAddr(&DmaInst, &aie2DmaTensor, 722736, 65856); //adjust address with 524288 offset to refer to memory space in local memory tile
		driverStatus |= XAie_DmaSetLock(&DmaInst, XAie_LockInit(64, 1), XAie_LockInit(65, 1)); //adjust lock id with 64 offset to refer to local memory tile lock
		driverStatus |= XAie_DmaSetNextBd(&DmaInst, 4, XAIE_ENABLE);
		driverStatus |= XAie_DmaEnableBd(&DmaInst);
		driverStatus |= XAie_DmaWriteBd(&DevInst, &DmaInst, XAie_TileLoc(6, 2), 3);
	}
	{
		XAie_DmaDesc DmaInst;
		driverStatus |= XAie_DmaDescInit(&DevInst, &DmaInst, XAie_TileLoc(6, 2));
		XAie_DmaDimDesc aie2DmaDimDesc[4] = {{.AieMlDimDesc = {1, 7}}, {.AieMlDimDesc = {230, 7}}, {.AieMlDimDesc = {14260, 3}}, {.AieMlDimDesc = {2, 0}}, };
		XAie_DmaTensor aie2DmaTensor = {4, aie2DmaDimDesc};
		driverStatus |= XAie_DmaSetMultiDimAddr(&DmaInst, &aie2DmaTensor, 724576, 65856); //adjust address with 524288 offset to refer to memory space in local memory tile
		driverStatus |= XAie_DmaSetLock(&DmaInst, XAie_LockInit(64, 1), XAie_LockInit(65, 1)); //adjust lock id with 64 offset to refer to local memory tile lock
		driverStatus |= XAie_DmaSetNextBd(&DmaInst, 5, XAIE_ENABLE);
		driverStatus |= XAie_DmaEnableBd(&DmaInst);
		driverStatus |= XAie_DmaWriteBd(&DevInst, &DmaInst, XAie_TileLoc(6, 2), 4);
	}
	{
		XAie_DmaDesc DmaInst;
		driverStatus |= XAie_DmaDescInit(&DevInst, &DmaInst, XAie_TileLoc(6, 2));
		XAie_DmaDimDesc aie2DmaDimDesc[4] = {{.AieMlDimDesc = {1, 7}}, {.AieMlDimDesc = {230, 7}}, {.AieMlDimDesc = {14260, 3}}, {.AieMlDimDesc = {2, 0}}, };
		XAie_DmaTensor aie2DmaTensor = {4, aie2DmaDimDesc};
		driverStatus |= XAie_DmaSetMultiDimAddr(&DmaInst, &aie2DmaTensor, 726416, 65856); //adjust address with 524288 offset to refer to memory space in local memory tile
		driverStatus |= XAie_DmaSetLock(&DmaInst, XAie_LockInit(64, 1), XAie_LockInit(65, 1)); //adjust lock id with 64 offset to refer to local memory tile lock
		driverStatus |= XAie_DmaSetNextBd(&DmaInst, 6, XAIE_ENABLE);
		driverStatus |= XAie_DmaEnableBd(&DmaInst);
		driverStatus |= XAie_DmaWriteBd(&DevInst, &DmaInst, XAie_TileLoc(6, 2), 5);
	}
	{
		XAie_DmaDesc DmaInst;
		driverStatus |= XAie_DmaDescInit(&DevInst, &DmaInst, XAie_TileLoc(6, 2));
		XAie_DmaDimDesc aie2DmaDimDesc[4] = {{.AieMlDimDesc = {1, 7}}, {.AieMlDimDesc = {230, 7}}, {.AieMlDimDesc = {14260, 3}}, {.AieMlDimDesc = {2, 0}}, };
		XAie_DmaTensor aie2DmaTensor = {4, aie2DmaDimDesc};
		driverStatus |= XAie_DmaSetMultiDimAddr(&DmaInst, &aie2DmaTensor, 728256, 65856); //adjust address with 524288 offset to refer to memory space in local memory tile
		driverStatus |= XAie_DmaSetLock(&DmaInst, XAie_LockInit(64, 1), XAie_LockInit(65, 1)); //adjust lock id with 64 offset to refer to local memory tile lock
		driverStatus |= XAie_DmaSetNextBd(&DmaInst, 7, XAIE_ENABLE);
		driverStatus |= XAie_DmaEnableBd(&DmaInst);
		driverStatus |= XAie_DmaWriteBd(&DevInst, &DmaInst, XAie_TileLoc(6, 2), 6);
	}
	{
		XAie_DmaDesc DmaInst;
		driverStatus |= XAie_DmaDescInit(&DevInst, &DmaInst, XAie_TileLoc(6, 2));
		XAie_DmaDimDesc aie2DmaDimDesc[4] = {{.AieMlDimDesc = {1, 7}}, {.AieMlDimDesc = {230, 7}}, {.AieMlDimDesc = {14260, 3}}, {.AieMlDimDesc = {2, 0}}, };
		XAie_DmaTensor aie2DmaTensor = {4, aie2DmaDimDesc};
		driverStatus |= XAie_DmaSetMultiDimAddr(&DmaInst, &aie2DmaTensor, 730096, 65856); //adjust address with 524288 offset to refer to memory space in local memory tile
		driverStatus |= XAie_DmaSetLock(&DmaInst, XAie_LockInit(64, 1), XAie_LockInit(65, 1)); //adjust lock id with 64 offset to refer to local memory tile lock
		driverStatus |= XAie_DmaSetNextBd(&DmaInst, 8, XAIE_ENABLE);
		driverStatus |= XAie_DmaEnableBd(&DmaInst);
		driverStatus |= XAie_DmaWriteBd(&DevInst, &DmaInst, XAie_TileLoc(6, 2), 7);
	}
	{
		XAie_DmaDesc DmaInst;
		driverStatus |= XAie_DmaDescInit(&DevInst, &DmaInst, XAie_TileLoc(6, 2));
		XAie_DmaDimDesc aie2DmaDimDesc[4] = {{.AieMlDimDesc = {1, 7}}, {.AieMlDimDesc = {230, 7}}, {.AieMlDimDesc = {14260, 3}}, {.AieMlDimDesc = {2, 0}}, };
		XAie_DmaTensor aie2DmaTensor = {4, aie2DmaDimDesc};
		driverStatus |= XAie_DmaSetMultiDimAddr(&DmaInst, &aie2DmaTensor, 731936, 65856); //adjust address with 524288 offset to refer to memory space in local memory tile
		driverStatus |= XAie_DmaSetLock(&DmaInst, XAie_LockInit(64, 1), XAie_LockInit(65, 1)); //adjust lock id with 64 offset to refer to local memory tile lock
		driverStatus |= XAie_DmaSetNextBd(&DmaInst, 9, XAIE_ENABLE);
		driverStatus |= XAie_DmaEnableBd(&DmaInst);
		driverStatus |= XAie_DmaWriteBd(&DevInst, &DmaInst, XAie_TileLoc(6, 2), 8);
	}
	{
		XAie_DmaDesc DmaInst;
		driverStatus |= XAie_DmaDescInit(&DevInst, &DmaInst, XAie_TileLoc(6, 2));
		XAie_DmaDimDesc aie2DmaDimDesc[4] = {{.AieMlDimDesc = {1, 7}}, {.AieMlDimDesc = {230, 7}}, {.AieMlDimDesc = {14260, 3}}, {.AieMlDimDesc = {2, 0}}, };
		XAie_DmaTensor aie2DmaTensor = {4, aie2DmaDimDesc};
		driverStatus |= XAie_DmaSetMultiDimAddr(&DmaInst, &aie2DmaTensor, 720896, 65856); //adjust address with 524288 offset to refer to memory space in local memory tile
		driverStatus |= XAie_DmaSetLock(&DmaInst, XAie_LockInit(64, 0), XAie_LockInit(65, -1)); //adjust lock id with 64 offset to refer to local memory tile lock
		driverStatus |= XAie_DmaSetNextBd(&DmaInst, 10, XAIE_ENABLE);
		driverStatus |= XAie_DmaEnableBd(&DmaInst);
		driverStatus |= XAie_DmaWriteBd(&DevInst, &DmaInst, XAie_TileLoc(6, 2), 9);
	}
	{
		XAie_DmaDesc DmaInst;
		driverStatus |= XAie_DmaDescInit(&DevInst, &DmaInst, XAie_TileLoc(6, 2));
		XAie_DmaDimDesc aie2DmaDimDesc[4] = {{.AieMlDimDesc = {1, 7}}, {.AieMlDimDesc = {230, 7}}, {.AieMlDimDesc = {14260, 3}}, {.AieMlDimDesc = {2, 0}}, };
		XAie_DmaTensor aie2DmaTensor = {4, aie2DmaDimDesc};
		driverStatus |= XAie_DmaSetMultiDimAddr(&DmaInst, &aie2DmaTensor, 722736, 65856); //adjust address with 524288 offset to refer to memory space in local memory tile
		driverStatus |= XAie_DmaSetLock(&DmaInst, XAie_LockInit(64, 0), XAie_LockInit(65, -1)); //adjust lock id with 64 offset to refer to local memory tile lock
		driverStatus |= XAie_DmaSetNextBd(&DmaInst, 11, XAIE_ENABLE);
		driverStatus |= XAie_DmaEnableBd(&DmaInst);
		driverStatus |= XAie_DmaWriteBd(&DevInst, &DmaInst, XAie_TileLoc(6, 2), 10);
	}
	{
		XAie_DmaDesc DmaInst;
		driverStatus |= XAie_DmaDescInit(&DevInst, &DmaInst, XAie_TileLoc(6, 2));
		XAie_DmaDimDesc aie2DmaDimDesc[4] = {{.AieMlDimDesc = {1, 7}}, {.AieMlDimDesc = {230, 7}}, {.AieMlDimDesc = {14260, 3}}, {.AieMlDimDesc = {2, 0}}, };
		XAie_DmaTensor aie2DmaTensor = {4, aie2DmaDimDesc};
		driverStatus |= XAie_DmaSetMultiDimAddr(&DmaInst, &aie2DmaTensor, 724576, 65856); //adjust address with 524288 offset to refer to memory space in local memory tile
		driverStatus |= XAie_DmaSetLock(&DmaInst, XAie_LockInit(64, 0), XAie_LockInit(65, -1)); //adjust lock id with 64 offset to refer to local memory tile lock
		driverStatus |= XAie_DmaSetNextBd(&DmaInst, 12, XAIE_ENABLE);
		driverStatus |= XAie_DmaEnableBd(&DmaInst);
		driverStatus |= XAie_DmaWriteBd(&DevInst, &DmaInst, XAie_TileLoc(6, 2), 11);
	}
	{
		XAie_DmaDesc DmaInst;
		driverStatus |= XAie_DmaDescInit(&DevInst, &DmaInst, XAie_TileLoc(6, 2));
		XAie_DmaDimDesc aie2DmaDimDesc[4] = {{.AieMlDimDesc = {1, 7}}, {.AieMlDimDesc = {230, 7}}, {.AieMlDimDesc = {14260, 3}}, {.AieMlDimDesc = {2, 0}}, };
		XAie_DmaTensor aie2DmaTensor = {4, aie2DmaDimDesc};
		driverStatus |= XAie_DmaSetMultiDimAddr(&DmaInst, &aie2DmaTensor, 726416, 65856); //adjust address with 524288 offset to refer to memory space in local memory tile
		driverStatus |= XAie_DmaSetLock(&DmaInst, XAie_LockInit(64, 0), XAie_LockInit(65, -1)); //adjust lock id with 64 offset to refer to local memory tile lock
		driverStatus |= XAie_DmaSetNextBd(&DmaInst, 13, XAIE_ENABLE);
		driverStatus |= XAie_DmaEnableBd(&DmaInst);
		driverStatus |= XAie_DmaWriteBd(&DevInst, &DmaInst, XAie_TileLoc(6, 2), 12);
	}
	{
		XAie_DmaDesc DmaInst;
		driverStatus |= XAie_DmaDescInit(&DevInst, &DmaInst, XAie_TileLoc(6, 2));
		XAie_DmaDimDesc aie2DmaDimDesc[4] = {{.AieMlDimDesc = {1, 7}}, {.AieMlDimDesc = {230, 7}}, {.AieMlDimDesc = {14260, 3}}, {.AieMlDimDesc = {2, 0}}, };
		XAie_DmaTensor aie2DmaTensor = {4, aie2DmaDimDesc};
		driverStatus |= XAie_DmaSetMultiDimAddr(&DmaInst, &aie2DmaTensor, 728256, 65856); //adjust address with 524288 offset to refer to memory space in local memory tile
		driverStatus |= XAie_DmaSetLock(&DmaInst, XAie_LockInit(64, 0), XAie_LockInit(65, -1)); //adjust lock id with 64 offset to refer to local memory tile lock
		driverStatus |= XAie_DmaSetNextBd(&DmaInst, 14, XAIE_ENABLE);
		driverStatus |= XAie_DmaEnableBd(&DmaInst);
		driverStatus |= XAie_DmaWriteBd(&DevInst, &DmaInst, XAie_TileLoc(6, 2), 13);
	}
	{
		XAie_DmaDesc DmaInst;
		driverStatus |= XAie_DmaDescInit(&DevInst, &DmaInst, XAie_TileLoc(6, 2));
		XAie_DmaDimDesc aie2DmaDimDesc[4] = {{.AieMlDimDesc = {1, 7}}, {.AieMlDimDesc = {230, 7}}, {.AieMlDimDesc = {14260, 3}}, {.AieMlDimDesc = {2, 0}}, };
		XAie_DmaTensor aie2DmaTensor = {4, aie2DmaDimDesc};
		driverStatus |= XAie_DmaSetMultiDimAddr(&DmaInst, &aie2DmaTensor, 730096, 65856); //adjust address with 524288 offset to refer to memory space in local memory tile
		driverStatus |= XAie_DmaSetLock(&DmaInst, XAie_LockInit(64, 0), XAie_LockInit(65, -1)); //adjust lock id with 64 offset to refer to local memory tile lock
		driverStatus |= XAie_DmaSetNextBd(&DmaInst, 15, XAIE_ENABLE);
		driverStatus |= XAie_DmaEnableBd(&DmaInst);
		driverStatus |= XAie_DmaWriteBd(&DevInst, &DmaInst, XAie_TileLoc(6, 2), 14);
	}
	{
		XAie_DmaDesc DmaInst;
		driverStatus |= XAie_DmaDescInit(&DevInst, &DmaInst, XAie_TileLoc(6, 2));
		XAie_DmaDimDesc aie2DmaDimDesc[4] = {{.AieMlDimDesc = {1, 7}}, {.AieMlDimDesc = {230, 7}}, {.AieMlDimDesc = {14260, 3}}, {.AieMlDimDesc = {2, 0}}, };
		XAie_DmaTensor aie2DmaTensor = {4, aie2DmaDimDesc};
		driverStatus |= XAie_DmaSetMultiDimAddr(&DmaInst, &aie2DmaTensor, 731936, 65856); //adjust address with 524288 offset to refer to memory space in local memory tile
		driverStatus |= XAie_DmaSetLock(&DmaInst, XAie_LockInit(64, 0), XAie_LockInit(65, -1)); //adjust lock id with 64 offset to refer to local memory tile lock
		driverStatus |= XAie_DmaSetNextBd(&DmaInst, 2, XAIE_ENABLE);
		driverStatus |= XAie_DmaEnableBd(&DmaInst);
		driverStatus |= XAie_DmaWriteBd(&DevInst, &DmaInst, XAie_TileLoc(6, 2), 15);
	}
	{
		driverStatus |= XAie_DmaChannelSetStartQueue(&DevInst, XAie_TileLoc(6, 2), 0, DMA_MM2S, 2, 1, XAIE_DISABLE);
	}

	//Setting memory tile DMA for EG.input[1].in[0]
	{
		XAie_DmaDesc DmaInst;
		driverStatus |= XAie_DmaDescInit(&DevInst, &DmaInst, XAie_TileLoc(2, 1));
		XAie_DmaDimDesc aie2DmaDimDesc[1] = {{.AieMlDimDesc = {1, 0}}, };
		XAie_DmaTensor aie2DmaTensor = {1, aie2DmaDimDesc};
		driverStatus |= XAie_DmaSetMultiDimAddr(&DmaInst, &aie2DmaTensor, 524288, 171120); //adjust address with 524288 offset to refer to memory space in local memory tile
		driverStatus |= XAie_DmaSetLock(&DmaInst, XAie_LockInit(69, 0), XAie_LockInit(68, 1)); //adjust lock id with 64 offset to refer to local memory tile lock
		driverStatus |= XAie_DmaSetNextBd(&DmaInst, 1, XAIE_ENABLE);
		driverStatus |= XAie_DmaEnableBd(&DmaInst);
		driverStatus |= XAie_DmaWriteBd(&DevInst, &DmaInst, XAie_TileLoc(2, 1), 0);
	}
	{
		XAie_DmaDesc DmaInst;
		driverStatus |= XAie_DmaDescInit(&DevInst, &DmaInst, XAie_TileLoc(2, 1));
		XAie_DmaDimDesc aie2DmaDimDesc[1] = {{.AieMlDimDesc = {1, 0}}, };
		XAie_DmaTensor aie2DmaTensor = {1, aie2DmaDimDesc};
		driverStatus |= XAie_DmaSetMultiDimAddr(&DmaInst, &aie2DmaTensor, 524288, 171120); //adjust address with 524288 offset to refer to memory space in local memory tile
		driverStatus |= XAie_DmaSetLock(&DmaInst, XAie_LockInit(69, 7), XAie_LockInit(68, -1)); //adjust lock id with 64 offset to refer to local memory tile lock
		driverStatus |= XAie_DmaSetNextBd(&DmaInst, 0, XAIE_ENABLE);
		driverStatus |= XAie_DmaEnableBd(&DmaInst);
		driverStatus |= XAie_DmaWriteBd(&DevInst, &DmaInst, XAie_TileLoc(2, 1), 1);
	}
	{
		XAie_DmaDeclareQueueConfig(startQueueDesc, 0, 1, XAIE_DISABLE, XAIE_DISABLE);
		driverStatus |= XAie_DmaChannelSetStartQueueGeneric(&DevInst, XAie_TileLoc(2, 1), 0, DMA_S2MM, &startQueueDesc);
	}

	//Setting memory tile DMA for EG.input[1].out[0]
	{
		XAie_DmaDesc DmaInst;
		driverStatus |= XAie_DmaDescInit(&DevInst, &DmaInst, XAie_TileLoc(2, 1));
		XAie_DmaDimDesc aie2DmaDimDesc[4] = {{.AieMlDimDesc = {1, 7}}, {.AieMlDimDesc = {230, 7}}, {.AieMlDimDesc = {14260, 3}}, {.AieMlDimDesc = {2, 0}}, };
		XAie_DmaTensor aie2DmaTensor = {4, aie2DmaDimDesc};
		driverStatus |= XAie_DmaSetMultiDimAddr(&DmaInst, &aie2DmaTensor, 524288, 65856); //adjust address with 524288 offset to refer to memory space in local memory tile
		driverStatus |= XAie_DmaSetLock(&DmaInst, XAie_LockInit(68, 1), XAie_LockInit(69, 1)); //adjust lock id with 64 offset to refer to local memory tile lock
		driverStatus |= XAie_DmaSetNextBd(&DmaInst, 3, XAIE_ENABLE);
		driverStatus |= XAie_DmaEnableBd(&DmaInst);
		driverStatus |= XAie_DmaWriteBd(&DevInst, &DmaInst, XAie_TileLoc(2, 1), 2);
	}
	{
		XAie_DmaDesc DmaInst;
		driverStatus |= XAie_DmaDescInit(&DevInst, &DmaInst, XAie_TileLoc(2, 1));
		XAie_DmaDimDesc aie2DmaDimDesc[4] = {{.AieMlDimDesc = {1, 7}}, {.AieMlDimDesc = {230, 7}}, {.AieMlDimDesc = {14260, 3}}, {.AieMlDimDesc = {2, 0}}, };
		XAie_DmaTensor aie2DmaTensor = {4, aie2DmaDimDesc};
		driverStatus |= XAie_DmaSetMultiDimAddr(&DmaInst, &aie2DmaTensor, 526128, 65856); //adjust address with 524288 offset to refer to memory space in local memory tile
		driverStatus |= XAie_DmaSetLock(&DmaInst, XAie_LockInit(68, 1), XAie_LockInit(69, 1)); //adjust lock id with 64 offset to refer to local memory tile lock
		driverStatus |= XAie_DmaSetNextBd(&DmaInst, 4, XAIE_ENABLE);
		driverStatus |= XAie_DmaEnableBd(&DmaInst);
		driverStatus |= XAie_DmaWriteBd(&DevInst, &DmaInst, XAie_TileLoc(2, 1), 3);
	}
	{
		XAie_DmaDesc DmaInst;
		driverStatus |= XAie_DmaDescInit(&DevInst, &DmaInst, XAie_TileLoc(2, 1));
		XAie_DmaDimDesc aie2DmaDimDesc[4] = {{.AieMlDimDesc = {1, 7}}, {.AieMlDimDesc = {230, 7}}, {.AieMlDimDesc = {14260, 3}}, {.AieMlDimDesc = {2, 0}}, };
		XAie_DmaTensor aie2DmaTensor = {4, aie2DmaDimDesc};
		driverStatus |= XAie_DmaSetMultiDimAddr(&DmaInst, &aie2DmaTensor, 527968, 65856); //adjust address with 524288 offset to refer to memory space in local memory tile
		driverStatus |= XAie_DmaSetLock(&DmaInst, XAie_LockInit(68, 1), XAie_LockInit(69, 1)); //adjust lock id with 64 offset to refer to local memory tile lock
		driverStatus |= XAie_DmaSetNextBd(&DmaInst, 5, XAIE_ENABLE);
		driverStatus |= XAie_DmaEnableBd(&DmaInst);
		driverStatus |= XAie_DmaWriteBd(&DevInst, &DmaInst, XAie_TileLoc(2, 1), 4);
	}
	{
		XAie_DmaDesc DmaInst;
		driverStatus |= XAie_DmaDescInit(&DevInst, &DmaInst, XAie_TileLoc(2, 1));
		XAie_DmaDimDesc aie2DmaDimDesc[4] = {{.AieMlDimDesc = {1, 7}}, {.AieMlDimDesc = {230, 7}}, {.AieMlDimDesc = {14260, 3}}, {.AieMlDimDesc = {2, 0}}, };
		XAie_DmaTensor aie2DmaTensor = {4, aie2DmaDimDesc};
		driverStatus |= XAie_DmaSetMultiDimAddr(&DmaInst, &aie2DmaTensor, 529808, 65856); //adjust address with 524288 offset to refer to memory space in local memory tile
		driverStatus |= XAie_DmaSetLock(&DmaInst, XAie_LockInit(68, 1), XAie_LockInit(69, 1)); //adjust lock id with 64 offset to refer to local memory tile lock
		driverStatus |= XAie_DmaSetNextBd(&DmaInst, 6, XAIE_ENABLE);
		driverStatus |= XAie_DmaEnableBd(&DmaInst);
		driverStatus |= XAie_DmaWriteBd(&DevInst, &DmaInst, XAie_TileLoc(2, 1), 5);
	}
	{
		XAie_DmaDesc DmaInst;
		driverStatus |= XAie_DmaDescInit(&DevInst, &DmaInst, XAie_TileLoc(2, 1));
		XAie_DmaDimDesc aie2DmaDimDesc[4] = {{.AieMlDimDesc = {1, 7}}, {.AieMlDimDesc = {230, 7}}, {.AieMlDimDesc = {14260, 3}}, {.AieMlDimDesc = {2, 0}}, };
		XAie_DmaTensor aie2DmaTensor = {4, aie2DmaDimDesc};
		driverStatus |= XAie_DmaSetMultiDimAddr(&DmaInst, &aie2DmaTensor, 531648, 65856); //adjust address with 524288 offset to refer to memory space in local memory tile
		driverStatus |= XAie_DmaSetLock(&DmaInst, XAie_LockInit(68, 1), XAie_LockInit(69, 1)); //adjust lock id with 64 offset to refer to local memory tile lock
		driverStatus |= XAie_DmaSetNextBd(&DmaInst, 7, XAIE_ENABLE);
		driverStatus |= XAie_DmaEnableBd(&DmaInst);
		driverStatus |= XAie_DmaWriteBd(&DevInst, &DmaInst, XAie_TileLoc(2, 1), 6);
	}
	{
		XAie_DmaDesc DmaInst;
		driverStatus |= XAie_DmaDescInit(&DevInst, &DmaInst, XAie_TileLoc(2, 1));
		XAie_DmaDimDesc aie2DmaDimDesc[4] = {{.AieMlDimDesc = {1, 7}}, {.AieMlDimDesc = {230, 7}}, {.AieMlDimDesc = {14260, 3}}, {.AieMlDimDesc = {2, 0}}, };
		XAie_DmaTensor aie2DmaTensor = {4, aie2DmaDimDesc};
		driverStatus |= XAie_DmaSetMultiDimAddr(&DmaInst, &aie2DmaTensor, 533488, 65856); //adjust address with 524288 offset to refer to memory space in local memory tile
		driverStatus |= XAie_DmaSetLock(&DmaInst, XAie_LockInit(68, 1), XAie_LockInit(69, 1)); //adjust lock id with 64 offset to refer to local memory tile lock
		driverStatus |= XAie_DmaSetNextBd(&DmaInst, 8, XAIE_ENABLE);
		driverStatus |= XAie_DmaEnableBd(&DmaInst);
		driverStatus |= XAie_DmaWriteBd(&DevInst, &DmaInst, XAie_TileLoc(2, 1), 7);
	}
	{
		XAie_DmaDesc DmaInst;
		driverStatus |= XAie_DmaDescInit(&DevInst, &DmaInst, XAie_TileLoc(2, 1));
		XAie_DmaDimDesc aie2DmaDimDesc[4] = {{.AieMlDimDesc = {1, 7}}, {.AieMlDimDesc = {230, 7}}, {.AieMlDimDesc = {14260, 3}}, {.AieMlDimDesc = {2, 0}}, };
		XAie_DmaTensor aie2DmaTensor = {4, aie2DmaDimDesc};
		driverStatus |= XAie_DmaSetMultiDimAddr(&DmaInst, &aie2DmaTensor, 535328, 65856); //adjust address with 524288 offset to refer to memory space in local memory tile
		driverStatus |= XAie_DmaSetLock(&DmaInst, XAie_LockInit(68, 1), XAie_LockInit(69, 1)); //adjust lock id with 64 offset to refer to local memory tile lock
		driverStatus |= XAie_DmaSetNextBd(&DmaInst, 9, XAIE_ENABLE);
		driverStatus |= XAie_DmaEnableBd(&DmaInst);
		driverStatus |= XAie_DmaWriteBd(&DevInst, &DmaInst, XAie_TileLoc(2, 1), 8);
	}
	{
		XAie_DmaDesc DmaInst;
		driverStatus |= XAie_DmaDescInit(&DevInst, &DmaInst, XAie_TileLoc(2, 1));
		XAie_DmaDimDesc aie2DmaDimDesc[4] = {{.AieMlDimDesc = {1, 7}}, {.AieMlDimDesc = {230, 7}}, {.AieMlDimDesc = {14260, 3}}, {.AieMlDimDesc = {2, 0}}, };
		XAie_DmaTensor aie2DmaTensor = {4, aie2DmaDimDesc};
		driverStatus |= XAie_DmaSetMultiDimAddr(&DmaInst, &aie2DmaTensor, 524288, 65856); //adjust address with 524288 offset to refer to memory space in local memory tile
		driverStatus |= XAie_DmaSetLock(&DmaInst, XAie_LockInit(68, 0), XAie_LockInit(69, -1)); //adjust lock id with 64 offset to refer to local memory tile lock
		driverStatus |= XAie_DmaSetNextBd(&DmaInst, 10, XAIE_ENABLE);
		driverStatus |= XAie_DmaEnableBd(&DmaInst);
		driverStatus |= XAie_DmaWriteBd(&DevInst, &DmaInst, XAie_TileLoc(2, 1), 9);
	}
	{
		XAie_DmaDesc DmaInst;
		driverStatus |= XAie_DmaDescInit(&DevInst, &DmaInst, XAie_TileLoc(2, 1));
		XAie_DmaDimDesc aie2DmaDimDesc[4] = {{.AieMlDimDesc = {1, 7}}, {.AieMlDimDesc = {230, 7}}, {.AieMlDimDesc = {14260, 3}}, {.AieMlDimDesc = {2, 0}}, };
		XAie_DmaTensor aie2DmaTensor = {4, aie2DmaDimDesc};
		driverStatus |= XAie_DmaSetMultiDimAddr(&DmaInst, &aie2DmaTensor, 526128, 65856); //adjust address with 524288 offset to refer to memory space in local memory tile
		driverStatus |= XAie_DmaSetLock(&DmaInst, XAie_LockInit(68, 0), XAie_LockInit(69, -1)); //adjust lock id with 64 offset to refer to local memory tile lock
		driverStatus |= XAie_DmaSetNextBd(&DmaInst, 11, XAIE_ENABLE);
		driverStatus |= XAie_DmaEnableBd(&DmaInst);
		driverStatus |= XAie_DmaWriteBd(&DevInst, &DmaInst, XAie_TileLoc(2, 1), 10);
	}
	{
		XAie_DmaDesc DmaInst;
		driverStatus |= XAie_DmaDescInit(&DevInst, &DmaInst, XAie_TileLoc(2, 1));
		XAie_DmaDimDesc aie2DmaDimDesc[4] = {{.AieMlDimDesc = {1, 7}}, {.AieMlDimDesc = {230, 7}}, {.AieMlDimDesc = {14260, 3}}, {.AieMlDimDesc = {2, 0}}, };
		XAie_DmaTensor aie2DmaTensor = {4, aie2DmaDimDesc};
		driverStatus |= XAie_DmaSetMultiDimAddr(&DmaInst, &aie2DmaTensor, 527968, 65856); //adjust address with 524288 offset to refer to memory space in local memory tile
		driverStatus |= XAie_DmaSetLock(&DmaInst, XAie_LockInit(68, 0), XAie_LockInit(69, -1)); //adjust lock id with 64 offset to refer to local memory tile lock
		driverStatus |= XAie_DmaSetNextBd(&DmaInst, 12, XAIE_ENABLE);
		driverStatus |= XAie_DmaEnableBd(&DmaInst);
		driverStatus |= XAie_DmaWriteBd(&DevInst, &DmaInst, XAie_TileLoc(2, 1), 11);
	}
	{
		XAie_DmaDesc DmaInst;
		driverStatus |= XAie_DmaDescInit(&DevInst, &DmaInst, XAie_TileLoc(2, 1));
		XAie_DmaDimDesc aie2DmaDimDesc[4] = {{.AieMlDimDesc = {1, 7}}, {.AieMlDimDesc = {230, 7}}, {.AieMlDimDesc = {14260, 3}}, {.AieMlDimDesc = {2, 0}}, };
		XAie_DmaTensor aie2DmaTensor = {4, aie2DmaDimDesc};
		driverStatus |= XAie_DmaSetMultiDimAddr(&DmaInst, &aie2DmaTensor, 529808, 65856); //adjust address with 524288 offset to refer to memory space in local memory tile
		driverStatus |= XAie_DmaSetLock(&DmaInst, XAie_LockInit(68, 0), XAie_LockInit(69, -1)); //adjust lock id with 64 offset to refer to local memory tile lock
		driverStatus |= XAie_DmaSetNextBd(&DmaInst, 13, XAIE_ENABLE);
		driverStatus |= XAie_DmaEnableBd(&DmaInst);
		driverStatus |= XAie_DmaWriteBd(&DevInst, &DmaInst, XAie_TileLoc(2, 1), 12);
	}
	{
		XAie_DmaDesc DmaInst;
		driverStatus |= XAie_DmaDescInit(&DevInst, &DmaInst, XAie_TileLoc(2, 1));
		XAie_DmaDimDesc aie2DmaDimDesc[4] = {{.AieMlDimDesc = {1, 7}}, {.AieMlDimDesc = {230, 7}}, {.AieMlDimDesc = {14260, 3}}, {.AieMlDimDesc = {2, 0}}, };
		XAie_DmaTensor aie2DmaTensor = {4, aie2DmaDimDesc};
		driverStatus |= XAie_DmaSetMultiDimAddr(&DmaInst, &aie2DmaTensor, 531648, 65856); //adjust address with 524288 offset to refer to memory space in local memory tile
		driverStatus |= XAie_DmaSetLock(&DmaInst, XAie_LockInit(68, 0), XAie_LockInit(69, -1)); //adjust lock id with 64 offset to refer to local memory tile lock
		driverStatus |= XAie_DmaSetNextBd(&DmaInst, 14, XAIE_ENABLE);
		driverStatus |= XAie_DmaEnableBd(&DmaInst);
		driverStatus |= XAie_DmaWriteBd(&DevInst, &DmaInst, XAie_TileLoc(2, 1), 13);
	}
	{
		XAie_DmaDesc DmaInst;
		driverStatus |= XAie_DmaDescInit(&DevInst, &DmaInst, XAie_TileLoc(2, 1));
		XAie_DmaDimDesc aie2DmaDimDesc[4] = {{.AieMlDimDesc = {1, 7}}, {.AieMlDimDesc = {230, 7}}, {.AieMlDimDesc = {14260, 3}}, {.AieMlDimDesc = {2, 0}}, };
		XAie_DmaTensor aie2DmaTensor = {4, aie2DmaDimDesc};
		driverStatus |= XAie_DmaSetMultiDimAddr(&DmaInst, &aie2DmaTensor, 533488, 65856); //adjust address with 524288 offset to refer to memory space in local memory tile
		driverStatus |= XAie_DmaSetLock(&DmaInst, XAie_LockInit(68, 0), XAie_LockInit(69, -1)); //adjust lock id with 64 offset to refer to local memory tile lock
		driverStatus |= XAie_DmaSetNextBd(&DmaInst, 15, XAIE_ENABLE);
		driverStatus |= XAie_DmaEnableBd(&DmaInst);
		driverStatus |= XAie_DmaWriteBd(&DevInst, &DmaInst, XAie_TileLoc(2, 1), 14);
	}
	{
		XAie_DmaDesc DmaInst;
		driverStatus |= XAie_DmaDescInit(&DevInst, &DmaInst, XAie_TileLoc(2, 1));
		XAie_DmaDimDesc aie2DmaDimDesc[4] = {{.AieMlDimDesc = {1, 7}}, {.AieMlDimDesc = {230, 7}}, {.AieMlDimDesc = {14260, 3}}, {.AieMlDimDesc = {2, 0}}, };
		XAie_DmaTensor aie2DmaTensor = {4, aie2DmaDimDesc};
		driverStatus |= XAie_DmaSetMultiDimAddr(&DmaInst, &aie2DmaTensor, 535328, 65856); //adjust address with 524288 offset to refer to memory space in local memory tile
		driverStatus |= XAie_DmaSetLock(&DmaInst, XAie_LockInit(68, 0), XAie_LockInit(69, -1)); //adjust lock id with 64 offset to refer to local memory tile lock
		driverStatus |= XAie_DmaSetNextBd(&DmaInst, 2, XAIE_ENABLE);
		driverStatus |= XAie_DmaEnableBd(&DmaInst);
		driverStatus |= XAie_DmaWriteBd(&DevInst, &DmaInst, XAie_TileLoc(2, 1), 15);
	}
	{
		driverStatus |= XAie_DmaChannelSetStartQueue(&DevInst, XAie_TileLoc(2, 1), 0, DMA_MM2S, 2, 1, XAIE_DISABLE);
	}

	//Setting memory tile DMA for EG.input[2].in[0]
	{
		XAie_DmaDesc DmaInst;
		driverStatus |= XAie_DmaDescInit(&DevInst, &DmaInst, XAie_TileLoc(3, 1));
		XAie_DmaDimDesc aie2DmaDimDesc[1] = {{.AieMlDimDesc = {1, 0}}, };
		XAie_DmaTensor aie2DmaTensor = {1, aie2DmaDimDesc};
		driverStatus |= XAie_DmaSetMultiDimAddr(&DmaInst, &aie2DmaTensor, 557056, 171120); //adjust address with 524288 offset to refer to memory space in local memory tile
		driverStatus |= XAie_DmaSetLock(&DmaInst, XAie_LockInit(71, 0), XAie_LockInit(70, 1)); //adjust lock id with 64 offset to refer to local memory tile lock
		driverStatus |= XAie_DmaSetNextBd(&DmaInst, 25, XAIE_ENABLE);
		driverStatus |= XAie_DmaEnableBd(&DmaInst);
		driverStatus |= XAie_DmaWriteBd(&DevInst, &DmaInst, XAie_TileLoc(3, 1), 24);
	}
	{
		XAie_DmaDesc DmaInst;
		driverStatus |= XAie_DmaDescInit(&DevInst, &DmaInst, XAie_TileLoc(3, 1));
		XAie_DmaDimDesc aie2DmaDimDesc[1] = {{.AieMlDimDesc = {1, 0}}, };
		XAie_DmaTensor aie2DmaTensor = {1, aie2DmaDimDesc};
		driverStatus |= XAie_DmaSetMultiDimAddr(&DmaInst, &aie2DmaTensor, 557056, 171120); //adjust address with 524288 offset to refer to memory space in local memory tile
		driverStatus |= XAie_DmaSetLock(&DmaInst, XAie_LockInit(71, 7), XAie_LockInit(70, -1)); //adjust lock id with 64 offset to refer to local memory tile lock
		driverStatus |= XAie_DmaSetNextBd(&DmaInst, 24, XAIE_ENABLE);
		driverStatus |= XAie_DmaEnableBd(&DmaInst);
		driverStatus |= XAie_DmaWriteBd(&DevInst, &DmaInst, XAie_TileLoc(3, 1), 25);
	}
	{
		XAie_DmaDeclareQueueConfig(startQueueDesc, 24, 1, XAIE_DISABLE, XAIE_DISABLE);
		driverStatus |= XAie_DmaChannelSetStartQueueGeneric(&DevInst, XAie_TileLoc(3, 1), 1, DMA_S2MM, &startQueueDesc);
	}

	//Setting memory tile DMA for EG.input[2].out[0]
	{
		XAie_DmaDesc DmaInst;
		driverStatus |= XAie_DmaDescInit(&DevInst, &DmaInst, XAie_TileLoc(3, 1));
		XAie_DmaDimDesc aie2DmaDimDesc[4] = {{.AieMlDimDesc = {1, 7}}, {.AieMlDimDesc = {230, 7}}, {.AieMlDimDesc = {14260, 3}}, {.AieMlDimDesc = {2, 0}}, };
		XAie_DmaTensor aie2DmaTensor = {4, aie2DmaDimDesc};
		driverStatus |= XAie_DmaSetMultiDimAddr(&DmaInst, &aie2DmaTensor, 557056, 65856); //adjust address with 524288 offset to refer to memory space in local memory tile
		driverStatus |= XAie_DmaSetLock(&DmaInst, XAie_LockInit(70, 1), XAie_LockInit(71, 1)); //adjust lock id with 64 offset to refer to local memory tile lock
		driverStatus |= XAie_DmaSetNextBd(&DmaInst, 27, XAIE_ENABLE);
		driverStatus |= XAie_DmaEnableBd(&DmaInst);
		driverStatus |= XAie_DmaWriteBd(&DevInst, &DmaInst, XAie_TileLoc(3, 1), 26);
	}
	{
		XAie_DmaDesc DmaInst;
		driverStatus |= XAie_DmaDescInit(&DevInst, &DmaInst, XAie_TileLoc(3, 1));
		XAie_DmaDimDesc aie2DmaDimDesc[4] = {{.AieMlDimDesc = {1, 7}}, {.AieMlDimDesc = {230, 7}}, {.AieMlDimDesc = {14260, 3}}, {.AieMlDimDesc = {2, 0}}, };
		XAie_DmaTensor aie2DmaTensor = {4, aie2DmaDimDesc};
		driverStatus |= XAie_DmaSetMultiDimAddr(&DmaInst, &aie2DmaTensor, 558896, 65856); //adjust address with 524288 offset to refer to memory space in local memory tile
		driverStatus |= XAie_DmaSetLock(&DmaInst, XAie_LockInit(70, 1), XAie_LockInit(71, 1)); //adjust lock id with 64 offset to refer to local memory tile lock
		driverStatus |= XAie_DmaSetNextBd(&DmaInst, 28, XAIE_ENABLE);
		driverStatus |= XAie_DmaEnableBd(&DmaInst);
		driverStatus |= XAie_DmaWriteBd(&DevInst, &DmaInst, XAie_TileLoc(3, 1), 27);
	}
	{
		XAie_DmaDesc DmaInst;
		driverStatus |= XAie_DmaDescInit(&DevInst, &DmaInst, XAie_TileLoc(3, 1));
		XAie_DmaDimDesc aie2DmaDimDesc[4] = {{.AieMlDimDesc = {1, 7}}, {.AieMlDimDesc = {230, 7}}, {.AieMlDimDesc = {14260, 3}}, {.AieMlDimDesc = {2, 0}}, };
		XAie_DmaTensor aie2DmaTensor = {4, aie2DmaDimDesc};
		driverStatus |= XAie_DmaSetMultiDimAddr(&DmaInst, &aie2DmaTensor, 560736, 65856); //adjust address with 524288 offset to refer to memory space in local memory tile
		driverStatus |= XAie_DmaSetLock(&DmaInst, XAie_LockInit(70, 1), XAie_LockInit(71, 1)); //adjust lock id with 64 offset to refer to local memory tile lock
		driverStatus |= XAie_DmaSetNextBd(&DmaInst, 29, XAIE_ENABLE);
		driverStatus |= XAie_DmaEnableBd(&DmaInst);
		driverStatus |= XAie_DmaWriteBd(&DevInst, &DmaInst, XAie_TileLoc(3, 1), 28);
	}
	{
		XAie_DmaDesc DmaInst;
		driverStatus |= XAie_DmaDescInit(&DevInst, &DmaInst, XAie_TileLoc(3, 1));
		XAie_DmaDimDesc aie2DmaDimDesc[4] = {{.AieMlDimDesc = {1, 7}}, {.AieMlDimDesc = {230, 7}}, {.AieMlDimDesc = {14260, 3}}, {.AieMlDimDesc = {2, 0}}, };
		XAie_DmaTensor aie2DmaTensor = {4, aie2DmaDimDesc};
		driverStatus |= XAie_DmaSetMultiDimAddr(&DmaInst, &aie2DmaTensor, 562576, 65856); //adjust address with 524288 offset to refer to memory space in local memory tile
		driverStatus |= XAie_DmaSetLock(&DmaInst, XAie_LockInit(70, 1), XAie_LockInit(71, 1)); //adjust lock id with 64 offset to refer to local memory tile lock
		driverStatus |= XAie_DmaSetNextBd(&DmaInst, 30, XAIE_ENABLE);
		driverStatus |= XAie_DmaEnableBd(&DmaInst);
		driverStatus |= XAie_DmaWriteBd(&DevInst, &DmaInst, XAie_TileLoc(3, 1), 29);
	}
	{
		XAie_DmaDesc DmaInst;
		driverStatus |= XAie_DmaDescInit(&DevInst, &DmaInst, XAie_TileLoc(3, 1));
		XAie_DmaDimDesc aie2DmaDimDesc[4] = {{.AieMlDimDesc = {1, 7}}, {.AieMlDimDesc = {230, 7}}, {.AieMlDimDesc = {14260, 3}}, {.AieMlDimDesc = {2, 0}}, };
		XAie_DmaTensor aie2DmaTensor = {4, aie2DmaDimDesc};
		driverStatus |= XAie_DmaSetMultiDimAddr(&DmaInst, &aie2DmaTensor, 564416, 65856); //adjust address with 524288 offset to refer to memory space in local memory tile
		driverStatus |= XAie_DmaSetLock(&DmaInst, XAie_LockInit(70, 1), XAie_LockInit(71, 1)); //adjust lock id with 64 offset to refer to local memory tile lock
		driverStatus |= XAie_DmaSetNextBd(&DmaInst, 31, XAIE_ENABLE);
		driverStatus |= XAie_DmaEnableBd(&DmaInst);
		driverStatus |= XAie_DmaWriteBd(&DevInst, &DmaInst, XAie_TileLoc(3, 1), 30);
	}
	{
		XAie_DmaDesc DmaInst;
		driverStatus |= XAie_DmaDescInit(&DevInst, &DmaInst, XAie_TileLoc(3, 1));
		XAie_DmaDimDesc aie2DmaDimDesc[4] = {{.AieMlDimDesc = {1, 7}}, {.AieMlDimDesc = {230, 7}}, {.AieMlDimDesc = {14260, 3}}, {.AieMlDimDesc = {2, 0}}, };
		XAie_DmaTensor aie2DmaTensor = {4, aie2DmaDimDesc};
		driverStatus |= XAie_DmaSetMultiDimAddr(&DmaInst, &aie2DmaTensor, 566256, 65856); //adjust address with 524288 offset to refer to memory space in local memory tile
		driverStatus |= XAie_DmaSetLock(&DmaInst, XAie_LockInit(70, 1), XAie_LockInit(71, 1)); //adjust lock id with 64 offset to refer to local memory tile lock
		driverStatus |= XAie_DmaSetNextBd(&DmaInst, 32, XAIE_ENABLE);
		driverStatus |= XAie_DmaEnableBd(&DmaInst);
		driverStatus |= XAie_DmaWriteBd(&DevInst, &DmaInst, XAie_TileLoc(3, 1), 31);
	}
	{
		XAie_DmaDesc DmaInst;
		driverStatus |= XAie_DmaDescInit(&DevInst, &DmaInst, XAie_TileLoc(3, 1));
		XAie_DmaDimDesc aie2DmaDimDesc[4] = {{.AieMlDimDesc = {1, 7}}, {.AieMlDimDesc = {230, 7}}, {.AieMlDimDesc = {14260, 3}}, {.AieMlDimDesc = {2, 0}}, };
		XAie_DmaTensor aie2DmaTensor = {4, aie2DmaDimDesc};
		driverStatus |= XAie_DmaSetMultiDimAddr(&DmaInst, &aie2DmaTensor, 568096, 65856); //adjust address with 524288 offset to refer to memory space in local memory tile
		driverStatus |= XAie_DmaSetLock(&DmaInst, XAie_LockInit(70, 1), XAie_LockInit(71, 1)); //adjust lock id with 64 offset to refer to local memory tile lock
		driverStatus |= XAie_DmaSetNextBd(&DmaInst, 33, XAIE_ENABLE);
		driverStatus |= XAie_DmaEnableBd(&DmaInst);
		driverStatus |= XAie_DmaWriteBd(&DevInst, &DmaInst, XAie_TileLoc(3, 1), 32);
	}
	{
		XAie_DmaDesc DmaInst;
		driverStatus |= XAie_DmaDescInit(&DevInst, &DmaInst, XAie_TileLoc(3, 1));
		XAie_DmaDimDesc aie2DmaDimDesc[4] = {{.AieMlDimDesc = {1, 7}}, {.AieMlDimDesc = {230, 7}}, {.AieMlDimDesc = {14260, 3}}, {.AieMlDimDesc = {2, 0}}, };
		XAie_DmaTensor aie2DmaTensor = {4, aie2DmaDimDesc};
		driverStatus |= XAie_DmaSetMultiDimAddr(&DmaInst, &aie2DmaTensor, 557056, 65856); //adjust address with 524288 offset to refer to memory space in local memory tile
		driverStatus |= XAie_DmaSetLock(&DmaInst, XAie_LockInit(70, 0), XAie_LockInit(71, -1)); //adjust lock id with 64 offset to refer to local memory tile lock
		driverStatus |= XAie_DmaSetNextBd(&DmaInst, 34, XAIE_ENABLE);
		driverStatus |= XAie_DmaEnableBd(&DmaInst);
		driverStatus |= XAie_DmaWriteBd(&DevInst, &DmaInst, XAie_TileLoc(3, 1), 33);
	}
	{
		XAie_DmaDesc DmaInst;
		driverStatus |= XAie_DmaDescInit(&DevInst, &DmaInst, XAie_TileLoc(3, 1));
		XAie_DmaDimDesc aie2DmaDimDesc[4] = {{.AieMlDimDesc = {1, 7}}, {.AieMlDimDesc = {230, 7}}, {.AieMlDimDesc = {14260, 3}}, {.AieMlDimDesc = {2, 0}}, };
		XAie_DmaTensor aie2DmaTensor = {4, aie2DmaDimDesc};
		driverStatus |= XAie_DmaSetMultiDimAddr(&DmaInst, &aie2DmaTensor, 558896, 65856); //adjust address with 524288 offset to refer to memory space in local memory tile
		driverStatus |= XAie_DmaSetLock(&DmaInst, XAie_LockInit(70, 0), XAie_LockInit(71, -1)); //adjust lock id with 64 offset to refer to local memory tile lock
		driverStatus |= XAie_DmaSetNextBd(&DmaInst, 35, XAIE_ENABLE);
		driverStatus |= XAie_DmaEnableBd(&DmaInst);
		driverStatus |= XAie_DmaWriteBd(&DevInst, &DmaInst, XAie_TileLoc(3, 1), 34);
	}
	{
		XAie_DmaDesc DmaInst;
		driverStatus |= XAie_DmaDescInit(&DevInst, &DmaInst, XAie_TileLoc(3, 1));
		XAie_DmaDimDesc aie2DmaDimDesc[4] = {{.AieMlDimDesc = {1, 7}}, {.AieMlDimDesc = {230, 7}}, {.AieMlDimDesc = {14260, 3}}, {.AieMlDimDesc = {2, 0}}, };
		XAie_DmaTensor aie2DmaTensor = {4, aie2DmaDimDesc};
		driverStatus |= XAie_DmaSetMultiDimAddr(&DmaInst, &aie2DmaTensor, 560736, 65856); //adjust address with 524288 offset to refer to memory space in local memory tile
		driverStatus |= XAie_DmaSetLock(&DmaInst, XAie_LockInit(70, 0), XAie_LockInit(71, -1)); //adjust lock id with 64 offset to refer to local memory tile lock
		driverStatus |= XAie_DmaSetNextBd(&DmaInst, 36, XAIE_ENABLE);
		driverStatus |= XAie_DmaEnableBd(&DmaInst);
		driverStatus |= XAie_DmaWriteBd(&DevInst, &DmaInst, XAie_TileLoc(3, 1), 35);
	}
	{
		XAie_DmaDesc DmaInst;
		driverStatus |= XAie_DmaDescInit(&DevInst, &DmaInst, XAie_TileLoc(3, 1));
		XAie_DmaDimDesc aie2DmaDimDesc[4] = {{.AieMlDimDesc = {1, 7}}, {.AieMlDimDesc = {230, 7}}, {.AieMlDimDesc = {14260, 3}}, {.AieMlDimDesc = {2, 0}}, };
		XAie_DmaTensor aie2DmaTensor = {4, aie2DmaDimDesc};
		driverStatus |= XAie_DmaSetMultiDimAddr(&DmaInst, &aie2DmaTensor, 562576, 65856); //adjust address with 524288 offset to refer to memory space in local memory tile
		driverStatus |= XAie_DmaSetLock(&DmaInst, XAie_LockInit(70, 0), XAie_LockInit(71, -1)); //adjust lock id with 64 offset to refer to local memory tile lock
		driverStatus |= XAie_DmaSetNextBd(&DmaInst, 37, XAIE_ENABLE);
		driverStatus |= XAie_DmaEnableBd(&DmaInst);
		driverStatus |= XAie_DmaWriteBd(&DevInst, &DmaInst, XAie_TileLoc(3, 1), 36);
	}
	{
		XAie_DmaDesc DmaInst;
		driverStatus |= XAie_DmaDescInit(&DevInst, &DmaInst, XAie_TileLoc(3, 1));
		XAie_DmaDimDesc aie2DmaDimDesc[4] = {{.AieMlDimDesc = {1, 7}}, {.AieMlDimDesc = {230, 7}}, {.AieMlDimDesc = {14260, 3}}, {.AieMlDimDesc = {2, 0}}, };
		XAie_DmaTensor aie2DmaTensor = {4, aie2DmaDimDesc};
		driverStatus |= XAie_DmaSetMultiDimAddr(&DmaInst, &aie2DmaTensor, 564416, 65856); //adjust address with 524288 offset to refer to memory space in local memory tile
		driverStatus |= XAie_DmaSetLock(&DmaInst, XAie_LockInit(70, 0), XAie_LockInit(71, -1)); //adjust lock id with 64 offset to refer to local memory tile lock
		driverStatus |= XAie_DmaSetNextBd(&DmaInst, 38, XAIE_ENABLE);
		driverStatus |= XAie_DmaEnableBd(&DmaInst);
		driverStatus |= XAie_DmaWriteBd(&DevInst, &DmaInst, XAie_TileLoc(3, 1), 37);
	}
	{
		XAie_DmaDesc DmaInst;
		driverStatus |= XAie_DmaDescInit(&DevInst, &DmaInst, XAie_TileLoc(3, 1));
		XAie_DmaDimDesc aie2DmaDimDesc[4] = {{.AieMlDimDesc = {1, 7}}, {.AieMlDimDesc = {230, 7}}, {.AieMlDimDesc = {14260, 3}}, {.AieMlDimDesc = {2, 0}}, };
		XAie_DmaTensor aie2DmaTensor = {4, aie2DmaDimDesc};
		driverStatus |= XAie_DmaSetMultiDimAddr(&DmaInst, &aie2DmaTensor, 566256, 65856); //adjust address with 524288 offset to refer to memory space in local memory tile
		driverStatus |= XAie_DmaSetLock(&DmaInst, XAie_LockInit(70, 0), XAie_LockInit(71, -1)); //adjust lock id with 64 offset to refer to local memory tile lock
		driverStatus |= XAie_DmaSetNextBd(&DmaInst, 39, XAIE_ENABLE);
		driverStatus |= XAie_DmaEnableBd(&DmaInst);
		driverStatus |= XAie_DmaWriteBd(&DevInst, &DmaInst, XAie_TileLoc(3, 1), 38);
	}
	{
		XAie_DmaDesc DmaInst;
		driverStatus |= XAie_DmaDescInit(&DevInst, &DmaInst, XAie_TileLoc(3, 1));
		XAie_DmaDimDesc aie2DmaDimDesc[4] = {{.AieMlDimDesc = {1, 7}}, {.AieMlDimDesc = {230, 7}}, {.AieMlDimDesc = {14260, 3}}, {.AieMlDimDesc = {2, 0}}, };
		XAie_DmaTensor aie2DmaTensor = {4, aie2DmaDimDesc};
		driverStatus |= XAie_DmaSetMultiDimAddr(&DmaInst, &aie2DmaTensor, 568096, 65856); //adjust address with 524288 offset to refer to memory space in local memory tile
		driverStatus |= XAie_DmaSetLock(&DmaInst, XAie_LockInit(70, 0), XAie_LockInit(71, -1)); //adjust lock id with 64 offset to refer to local memory tile lock
		driverStatus |= XAie_DmaSetNextBd(&DmaInst, 26, XAIE_ENABLE);
		driverStatus |= XAie_DmaEnableBd(&DmaInst);
		driverStatus |= XAie_DmaWriteBd(&DevInst, &DmaInst, XAie_TileLoc(3, 1), 39);
	}
	{
		driverStatus |= XAie_DmaChannelSetStartQueue(&DevInst, XAie_TileLoc(3, 1), 1, DMA_MM2S, 26, 1, XAIE_DISABLE);
	}

	//Setting memory tile DMA for EG.input[3].in[0]
	{
		XAie_DmaDesc DmaInst;
		driverStatus |= XAie_DmaDescInit(&DevInst, &DmaInst, XAie_TileLoc(6, 2));
		XAie_DmaDimDesc aie2DmaDimDesc[1] = {{.AieMlDimDesc = {1, 0}}, };
		XAie_DmaTensor aie2DmaTensor = {1, aie2DmaDimDesc};
		driverStatus |= XAie_DmaSetMultiDimAddr(&DmaInst, &aie2DmaTensor, 524288, 171120); //adjust address with 524288 offset to refer to memory space in local memory tile
		driverStatus |= XAie_DmaSetLock(&DmaInst, XAie_LockInit(67, 0), XAie_LockInit(66, 1)); //adjust lock id with 64 offset to refer to local memory tile lock
		driverStatus |= XAie_DmaSetNextBd(&DmaInst, 25, XAIE_ENABLE);
		driverStatus |= XAie_DmaEnableBd(&DmaInst);
		driverStatus |= XAie_DmaWriteBd(&DevInst, &DmaInst, XAie_TileLoc(6, 2), 24);
	}
	{
		XAie_DmaDesc DmaInst;
		driverStatus |= XAie_DmaDescInit(&DevInst, &DmaInst, XAie_TileLoc(6, 2));
		XAie_DmaDimDesc aie2DmaDimDesc[1] = {{.AieMlDimDesc = {1, 0}}, };
		XAie_DmaTensor aie2DmaTensor = {1, aie2DmaDimDesc};
		driverStatus |= XAie_DmaSetMultiDimAddr(&DmaInst, &aie2DmaTensor, 524288, 171120); //adjust address with 524288 offset to refer to memory space in local memory tile
		driverStatus |= XAie_DmaSetLock(&DmaInst, XAie_LockInit(67, 7), XAie_LockInit(66, -1)); //adjust lock id with 64 offset to refer to local memory tile lock
		driverStatus |= XAie_DmaSetNextBd(&DmaInst, 24, XAIE_ENABLE);
		driverStatus |= XAie_DmaEnableBd(&DmaInst);
		driverStatus |= XAie_DmaWriteBd(&DevInst, &DmaInst, XAie_TileLoc(6, 2), 25);
	}
	{
		XAie_DmaDeclareQueueConfig(startQueueDesc, 24, 1, XAIE_DISABLE, XAIE_DISABLE);
		driverStatus |= XAie_DmaChannelSetStartQueueGeneric(&DevInst, XAie_TileLoc(6, 2), 1, DMA_S2MM, &startQueueDesc);
	}

	//Setting memory tile DMA for EG.input[3].out[0]
	{
		XAie_DmaDesc DmaInst;
		driverStatus |= XAie_DmaDescInit(&DevInst, &DmaInst, XAie_TileLoc(6, 2));
		XAie_DmaDimDesc aie2DmaDimDesc[4] = {{.AieMlDimDesc = {1, 7}}, {.AieMlDimDesc = {230, 7}}, {.AieMlDimDesc = {14260, 3}}, {.AieMlDimDesc = {2, 0}}, };
		XAie_DmaTensor aie2DmaTensor = {4, aie2DmaDimDesc};
		driverStatus |= XAie_DmaSetMultiDimAddr(&DmaInst, &aie2DmaTensor, 524288, 65856); //adjust address with 524288 offset to refer to memory space in local memory tile
		driverStatus |= XAie_DmaSetLock(&DmaInst, XAie_LockInit(66, 1), XAie_LockInit(67, 1)); //adjust lock id with 64 offset to refer to local memory tile lock
		driverStatus |= XAie_DmaSetNextBd(&DmaInst, 27, XAIE_ENABLE);
		driverStatus |= XAie_DmaEnableBd(&DmaInst);
		driverStatus |= XAie_DmaWriteBd(&DevInst, &DmaInst, XAie_TileLoc(6, 2), 26);
	}
	{
		XAie_DmaDesc DmaInst;
		driverStatus |= XAie_DmaDescInit(&DevInst, &DmaInst, XAie_TileLoc(6, 2));
		XAie_DmaDimDesc aie2DmaDimDesc[4] = {{.AieMlDimDesc = {1, 7}}, {.AieMlDimDesc = {230, 7}}, {.AieMlDimDesc = {14260, 3}}, {.AieMlDimDesc = {2, 0}}, };
		XAie_DmaTensor aie2DmaTensor = {4, aie2DmaDimDesc};
		driverStatus |= XAie_DmaSetMultiDimAddr(&DmaInst, &aie2DmaTensor, 526128, 65856); //adjust address with 524288 offset to refer to memory space in local memory tile
		driverStatus |= XAie_DmaSetLock(&DmaInst, XAie_LockInit(66, 1), XAie_LockInit(67, 1)); //adjust lock id with 64 offset to refer to local memory tile lock
		driverStatus |= XAie_DmaSetNextBd(&DmaInst, 28, XAIE_ENABLE);
		driverStatus |= XAie_DmaEnableBd(&DmaInst);
		driverStatus |= XAie_DmaWriteBd(&DevInst, &DmaInst, XAie_TileLoc(6, 2), 27);
	}
	{
		XAie_DmaDesc DmaInst;
		driverStatus |= XAie_DmaDescInit(&DevInst, &DmaInst, XAie_TileLoc(6, 2));
		XAie_DmaDimDesc aie2DmaDimDesc[4] = {{.AieMlDimDesc = {1, 7}}, {.AieMlDimDesc = {230, 7}}, {.AieMlDimDesc = {14260, 3}}, {.AieMlDimDesc = {2, 0}}, };
		XAie_DmaTensor aie2DmaTensor = {4, aie2DmaDimDesc};
		driverStatus |= XAie_DmaSetMultiDimAddr(&DmaInst, &aie2DmaTensor, 527968, 65856); //adjust address with 524288 offset to refer to memory space in local memory tile
		driverStatus |= XAie_DmaSetLock(&DmaInst, XAie_LockInit(66, 1), XAie_LockInit(67, 1)); //adjust lock id with 64 offset to refer to local memory tile lock
		driverStatus |= XAie_DmaSetNextBd(&DmaInst, 29, XAIE_ENABLE);
		driverStatus |= XAie_DmaEnableBd(&DmaInst);
		driverStatus |= XAie_DmaWriteBd(&DevInst, &DmaInst, XAie_TileLoc(6, 2), 28);
	}
	{
		XAie_DmaDesc DmaInst;
		driverStatus |= XAie_DmaDescInit(&DevInst, &DmaInst, XAie_TileLoc(6, 2));
		XAie_DmaDimDesc aie2DmaDimDesc[4] = {{.AieMlDimDesc = {1, 7}}, {.AieMlDimDesc = {230, 7}}, {.AieMlDimDesc = {14260, 3}}, {.AieMlDimDesc = {2, 0}}, };
		XAie_DmaTensor aie2DmaTensor = {4, aie2DmaDimDesc};
		driverStatus |= XAie_DmaSetMultiDimAddr(&DmaInst, &aie2DmaTensor, 529808, 65856); //adjust address with 524288 offset to refer to memory space in local memory tile
		driverStatus |= XAie_DmaSetLock(&DmaInst, XAie_LockInit(66, 1), XAie_LockInit(67, 1)); //adjust lock id with 64 offset to refer to local memory tile lock
		driverStatus |= XAie_DmaSetNextBd(&DmaInst, 30, XAIE_ENABLE);
		driverStatus |= XAie_DmaEnableBd(&DmaInst);
		driverStatus |= XAie_DmaWriteBd(&DevInst, &DmaInst, XAie_TileLoc(6, 2), 29);
	}
	{
		XAie_DmaDesc DmaInst;
		driverStatus |= XAie_DmaDescInit(&DevInst, &DmaInst, XAie_TileLoc(6, 2));
		XAie_DmaDimDesc aie2DmaDimDesc[4] = {{.AieMlDimDesc = {1, 7}}, {.AieMlDimDesc = {230, 7}}, {.AieMlDimDesc = {14260, 3}}, {.AieMlDimDesc = {2, 0}}, };
		XAie_DmaTensor aie2DmaTensor = {4, aie2DmaDimDesc};
		driverStatus |= XAie_DmaSetMultiDimAddr(&DmaInst, &aie2DmaTensor, 531648, 65856); //adjust address with 524288 offset to refer to memory space in local memory tile
		driverStatus |= XAie_DmaSetLock(&DmaInst, XAie_LockInit(66, 1), XAie_LockInit(67, 1)); //adjust lock id with 64 offset to refer to local memory tile lock
		driverStatus |= XAie_DmaSetNextBd(&DmaInst, 31, XAIE_ENABLE);
		driverStatus |= XAie_DmaEnableBd(&DmaInst);
		driverStatus |= XAie_DmaWriteBd(&DevInst, &DmaInst, XAie_TileLoc(6, 2), 30);
	}
	{
		XAie_DmaDesc DmaInst;
		driverStatus |= XAie_DmaDescInit(&DevInst, &DmaInst, XAie_TileLoc(6, 2));
		XAie_DmaDimDesc aie2DmaDimDesc[4] = {{.AieMlDimDesc = {1, 7}}, {.AieMlDimDesc = {230, 7}}, {.AieMlDimDesc = {14260, 3}}, {.AieMlDimDesc = {2, 0}}, };
		XAie_DmaTensor aie2DmaTensor = {4, aie2DmaDimDesc};
		driverStatus |= XAie_DmaSetMultiDimAddr(&DmaInst, &aie2DmaTensor, 533488, 65856); //adjust address with 524288 offset to refer to memory space in local memory tile
		driverStatus |= XAie_DmaSetLock(&DmaInst, XAie_LockInit(66, 1), XAie_LockInit(67, 1)); //adjust lock id with 64 offset to refer to local memory tile lock
		driverStatus |= XAie_DmaSetNextBd(&DmaInst, 32, XAIE_ENABLE);
		driverStatus |= XAie_DmaEnableBd(&DmaInst);
		driverStatus |= XAie_DmaWriteBd(&DevInst, &DmaInst, XAie_TileLoc(6, 2), 31);
	}
	{
		XAie_DmaDesc DmaInst;
		driverStatus |= XAie_DmaDescInit(&DevInst, &DmaInst, XAie_TileLoc(6, 2));
		XAie_DmaDimDesc aie2DmaDimDesc[4] = {{.AieMlDimDesc = {1, 7}}, {.AieMlDimDesc = {230, 7}}, {.AieMlDimDesc = {14260, 3}}, {.AieMlDimDesc = {2, 0}}, };
		XAie_DmaTensor aie2DmaTensor = {4, aie2DmaDimDesc};
		driverStatus |= XAie_DmaSetMultiDimAddr(&DmaInst, &aie2DmaTensor, 535328, 65856); //adjust address with 524288 offset to refer to memory space in local memory tile
		driverStatus |= XAie_DmaSetLock(&DmaInst, XAie_LockInit(66, 1), XAie_LockInit(67, 1)); //adjust lock id with 64 offset to refer to local memory tile lock
		driverStatus |= XAie_DmaSetNextBd(&DmaInst, 33, XAIE_ENABLE);
		driverStatus |= XAie_DmaEnableBd(&DmaInst);
		driverStatus |= XAie_DmaWriteBd(&DevInst, &DmaInst, XAie_TileLoc(6, 2), 32);
	}
	{
		XAie_DmaDesc DmaInst;
		driverStatus |= XAie_DmaDescInit(&DevInst, &DmaInst, XAie_TileLoc(6, 2));
		XAie_DmaDimDesc aie2DmaDimDesc[4] = {{.AieMlDimDesc = {1, 7}}, {.AieMlDimDesc = {230, 7}}, {.AieMlDimDesc = {14260, 3}}, {.AieMlDimDesc = {2, 0}}, };
		XAie_DmaTensor aie2DmaTensor = {4, aie2DmaDimDesc};
		driverStatus |= XAie_DmaSetMultiDimAddr(&DmaInst, &aie2DmaTensor, 524288, 65856); //adjust address with 524288 offset to refer to memory space in local memory tile
		driverStatus |= XAie_DmaSetLock(&DmaInst, XAie_LockInit(66, 0), XAie_LockInit(67, -1)); //adjust lock id with 64 offset to refer to local memory tile lock
		driverStatus |= XAie_DmaSetNextBd(&DmaInst, 34, XAIE_ENABLE);
		driverStatus |= XAie_DmaEnableBd(&DmaInst);
		driverStatus |= XAie_DmaWriteBd(&DevInst, &DmaInst, XAie_TileLoc(6, 2), 33);
	}
	{
		XAie_DmaDesc DmaInst;
		driverStatus |= XAie_DmaDescInit(&DevInst, &DmaInst, XAie_TileLoc(6, 2));
		XAie_DmaDimDesc aie2DmaDimDesc[4] = {{.AieMlDimDesc = {1, 7}}, {.AieMlDimDesc = {230, 7}}, {.AieMlDimDesc = {14260, 3}}, {.AieMlDimDesc = {2, 0}}, };
		XAie_DmaTensor aie2DmaTensor = {4, aie2DmaDimDesc};
		driverStatus |= XAie_DmaSetMultiDimAddr(&DmaInst, &aie2DmaTensor, 526128, 65856); //adjust address with 524288 offset to refer to memory space in local memory tile
		driverStatus |= XAie_DmaSetLock(&DmaInst, XAie_LockInit(66, 0), XAie_LockInit(67, -1)); //adjust lock id with 64 offset to refer to local memory tile lock
		driverStatus |= XAie_DmaSetNextBd(&DmaInst, 35, XAIE_ENABLE);
		driverStatus |= XAie_DmaEnableBd(&DmaInst);
		driverStatus |= XAie_DmaWriteBd(&DevInst, &DmaInst, XAie_TileLoc(6, 2), 34);
	}
	{
		XAie_DmaDesc DmaInst;
		driverStatus |= XAie_DmaDescInit(&DevInst, &DmaInst, XAie_TileLoc(6, 2));
		XAie_DmaDimDesc aie2DmaDimDesc[4] = {{.AieMlDimDesc = {1, 7}}, {.AieMlDimDesc = {230, 7}}, {.AieMlDimDesc = {14260, 3}}, {.AieMlDimDesc = {2, 0}}, };
		XAie_DmaTensor aie2DmaTensor = {4, aie2DmaDimDesc};
		driverStatus |= XAie_DmaSetMultiDimAddr(&DmaInst, &aie2DmaTensor, 527968, 65856); //adjust address with 524288 offset to refer to memory space in local memory tile
		driverStatus |= XAie_DmaSetLock(&DmaInst, XAie_LockInit(66, 0), XAie_LockInit(67, -1)); //adjust lock id with 64 offset to refer to local memory tile lock
		driverStatus |= XAie_DmaSetNextBd(&DmaInst, 36, XAIE_ENABLE);
		driverStatus |= XAie_DmaEnableBd(&DmaInst);
		driverStatus |= XAie_DmaWriteBd(&DevInst, &DmaInst, XAie_TileLoc(6, 2), 35);
	}
	{
		XAie_DmaDesc DmaInst;
		driverStatus |= XAie_DmaDescInit(&DevInst, &DmaInst, XAie_TileLoc(6, 2));
		XAie_DmaDimDesc aie2DmaDimDesc[4] = {{.AieMlDimDesc = {1, 7}}, {.AieMlDimDesc = {230, 7}}, {.AieMlDimDesc = {14260, 3}}, {.AieMlDimDesc = {2, 0}}, };
		XAie_DmaTensor aie2DmaTensor = {4, aie2DmaDimDesc};
		driverStatus |= XAie_DmaSetMultiDimAddr(&DmaInst, &aie2DmaTensor, 529808, 65856); //adjust address with 524288 offset to refer to memory space in local memory tile
		driverStatus |= XAie_DmaSetLock(&DmaInst, XAie_LockInit(66, 0), XAie_LockInit(67, -1)); //adjust lock id with 64 offset to refer to local memory tile lock
		driverStatus |= XAie_DmaSetNextBd(&DmaInst, 37, XAIE_ENABLE);
		driverStatus |= XAie_DmaEnableBd(&DmaInst);
		driverStatus |= XAie_DmaWriteBd(&DevInst, &DmaInst, XAie_TileLoc(6, 2), 36);
	}
	{
		XAie_DmaDesc DmaInst;
		driverStatus |= XAie_DmaDescInit(&DevInst, &DmaInst, XAie_TileLoc(6, 2));
		XAie_DmaDimDesc aie2DmaDimDesc[4] = {{.AieMlDimDesc = {1, 7}}, {.AieMlDimDesc = {230, 7}}, {.AieMlDimDesc = {14260, 3}}, {.AieMlDimDesc = {2, 0}}, };
		XAie_DmaTensor aie2DmaTensor = {4, aie2DmaDimDesc};
		driverStatus |= XAie_DmaSetMultiDimAddr(&DmaInst, &aie2DmaTensor, 531648, 65856); //adjust address with 524288 offset to refer to memory space in local memory tile
		driverStatus |= XAie_DmaSetLock(&DmaInst, XAie_LockInit(66, 0), XAie_LockInit(67, -1)); //adjust lock id with 64 offset to refer to local memory tile lock
		driverStatus |= XAie_DmaSetNextBd(&DmaInst, 38, XAIE_ENABLE);
		driverStatus |= XAie_DmaEnableBd(&DmaInst);
		driverStatus |= XAie_DmaWriteBd(&DevInst, &DmaInst, XAie_TileLoc(6, 2), 37);
	}
	{
		XAie_DmaDesc DmaInst;
		driverStatus |= XAie_DmaDescInit(&DevInst, &DmaInst, XAie_TileLoc(6, 2));
		XAie_DmaDimDesc aie2DmaDimDesc[4] = {{.AieMlDimDesc = {1, 7}}, {.AieMlDimDesc = {230, 7}}, {.AieMlDimDesc = {14260, 3}}, {.AieMlDimDesc = {2, 0}}, };
		XAie_DmaTensor aie2DmaTensor = {4, aie2DmaDimDesc};
		driverStatus |= XAie_DmaSetMultiDimAddr(&DmaInst, &aie2DmaTensor, 533488, 65856); //adjust address with 524288 offset to refer to memory space in local memory tile
		driverStatus |= XAie_DmaSetLock(&DmaInst, XAie_LockInit(66, 0), XAie_LockInit(67, -1)); //adjust lock id with 64 offset to refer to local memory tile lock
		driverStatus |= XAie_DmaSetNextBd(&DmaInst, 39, XAIE_ENABLE);
		driverStatus |= XAie_DmaEnableBd(&DmaInst);
		driverStatus |= XAie_DmaWriteBd(&DevInst, &DmaInst, XAie_TileLoc(6, 2), 38);
	}
	{
		XAie_DmaDesc DmaInst;
		driverStatus |= XAie_DmaDescInit(&DevInst, &DmaInst, XAie_TileLoc(6, 2));
		XAie_DmaDimDesc aie2DmaDimDesc[4] = {{.AieMlDimDesc = {1, 7}}, {.AieMlDimDesc = {230, 7}}, {.AieMlDimDesc = {14260, 3}}, {.AieMlDimDesc = {2, 0}}, };
		XAie_DmaTensor aie2DmaTensor = {4, aie2DmaDimDesc};
		driverStatus |= XAie_DmaSetMultiDimAddr(&DmaInst, &aie2DmaTensor, 535328, 65856); //adjust address with 524288 offset to refer to memory space in local memory tile
		driverStatus |= XAie_DmaSetLock(&DmaInst, XAie_LockInit(66, 0), XAie_LockInit(67, -1)); //adjust lock id with 64 offset to refer to local memory tile lock
		driverStatus |= XAie_DmaSetNextBd(&DmaInst, 26, XAIE_ENABLE);
		driverStatus |= XAie_DmaEnableBd(&DmaInst);
		driverStatus |= XAie_DmaWriteBd(&DevInst, &DmaInst, XAie_TileLoc(6, 2), 39);
	}
	{
		driverStatus |= XAie_DmaChannelSetStartQueue(&DevInst, XAie_TileLoc(6, 2), 1, DMA_MM2S, 26, 1, XAIE_DISABLE);
	}

	//Setting shim tile DMA for EG.ddr_weights[0].out[0]
	{
		XAie_DmaDesc DmaInst;
		driverStatus |= XAie_DmaDescInit(&DevInst, &DmaInst, XAie_TileLoc(3, 0));
		XAie_DmaDimDesc aie2DmaDimDesc[1] = {{.AieMlDimDesc = {1, 0}}, };
		XAie_DmaTensor aie2DmaTensor = {1, aie2DmaDimDesc};
		driverStatus |= XAie_DmaSetMultiDimAddr(&DmaInst, &aie2DmaTensor, 0, 4704);
		driverStatus |= XAie_DmaSetLock(&DmaInst, XAie_LockInit(0, 0), XAie_LockInit(0, 0));
		driverStatus |= XAie_DmaEnableBd(&DmaInst);
		driverStatus |= XAie_DmaWriteBd(&DevInst, &DmaInst, XAie_TileLoc(3, 0), 0);
	}

	//Setting shim tile DMA for EG.ddr_weights[1].out[0]
	{
		XAie_DmaDesc DmaInst;
		driverStatus |= XAie_DmaDescInit(&DevInst, &DmaInst, XAie_TileLoc(2, 0));
		XAie_DmaDimDesc aie2DmaDimDesc[1] = {{.AieMlDimDesc = {1, 0}}, };
		XAie_DmaTensor aie2DmaTensor = {1, aie2DmaDimDesc};
		driverStatus |= XAie_DmaSetMultiDimAddr(&DmaInst, &aie2DmaTensor, 0, 4704);
		driverStatus |= XAie_DmaSetLock(&DmaInst, XAie_LockInit(0, 0), XAie_LockInit(0, 0));
		driverStatus |= XAie_DmaEnableBd(&DmaInst);
		driverStatus |= XAie_DmaWriteBd(&DevInst, &DmaInst, XAie_TileLoc(2, 0), 2);
	}

	//Setting shim tile DMA for EG.ddrin[0].out[0]
	{
		XAie_DmaDesc DmaInst;
		driverStatus |= XAie_DmaDescInit(&DevInst, &DmaInst, XAie_TileLoc(6, 0));
		XAie_DmaDimDesc aie2DmaDimDesc[1] = {{.AieMlDimDesc = {1, 0}}, };
		XAie_DmaTensor aie2DmaTensor = {1, aie2DmaDimDesc};
		driverStatus |= XAie_DmaSetMultiDimAddr(&DmaInst, &aie2DmaTensor, 0, 171120);
		driverStatus |= XAie_DmaSetLock(&DmaInst, XAie_LockInit(0, 0), XAie_LockInit(0, 0));
		driverStatus |= XAie_DmaEnableBd(&DmaInst);
		driverStatus |= XAie_DmaWriteBd(&DevInst, &DmaInst, XAie_TileLoc(6, 0), 1);
	}

	//Setting shim tile DMA for EG.ddrout[0].in[0]
	{
		XAie_DmaDesc DmaInst;
		driverStatus |= XAie_DmaDescInit(&DevInst, &DmaInst, XAie_TileLoc(2, 0));
		XAie_DmaDimDesc aie2DmaDimDesc[1] = {{.AieMlDimDesc = {1, 0}}, };
		XAie_DmaTensor aie2DmaTensor = {1, aie2DmaDimDesc};
		driverStatus |= XAie_DmaSetMultiDimAddr(&DmaInst, &aie2DmaTensor, 0, 200704);
		driverStatus |= XAie_DmaEnableBd(&DmaInst);
		driverStatus |= XAie_DmaWriteBd(&DevInst, &DmaInst, XAie_TileLoc(2, 0), 3);
	}

	//Setting shim tile DMA for EG.ddrin[1].out[0]
	{
		XAie_DmaDesc DmaInst;
		driverStatus |= XAie_DmaDescInit(&DevInst, &DmaInst, XAie_TileLoc(2, 0));
		XAie_DmaDimDesc aie2DmaDimDesc[1] = {{.AieMlDimDesc = {1, 0}}, };
		XAie_DmaTensor aie2DmaTensor = {1, aie2DmaDimDesc};
		driverStatus |= XAie_DmaSetMultiDimAddr(&DmaInst, &aie2DmaTensor, 0, 171120);
		driverStatus |= XAie_DmaSetLock(&DmaInst, XAie_LockInit(4, 0), XAie_LockInit(4, 0));
		driverStatus |= XAie_DmaEnableBd(&DmaInst);
		driverStatus |= XAie_DmaWriteBd(&DevInst, &DmaInst, XAie_TileLoc(2, 0), 0);
	}

	//Setting shim tile DMA for EG.ddrout[1].in[0]
	{
		XAie_DmaDesc DmaInst;
		driverStatus |= XAie_DmaDescInit(&DevInst, &DmaInst, XAie_TileLoc(2, 0));
		XAie_DmaDimDesc aie2DmaDimDesc[1] = {{.AieMlDimDesc = {1, 0}}, };
		XAie_DmaTensor aie2DmaTensor = {1, aie2DmaDimDesc};
		driverStatus |= XAie_DmaSetMultiDimAddr(&DmaInst, &aie2DmaTensor, 0, 200704);
		driverStatus |= XAie_DmaEnableBd(&DmaInst);
		driverStatus |= XAie_DmaWriteBd(&DevInst, &DmaInst, XAie_TileLoc(2, 0), 1);
	}

	//Setting shim tile DMA for EG.ddrin[2].out[0]
	{
		XAie_DmaDesc DmaInst;
		driverStatus |= XAie_DmaDescInit(&DevInst, &DmaInst, XAie_TileLoc(3, 0));
		XAie_DmaDimDesc aie2DmaDimDesc[1] = {{.AieMlDimDesc = {1, 0}}, };
		XAie_DmaTensor aie2DmaTensor = {1, aie2DmaDimDesc};
		driverStatus |= XAie_DmaSetMultiDimAddr(&DmaInst, &aie2DmaTensor, 0, 171120);
		driverStatus |= XAie_DmaSetLock(&DmaInst, XAie_LockInit(2, 0), XAie_LockInit(2, 0));
		driverStatus |= XAie_DmaEnableBd(&DmaInst);
		driverStatus |= XAie_DmaWriteBd(&DevInst, &DmaInst, XAie_TileLoc(3, 0), 1);
	}

	//Setting shim tile DMA for EG.ddrout[2].in[0]
	{
		XAie_DmaDesc DmaInst;
		driverStatus |= XAie_DmaDescInit(&DevInst, &DmaInst, XAie_TileLoc(3, 0));
		XAie_DmaDimDesc aie2DmaDimDesc[1] = {{.AieMlDimDesc = {1, 0}}, };
		XAie_DmaTensor aie2DmaTensor = {1, aie2DmaDimDesc};
		driverStatus |= XAie_DmaSetMultiDimAddr(&DmaInst, &aie2DmaTensor, 0, 200704);
		driverStatus |= XAie_DmaEnableBd(&DmaInst);
		driverStatus |= XAie_DmaWriteBd(&DevInst, &DmaInst, XAie_TileLoc(3, 0), 2);
	}

	//Setting shim tile DMA for EG.ddrin[3].out[0]
	{
		XAie_DmaDesc DmaInst;
		driverStatus |= XAie_DmaDescInit(&DevInst, &DmaInst, XAie_TileLoc(6, 0));
		XAie_DmaDimDesc aie2DmaDimDesc[1] = {{.AieMlDimDesc = {1, 0}}, };
		XAie_DmaTensor aie2DmaTensor = {1, aie2DmaDimDesc};
		driverStatus |= XAie_DmaSetMultiDimAddr(&DmaInst, &aie2DmaTensor, 0, 171120);
		driverStatus |= XAie_DmaSetLock(&DmaInst, XAie_LockInit(2, 0), XAie_LockInit(2, 0));
		driverStatus |= XAie_DmaEnableBd(&DmaInst);
		driverStatus |= XAie_DmaWriteBd(&DevInst, &DmaInst, XAie_TileLoc(6, 0), 0);
	}

	//Setting shim tile DMA for EG.ddrout[3].in[0]
	{
		XAie_DmaDesc DmaInst;
		driverStatus |= XAie_DmaDescInit(&DevInst, &DmaInst, XAie_TileLoc(3, 0));
		XAie_DmaDimDesc aie2DmaDimDesc[1] = {{.AieMlDimDesc = {1, 0}}, };
		XAie_DmaTensor aie2DmaTensor = {1, aie2DmaDimDesc};
		driverStatus |= XAie_DmaSetMultiDimAddr(&DmaInst, &aie2DmaTensor, 0, 200704);
		driverStatus |= XAie_DmaEnableBd(&DmaInst);
		driverStatus |= XAie_DmaWriteBd(&DevInst, &DmaInst, XAie_TileLoc(3, 0), 3);
	}


	std::cout<<"Configuring PL-Interface for graph EG..."<<std::endl;

    #endif
	if(driverStatus != AieRC::XAIE_OK)
	{
		return adf::aie_driver_error;
	}

	return adf::ok;
  }

 void EG_core_debug_halt()
  {
	printf("Putting core(s) of graph EG on halt state for debugging...\n");
	XAie_CoreDebugHalt(&DevInst, XAie_TileLoc(0, 3));
	XAie_CoreDebugHalt(&DevInst, XAie_TileLoc(0, 4));
	XAie_CoreDebugHalt(&DevInst, XAie_TileLoc(1, 3));
	XAie_CoreDebugHalt(&DevInst, XAie_TileLoc(1, 4));
	XAie_CoreDebugHalt(&DevInst, XAie_TileLoc(2, 3));
	XAie_CoreDebugHalt(&DevInst, XAie_TileLoc(2, 4));
	XAie_CoreDebugHalt(&DevInst, XAie_TileLoc(3, 3));
	XAie_CoreDebugHalt(&DevInst, XAie_TileLoc(3, 4));
	return;
  }

  void EG_core_enable()
  {
	printf("Enabling core(s) of graph EG...\n");
	XAie_CoreEnable(&DevInst, XAie_TileLoc(0,3 ));
	XAie_CoreEnable(&DevInst, XAie_TileLoc(0,4 ));
	XAie_CoreEnable(&DevInst, XAie_TileLoc(1,3 ));
	XAie_CoreEnable(&DevInst, XAie_TileLoc(1,4 ));
	XAie_CoreEnable(&DevInst, XAie_TileLoc(2,3 ));
	XAie_CoreEnable(&DevInst, XAie_TileLoc(2,4 ));
	XAie_CoreEnable(&DevInst, XAie_TileLoc(3,3 ));
	XAie_CoreEnable(&DevInst, XAie_TileLoc(3,4 ));
	return;
  }

/************************** Graph Configurations  *****************************/

  adf::GraphConfig GraphConfigurations[] = {
  //{id, name, graphLoadElfFunc, graphInitFunc, graphDebugHalt, coreColumns, coreRows, iterMemColumns, iterMemRows, iterMemAddrs, triggered, plKernelInstanceNames, plAxiLiteModes, plDriverStartFuncs, plDriverCheckIPDoneFuncs}
    {0, "EG", &EG_load_elf, &EG_init, &EG_core_debug_halt, {0, 0, 1, 1, 2, 2, 3, 3}, {0, 1, 0, 1, 0, 1, 0, 1}, {0, 0, 1, 1, 2, 2, 3, 3}, {0, 2, 1, 2, 1, 2, 1, 1}, {0x4, 0xc284, 0x4f64, 0x8f64, 0x4, 0xf44, 0x51c4, 0x11c4}, {0, 0, 0, 0, 0, 0, 0, 0}, {}, {}, {}, {},  }, 
  };
  const int NUM_GRAPH = 1;


/************************** RTP Configurations  *****************************/

  adf::RTPConfig RTPConfigurations[] = {
  //{portId, aliasId, portName, aliasName, graphId, isInput, isAsync, isConnect, elemType, numBytes, isPL, hasLock, blocking , isSlaveRTP, selectorColumn, selectorRow, selectorAddr, selectorLockId, pingColumn, pingRow, pingAddr, pongColumn, pongRow, pongAddr, pongLockId, plKernelInstanceName, plParameterIndex, plDriverWriteRTP, plDriverReadRTP}
    {23, 0, "EG.conv[0][0].in[2]", "EG.wgtcount_port[0][0]", 0, true, true, false, (adf::RTPConfig::elementType)4, 4, false, true, false, false, 0, 1, 0x7d60, 4, 0, 1, 0x7d80, 5, 0, 1, 0x260, 6, "", -1, nullptr, nullptr},
    {27, 1, "EG.conv[0][1].in[2]", "EG.wgtcount_port[0][1]", 0, true, true, false, (adf::RTPConfig::elementType)4, 4, false, true, false, false, 0, 2, 0xbfc0, 4, 0, 2, 0x3fe0, 5, 0, 0, 0xc000, 2, "", -1, nullptr, nullptr},
    {38, 2, "EG.conv[1][0].in[2]", "EG.wgtcount_port[1][0]", 0, true, true, false, (adf::RTPConfig::elementType)4, 4, false, true, false, false, 1, 0, 0, 0, 1, 1, 0xbfc0, 2, 1, 1, 0xc260, 3, "", -1, nullptr, nullptr},
    {42, 3, "EG.conv[1][1].in[2]", "EG.wgtcount_port[1][1]", 0, true, true, false, (adf::RTPConfig::elementType)4, 4, false, true, false, false, 1, 2, 0x3fe0, 2, 1, 2, 0xffe0, 3, 1, 0, 0xc000, 3, "", -1, nullptr, nullptr},
    {53, 4, "EG.conv[2][0].in[2]", "EG.wgtcount_port[2][0]", 0, true, true, false, (adf::RTPConfig::elementType)4, 4, false, true, false, false, 2, 0, 0x3fc0, 4, 2, 0, 0, 5, 2, 1, 0xc000, 0, "", -1, nullptr, nullptr},
    {57, 5, "EG.conv[2][1].in[2]", "EG.wgtcount_port[2][1]", 0, true, true, false, (adf::RTPConfig::elementType)4, 4, false, true, false, false, 2, 2, 0xf20, 2, 2, 2, 0, 3, 2, 2, 0xc000, 4, "", -1, nullptr, nullptr},
    {68, 6, "EG.conv[3][0].in[2]", "EG.wgtcount_port[3][0]", 0, true, true, false, (adf::RTPConfig::elementType)4, 4, false, true, false, false, 3, 0, 0x20, 4, 3, 0, 0, 5, 3, 0, 0x8260, 6, "", -1, nullptr, nullptr},
    {72, 7, "EG.conv[3][1].in[2]", "EG.wgtcount_port[3][1]", 0, true, true, false, (adf::RTPConfig::elementType)4, 4, false, true, false, false, 3, 2, 0x20, 2, 3, 2, 0, 3, 3, 2, 0xc020, 4, "", -1, nullptr, nullptr},
  };
  const int NUM_RTP = 8;


/************************** Shared Buffer Configurations  *****************************/

  adf::SharedBufferConfig SharedBufferConfigurations[] = {
  //{id, name}
    {0, "EG.input_weight[0]"}, 
    {1, "EG.input_weight[1]"}, 
    {2, "EG.input[0]"}, 
    {3, "EG.input[1]"}, 
    {4, "EG.input[2]"}, 
    {5, "EG.input[3]"}, 
  };
  const int NUM_SHARED_BUFFERS = 6;


/************************** Shared Buffer DMA Ch Configurations  *****************************/

  adf::DMAChannelConfig DMAChConfigurations[] = {
  //{portId, portName, parentId, tileType, column, row, dmaType, channel}
    {9, "EG.input_weight[0].in[0]", 0, 2, 3, 0, 0, 0},
    {10, "EG.input_weight[0].out[0]", 0, 2, 3, 0, 1, 0},
    {12, "EG.input_weight[1].in[0]", 1, 2, 2, 1, 0, 0},
    {13, "EG.input_weight[1].out[0]", 1, 2, 2, 1, 1, 0},
    {16, "EG.input[0].in[0]", 2, 2, 6, 1, 0, 0},
    {17, "EG.input[0].out[0]", 2, 2, 6, 1, 1, 0},
    {31, "EG.input[1].in[0]", 3, 2, 2, 0, 0, 0},
    {32, "EG.input[1].out[0]", 3, 2, 2, 0, 1, 0},
    {46, "EG.input[2].in[0]", 4, 2, 3, 0, 0, 1},
    {47, "EG.input[2].out[0]", 4, 2, 3, 0, 1, 1},
    {61, "EG.input[3].in[0]", 5, 2, 6, 1, 0, 1},
    {62, "EG.input[3].out[0]", 5, 2, 6, 1, 1, 1},
  };
  const int NUM_DMA_CH_CONFIGS = 12;


/************************** External Buffer Configurations  *****************************/

  adf::ExternalBufferConfig ExternalBufferConfigurations[] = {
  //{id, name, [{portId, portName, column, dmaType, channel, taskRepetition, enable_task_complete_token, [{bd_id, buf_idx, offset, transaction_size}]}]}
    {0, "EG.ddr_weights[0]", {{8, "EG.ddr_weights[0].out[0]", 3, 1, 0, 1, 0, {{0, 0, 0, 4704, }, }, }, }},
    {1, "EG.ddr_weights[1]", {{11, "EG.ddr_weights[1].out[0]", 2, 1, 1, 1, 0, {{2, 0, 0, 4704, }, }, }, }},
    {2, "EG.ddrin[0]", {{14, "EG.ddrin[0].out[0]", 6, 1, 1, 1, 0, {{1, 0, 0, 171120, }, }, }, }},
    {3, "EG.ddrout[0]", {{15, "EG.ddrout[0].in[0]", 2, 0, 1, 1, 0, {{3, 0, 0, 200704, }, }, }, }},
    {4, "EG.ddrin[1]", {{29, "EG.ddrin[1].out[0]", 2, 1, 0, 1, 0, {{0, 0, 0, 171120, }, }, }, }},
    {5, "EG.ddrout[1]", {{30, "EG.ddrout[1].in[0]", 2, 0, 0, 1, 0, {{1, 0, 0, 200704, }, }, }, }},
    {6, "EG.ddrin[2]", {{44, "EG.ddrin[2].out[0]", 3, 1, 1, 1, 0, {{1, 0, 0, 171120, }, }, }, }},
    {7, "EG.ddrout[2]", {{45, "EG.ddrout[2].in[0]", 3, 0, 0, 1, 0, {{2, 0, 0, 200704, }, }, }, }},
    {8, "EG.ddrin[3]", {{59, "EG.ddrin[3].out[0]", 6, 1, 0, 1, 0, {{0, 0, 0, 171120, }, }, }, }},
    {9, "EG.ddrout[3]", {{60, "EG.ddrout[3].in[0]", 3, 0, 1, 1, 0, {{3, 0, 0, 200704, }, }, }, }},
  };
  const int NUM_EXTERNAL_BUFFERS = 10;


/************************** AIE driver and ADF API initializer *****************************/

  class InitializeAIEControl
  {
  public:
    InitializeAIEControl()
    {
      printf("Initializing AIE driver...\n");
      XAie_SetupConfig(ConfigPtr, HW_GEN, XAIE_BASE_ADDR, XAIE_COL_SHIFT,
                       XAIE_ROW_SHIFT, XAIE_NUM_COLS, XAIE_NUM_ROWS,
                       XAIE_SHIM_ROW, XAIE_MEM_TILE_ROW_START,
                       XAIE_MEM_TILE_NUM_ROWS, XAIE_AIE_TILE_ROW_START,
                       XAIE_AIE_TILE_NUM_ROWS);

      XAie_CfgInitialize(&(DevInst), &ConfigPtr);

#if defined(__CDO__)
      XAie_SetIOBackend(&(DevInst), XAIE_IO_BACKEND_CDO); // Set aiengine driver library to run for CDO Mode
      XAie_UpdateNpiAddr(&(DevInst), 0xf6d10000);
#elif defined(__AIECONTROLCODE__)
      XAie_SetIOBackend(&(DevInst), XAIE_IO_BACKEND_CONTROLCODE); // Set aiengine driver library to run for CONTROLCODE Mode
      XAie_UpdateNpiAddr(&(DevInst), 0xf6d10000);
#endif

#if defined(__AIESIM__)
      XAie_TurnEccOff(&DevInst);
#endif

      printf("Initializing ADF API...\n");

#if defined(__AIESIM__)
      extern unsigned ess_debug;
#else
      unsigned ess_debug = false;
#endif

#ifdef __EXCLUDE_PL_CONTROL__
      bool exclude_pl_control = true;
#else
      bool exclude_pl_control = false;
#endif

#ifdef __CDO__
      int trace_config_stream_option = 2;
#else
      int trace_config_stream_option = 0;
#endif

      adf::initializeConfigurations(&DevInst, XAIE_NUM_COLS, XAIE_AIE_TILE_NUM_ROWS, XAIE_MEM_TILE_NUM_ROWS,
                                        GraphConfigurations, NUM_GRAPH,
                                        RTPConfigurations, NUM_RTP,
                                        nullptr, 0,
                                        nullptr, 0,
                                        DMAChConfigurations, NUM_DMA_CH_CONFIGS,
                                        nullptr, 0,
                                        SharedBufferConfigurations, NUM_SHARED_BUFFERS,
                                        ExternalBufferConfigurations, NUM_EXTERNAL_BUFFERS,
                                        nullptr, 0,
                                        nullptr, 0,
                                        nullptr, 0, trace_config_stream_option, nullptr,
                                        ess_debug, exclude_pl_control, true, &broadcastConfigForCoreEnable, true, 0, 2);

    }
  } initAIEControl;


#if defined(__CDO__) || defined(__AIECONTROLCODE__)

/******************* Helper Function to Request Tiles **********************/
/** used in enableErrorHandling, enableClockGating, timerSynchronization ***/

  void requestTiles()
  {
    XAie_LocType locs[30] = {XAie_TileLoc(0, 3), XAie_TileLoc(0, 4), XAie_TileLoc(0, 5), XAie_TileLoc(1, 3), XAie_TileLoc(1, 4), XAie_TileLoc(1, 5), XAie_TileLoc(2, 3), XAie_TileLoc(2, 4), XAie_TileLoc(2, 5), XAie_TileLoc(3, 3), XAie_TileLoc(3, 4), XAie_TileLoc(3, 5), XAie_TileLoc(4, 3), XAie_TileLoc(5, 3), XAie_TileLoc(6, 3), XAie_TileLoc(0, 0), XAie_TileLoc(1, 0), XAie_TileLoc(2, 0), XAie_TileLoc(3, 0), XAie_TileLoc(6, 0), XAie_TileLoc(0, 1), XAie_TileLoc(0, 2), XAie_TileLoc(1, 1), XAie_TileLoc(1, 2), XAie_TileLoc(2, 1), XAie_TileLoc(2, 2), XAie_TileLoc(3, 1), XAie_TileLoc(3, 2), XAie_TileLoc(6, 1), XAie_TileLoc(6, 2)};
    XAie_PmRequestTiles(&DevInst, locs, 30);
  }


/************************** Partition reset *****************************/

  void resetPartition()
  {
    XAie_PartitionInitialize(&DevInst, nullptr);
  }


/************************** Error handling *****************************/

  void enableErrorHandling()
  {
    requestTiles();
    auto spXAieDev = fal_util::get_spXAieDev();
    if (spXAieDev == nullptr)
    {
        printf("s_pXAieDev is null, enableErrorHandling failed\n");
        return;
    }
    spXAieDev->reserveErrorHandling();
    XAie_ErrorHandlingInit(&DevInst);
  }


/************************** Clock gating *****************************/

  void enableClockGating()
  {
    requestTiles();
    auto spXAieDev = fal_util::get_spXAieDev();
    if (spXAieDev == nullptr)
    {
        printf("s_pXAieDev is null, enableClockGating failed\n");
        return;
    }
    spXAieDev->reserveEcc();
    XAie_TurnEccOn(&DevInst);
  }


/************************** Clear Partition Memories *****************************/

  void clearPartitionMems()
  {
    XAie_ClearPartitionMems(&DevInst);
  }
#endif

#if defined(__CDO__) || defined(__AIECONTROLCODE__)
/************************** Collect Statically Allocated Resources *****************************/

  void dumpAllocatedRscsToFile(const std::string aieRscsFilePath)
  {
    auto spXAieDev = fal_util::get_spXAieDev();
    if (spXAieDev == nullptr)
    {
        printf("s_pXAieDev is null, dumpAllocatedRscsToFile failed\n");
        return;
    }
    spXAieDev->saveAllocatedRscsToFile(aieRscsFilePath);
  }
#endif



#if defined(__AIESIM__) || defined(__PS_BARE_METAL__)

  using namespace adf;

// Kernel Stub Definition

#include "kernel_stubs.h"
#endif
